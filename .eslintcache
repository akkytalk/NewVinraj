[{"E:\\git vinraj\\NewVinraj\\src\\index.js":"1","E:\\git vinraj\\NewVinraj\\src\\App.js":"2","E:\\git vinraj\\NewVinraj\\src\\reduxStore\\reducers\\RDepartment.js":"3","E:\\git vinraj\\NewVinraj\\src\\reduxStore\\reducers\\RAccountGroup.js":"4","E:\\git vinraj\\NewVinraj\\src\\reduxStore\\reducers\\RPrefix.js":"5","E:\\git vinraj\\NewVinraj\\src\\reduxStore\\reducers\\RForm.js":"6","E:\\git vinraj\\NewVinraj\\src\\reduxStore\\reducers\\RAccountName.js":"7","E:\\git vinraj\\NewVinraj\\src\\reduxStore\\reducers\\RItemGroup.js":"8","E:\\git vinraj\\NewVinraj\\src\\reduxStore\\reducers\\RItemName.js":"9","E:\\git vinraj\\NewVinraj\\src\\reduxStore\\reducers\\RItemUnits.js":"10","E:\\git vinraj\\NewVinraj\\src\\reduxStore\\reducers\\RAddUserMaster.js":"11","E:\\git vinraj\\NewVinraj\\src\\Components\\Home\\Home.js":"12","E:\\git vinraj\\NewVinraj\\src\\Components\\User&Pass\\UserMaster.js":"13","E:\\git vinraj\\NewVinraj\\src\\Components\\Maintaince\\EquipmentValidationReport.js":"14","E:\\git vinraj\\NewVinraj\\src\\Components\\Maintaince\\MachineryAndEquipmentMmanualList.js":"15","E:\\git vinraj\\NewVinraj\\src\\Components\\Maintaince\\ListOfSuppliersForMaintenanceActivities.js":"16","E:\\git vinraj\\NewVinraj\\src\\Components\\Maintaince\\BreakdownMaintenance.js":"17","E:\\git vinraj\\NewVinraj\\src\\Components\\Maintaince\\PreventiveMaintenanceSchedule.js":"18","E:\\git vinraj\\NewVinraj\\src\\Components\\Maintaince\\MaintenanceCleanlinessChecklist.js":"19","E:\\git vinraj\\NewVinraj\\src\\Components\\Maintaince\\PreventiveMaintenanceRecord.js":"20","E:\\git vinraj\\NewVinraj\\src\\Components\\Maintaince\\PreventiveMaintenanceAnalysisReport.js":"21","E:\\git vinraj\\NewVinraj\\src\\Components\\Maintaince\\BreakdownMaintenanceRecord.js":"22","E:\\git vinraj\\NewVinraj\\src\\Components\\Maintaince\\PreventiveMaintenancePlan.js":"23","E:\\git vinraj\\NewVinraj\\src\\Components\\Maintaince\\BreakdownMaintenanceAnalysisRecord.js":"24","E:\\git vinraj\\NewVinraj\\src\\Components\\Production\\ProductionPlanningCf.js":"25","E:\\git vinraj\\NewVinraj\\src\\Components\\Production\\ProductionReportCf.js":"26","E:\\git vinraj\\NewVinraj\\src\\Components\\Production\\StockReportCf.js":"27","E:\\git vinraj\\NewVinraj\\src\\Components\\Production\\ProcessParametersCf.js":"28","E:\\git vinraj\\NewVinraj\\src\\Components\\Production\\ProductionPlanningVf.js":"29","E:\\git vinraj\\NewVinraj\\src\\Components\\Production\\ProductionReportVf.js":"30","E:\\git vinraj\\NewVinraj\\src\\Components\\Production\\StockReportVf.js":"31","E:\\git vinraj\\NewVinraj\\src\\Components\\Purchase\\AuthorizedSupplierList.js":"32","E:\\git vinraj\\NewVinraj\\src\\Components\\Purchase\\PurchaseRequition.js":"33","E:\\git vinraj\\NewVinraj\\src\\Components\\Purchase\\SuppilierPerformanceMonitiringRecord.js":"34","E:\\git vinraj\\NewVinraj\\src\\Components\\Sales\\EnquiryForm.js":"35","E:\\git vinraj\\NewVinraj\\src\\Components\\Sales\\CustomerRegistrationForm.js":"36","E:\\git vinraj\\NewVinraj\\src\\Components\\Sales\\Quotation.js":"37","E:\\git vinraj\\NewVinraj\\src\\Components\\Sales\\SalesTargetPlanVsActual.js":"38","E:\\git vinraj\\NewVinraj\\src\\Components\\Sales\\CustomerFeedback.js":"39","E:\\git vinraj\\NewVinraj\\src\\Components\\Sales\\FeasibilityReport.js":"40","E:\\git vinraj\\NewVinraj\\src\\Components\\Stores\\PurchaseRequisition.js":"41","E:\\git vinraj\\NewVinraj\\src\\Components\\Stores\\IncomingMaterialInspectionChecklist.js":"42","E:\\git vinraj\\NewVinraj\\src\\Components\\Stores\\StockRegister.js":"43","E:\\git vinraj\\NewVinraj\\src\\Components\\Stores\\ListOfShelfLifeOfItems.js":"44","E:\\git vinraj\\NewVinraj\\src\\Components\\Stores\\RecordOfDisposalOfShelfOfItems.js":"45","E:\\git vinraj\\NewVinraj\\src\\Components\\QMS\\IncomingMaterialTestingRecord.js":"46","E:\\git vinraj\\NewVinraj\\src\\Components\\QMS\\Capa.js":"47","E:\\git vinraj\\NewVinraj\\src\\Components\\QMS\\CustomerComplaintReport.js":"48","E:\\git vinraj\\NewVinraj\\src\\Components\\QMS\\ProductionMa.js":"49","E:\\git vinraj\\NewVinraj\\src\\Components\\QMS\\CustomerComplaintRecord.js":"50","E:\\git vinraj\\NewVinraj\\src\\Components\\Master\\AccountMaster\\AccountGroup\\AccountGroup.js":"51","E:\\git vinraj\\NewVinraj\\src\\Components\\Master\\ItemMaster\\ItemName\\ItemName.js":"52","E:\\git vinraj\\NewVinraj\\src\\Components\\Master\\AccountMaster\\AccountName\\AccountName.js":"53","E:\\git vinraj\\NewVinraj\\src\\Components\\Master\\ItemMaster\\ItemGroup\\ItemGroup.js":"54","E:\\git vinraj\\NewVinraj\\src\\Components\\Master\\ItemMaster\\ItemUnits\\ItemUnits.js":"55","E:\\git vinraj\\NewVinraj\\src\\Components\\Master\\PrefixMaster\\Department\\Department.js":"56","E:\\git vinraj\\NewVinraj\\src\\Components\\Master\\PrefixMaster\\Form\\PrefixForm.js":"57","E:\\git vinraj\\NewVinraj\\src\\Components\\Master\\PrefixMaster\\Prefix\\Prefix.js":"58","E:\\git vinraj\\NewVinraj\\src\\reduxStore\\actions\\actionType.js":"59","E:\\git vinraj\\NewVinraj\\src\\Components\\Home\\Sidebar.js":"60","E:\\git vinraj\\NewVinraj\\src\\Components\\User&Pass\\AddUserMaster.js":"61","E:\\git vinraj\\NewVinraj\\src\\Components\\User&Pass\\RightsUserMaster.js":"62","E:\\git vinraj\\NewVinraj\\src\\reduxStore\\actions\\index.js":"63","E:\\git vinraj\\NewVinraj\\src\\reduxStore\\actions\\itemGroupCreator.js":"64","E:\\git vinraj\\NewVinraj\\src\\axios.js":"65","E:\\git vinraj\\NewVinraj\\src\\reduxStore\\actions\\itemUnitsCreator.js":"66","E:\\git vinraj\\NewVinraj\\src\\reduxStore\\actions\\itemNameCreator.js":"67","E:\\git vinraj\\NewVinraj\\src\\reduxStore\\actions\\addUserMasterCreator.js":"68","E:\\git vinraj\\NewVinraj\\src\\reduxStore\\actions\\formCreator.js":"69","E:\\git vinraj\\NewVinraj\\src\\reduxStore\\actions\\departmentCreator.js":"70","E:\\git vinraj\\NewVinraj\\src\\reduxStore\\actions\\accountGroupCreator.js":"71","E:\\git vinraj\\NewVinraj\\src\\reduxStore\\actions\\accountNameCreator.js":"72","E:\\git vinraj\\NewVinraj\\src\\reduxStore\\actions\\prefixCreator.js":"73","E:\\git vinraj\\NewVinraj\\src\\reduxStore\\ConfigureStore.js":"74","E:\\git vinraj\\NewVinraj\\src\\reduxStore\\reducers\\login.js":"75","E:\\git vinraj\\NewVinraj\\src\\reduxStore\\actions\\LoginCreators.js":"76","E:\\git vinraj\\NewVinraj\\src\\shared\\baseUrl.js":"77","E:\\git vinraj\\NewVinraj\\src\\Auth\\Login2.js":"78","E:\\git vinraj\\NewVinraj\\src\\views\\Custom\\CustomInput.js":"79","E:\\git vinraj\\NewVinraj\\src\\Auth\\Signup.js":"80","E:\\git vinraj\\NewVinraj\\src\\reduxStore\\actions\\SignupCreators.js":"81","E:\\git vinraj\\NewVinraj\\src\\Components\\Purchase\\Purchase.js":"82","E:\\git vinraj\\NewVinraj\\src\\Components\\Purchase\\Req.js":"83","E:\\git vinraj\\NewVinraj\\src\\Components\\Purchase\\Req2.js":"84","E:\\git vinraj\\NewVinraj\\src\\Components\\htmltopdf\\htmltopdf.js":"85","E:\\git vinraj\\NewVinraj\\src\\Components\\Purchase\\PurchaseOrder.js":"86","E:\\git vinraj\\NewVinraj\\src\\Components\\ExcelFile\\ExportCSV.js":"87","E:\\git vinraj\\NewVinraj\\src\\layout\\Layout.js":"88","E:\\git vinraj\\NewVinraj\\src\\routes\\routes.js":"89","E:\\git vinraj\\NewVinraj\\src\\layout\\header\\Header.js":"90","E:\\git vinraj\\NewVinraj\\src\\Components\\Loader.js":"91","E:\\git vinraj\\NewVinraj\\src\\Components\\Dashboard\\DashboardLayout.js":"92","E:\\git vinraj\\NewVinraj\\src\\Components\\Dashboard\\starter\\Top.js":"93","E:\\git vinraj\\NewVinraj\\src\\reduxStore\\actions\\PageCreators.js":"94","E:\\git vinraj\\NewVinraj\\src\\reduxStore\\actions\\RightsCreators.js":"95","E:\\git vinraj\\NewVinraj\\src\\reduxStore\\reducers\\RRights.js":"96","E:\\git vinraj\\NewVinraj\\src\\reduxStore\\reducers\\RPage.js":"97","E:\\git vinraj\\NewVinraj\\src\\Components\\User&Pass\\rights2.js":"98","E:\\git vinraj\\NewVinraj\\src\\views\\Custom\\MyCheckbox.js":"99","E:\\git vinraj\\NewVinraj\\src\\views\\Custom\\CustomSelect.js":"100","E:\\git vinraj\\NewVinraj\\src\\routes\\userRoutes.js":"101","E:\\git vinraj\\NewVinraj\\src\\Components\\Master\\PrefixMaster\\Prefix\\EditPrefix.js":"102","E:\\git vinraj\\NewVinraj\\src\\Components\\loader\\Loader2.js":"103","E:\\git vinraj\\NewVinraj\\src\\reduxStore\\actions\\detailsCreators.js":"104","E:\\git vinraj\\NewVinraj\\src\\reduxStore\\reducers\\RDetails.js":"105","E:\\git vinraj\\NewVinraj\\src\\Components\\Purchase\\EditPurchaseRequisition.js":"106","E:\\git vinraj\\NewVinraj\\src\\Components\\Purchase\\ViewPurchaseRequisiton.js":"107","E:\\git vinraj\\NewVinraj\\src\\Components\\Sales\\View\\ViewSales.js":"108","E:\\git vinraj\\NewVinraj\\src\\Components\\Master\\PrefixMaster\\Prefix\\NewPrefix.js":"109","E:\\git vinraj\\NewVinraj\\src\\reduxStore\\actions\\processCreators.js":"110","E:\\git vinraj\\NewVinraj\\src\\reduxStore\\reducers\\RProcess.js":"111","E:\\git vinraj\\NewVinraj\\src\\reduxStore\\reducers\\RBreakMainRecord.js":"112","E:\\git vinraj\\NewVinraj\\src\\reduxStore\\actions\\breakMainRecordCreator.js":"113","E:\\git vinraj\\NewVinraj\\src\\Components\\Maintaince\\Edit\\EditBreakdownMaintenanceRecord.js":"114","E:\\git vinraj\\NewVinraj\\src\\reduxStore\\actions\\enquiriesFormCreator.js":"115","E:\\git vinraj\\NewVinraj\\src\\reduxStore\\reducers\\REquiriesForm.js":"116","E:\\git vinraj\\NewVinraj\\src\\reduxStore\\actions\\prodPlanCfCreator.js":"117"},{"size":230,"mtime":1632390916761,"results":"118","hashOfConfig":"119"},{"size":11852,"mtime":1632469578707,"results":"120","hashOfConfig":"119"},{"size":1378,"mtime":1616578855063,"results":"121","hashOfConfig":"119"},{"size":1129,"mtime":1616590851626,"results":"122","hashOfConfig":"119"},{"size":1587,"mtime":1632901739208,"results":"123","hashOfConfig":"119"},{"size":1076,"mtime":1616588253478,"results":"124","hashOfConfig":"119"},{"size":873,"mtime":1616590885846,"results":"125","hashOfConfig":"119"},{"size":1102,"mtime":1616592762837,"results":"126","hashOfConfig":"119"},{"size":849,"mtime":1616592762837,"results":"127","hashOfConfig":"119"},{"size":857,"mtime":1616592762837,"results":"128","hashOfConfig":"119"},{"size":1136,"mtime":1616592762837,"results":"129","hashOfConfig":"119"},{"size":1980,"mtime":1616585038540,"results":"130","hashOfConfig":"131"},{"size":3127,"mtime":1632392508081,"results":"132","hashOfConfig":"119"},{"size":23859,"mtime":1633499523612,"results":"133","hashOfConfig":"119"},{"size":23922,"mtime":1633499523475,"results":"134","hashOfConfig":"119"},{"size":23990,"mtime":1633499523639,"results":"135","hashOfConfig":"119"},{"size":23814,"mtime":1633499523690,"results":"136","hashOfConfig":"119"},{"size":23892,"mtime":1633499523866,"results":"137","hashOfConfig":"119"},{"size":23908,"mtime":1633499523474,"results":"138","hashOfConfig":"119"},{"size":23876,"mtime":1633499509520,"results":"139","hashOfConfig":"119"},{"size":23946,"mtime":1633499509520,"results":"140","hashOfConfig":"119"},{"size":51269,"mtime":1634803266154,"results":"141","hashOfConfig":"119"},{"size":23859,"mtime":1633499509520,"results":"142","hashOfConfig":"119"},{"size":23922,"mtime":1633499523690,"results":"143","hashOfConfig":"119"},{"size":69999,"mtime":1634717628314,"results":"144","hashOfConfig":"119"},{"size":23795,"mtime":1633499523866,"results":"145","hashOfConfig":"119"},{"size":23695,"mtime":1633499523866,"results":"146","hashOfConfig":"119"},{"size":112833,"mtime":1634796493900,"results":"147","hashOfConfig":"119"},{"size":23820,"mtime":1633499523866,"results":"148","hashOfConfig":"119"},{"size":23795,"mtime":1633499523866,"results":"149","hashOfConfig":"119"},{"size":23695,"mtime":1633499523866,"results":"150","hashOfConfig":"119"},{"size":23836,"mtime":1633499525348,"results":"151","hashOfConfig":"119"},{"size":24374,"mtime":1634380688978,"results":"152","hashOfConfig":"119"},{"size":23954,"mtime":1633499523865,"results":"153","hashOfConfig":"119"},{"size":90568,"mtime":1634824480855,"results":"154","hashOfConfig":"119"},{"size":23852,"mtime":1633499523865,"results":"155","hashOfConfig":"119"},{"size":23651,"mtime":1633499523812,"results":"156","hashOfConfig":"119"},{"size":23856,"mtime":1633499523789,"results":"157","hashOfConfig":"119"},{"size":23713,"mtime":1633499523835,"results":"158","hashOfConfig":"119"},{"size":23781,"mtime":1633499523789,"results":"159","hashOfConfig":"119"},{"size":23806,"mtime":1633499523768,"results":"160","hashOfConfig":"119"},{"size":23946,"mtime":1633499523766,"results":"161","hashOfConfig":"119"},{"size":23689,"mtime":1633499523745,"results":"162","hashOfConfig":"119"},{"size":1027,"mtime":1612936229401,"results":"163","hashOfConfig":"131"},{"size":23924,"mtime":1633499523768,"results":"164","hashOfConfig":"119"},{"size":23898,"mtime":1633499523865,"results":"165","hashOfConfig":"119"},{"size":23611,"mtime":1633499523866,"results":"166","hashOfConfig":"119"},{"size":23844,"mtime":1633499523866,"results":"167","hashOfConfig":"119"},{"size":23681,"mtime":1633499523835,"results":"168","hashOfConfig":"119"},{"size":23844,"mtime":1633499523865,"results":"169","hashOfConfig":"119"},{"size":12687,"mtime":1633499526360,"results":"170","hashOfConfig":"119"},{"size":14301,"mtime":1633499526137,"results":"171","hashOfConfig":"119"},{"size":13294,"mtime":1633499526128,"results":"172","hashOfConfig":"119"},{"size":12417,"mtime":1633499526137,"results":"173","hashOfConfig":"119"},{"size":11162,"mtime":1633499526128,"results":"174","hashOfConfig":"119"},{"size":8953,"mtime":1633499526091,"results":"175","hashOfConfig":"119"},{"size":9999,"mtime":1633499526091,"results":"176","hashOfConfig":"119"},{"size":11863,"mtime":1633499526091,"results":"177","hashOfConfig":"131"},{"size":14069,"mtime":1634824913341,"results":"178","hashOfConfig":"119"},{"size":17667,"mtime":1633499354883,"results":"179","hashOfConfig":"119"},{"size":14905,"mtime":1633499523726,"results":"180","hashOfConfig":"119"},{"size":14093,"mtime":1634112607039,"results":"181","hashOfConfig":"119"},{"size":2455,"mtime":1634825041315,"results":"182","hashOfConfig":"119"},{"size":4618,"mtime":1632394196444,"results":"183","hashOfConfig":"119"},{"size":225,"mtime":1632556511844,"results":"184","hashOfConfig":"119"},{"size":4547,"mtime":1632394196386,"results":"185","hashOfConfig":"119"},{"size":4682,"mtime":1632394196418,"results":"186","hashOfConfig":"119"},{"size":4849,"mtime":1632394196483,"results":"187","hashOfConfig":"119"},{"size":4584,"mtime":1632402038677,"results":"188","hashOfConfig":"119"},{"size":4866,"mtime":1632401482665,"results":"189","hashOfConfig":"119"},{"size":4678,"mtime":1632393349856,"results":"190","hashOfConfig":"119"},{"size":4738,"mtime":1632393422258,"results":"191","hashOfConfig":"119"},{"size":5855,"mtime":1632901376161,"results":"192","hashOfConfig":"119"},{"size":1896,"mtime":1634818596299,"results":"193","hashOfConfig":"119"},{"size":859,"mtime":1616578855062,"results":"194","hashOfConfig":"119"},{"size":1580,"mtime":1632567722327,"results":"195","hashOfConfig":"119"},{"size":78,"mtime":1616498908099,"results":"196","hashOfConfig":"119"},{"size":5538,"mtime":1616567647895,"results":"197","hashOfConfig":"119"},{"size":317,"mtime":1614748615175,"results":"198","hashOfConfig":"119"},{"size":13054,"mtime":1616570224472,"results":"199","hashOfConfig":"119"},{"size":1673,"mtime":1616505042842,"results":"200","hashOfConfig":"119"},{"size":6550,"mtime":1634113565481,"results":"201","hashOfConfig":"119"},{"size":9542,"mtime":1616656154178,"results":"202","hashOfConfig":"131"},{"size":29674,"mtime":1633073908313,"results":"203","hashOfConfig":"119"},{"size":736,"mtime":1616673701287,"results":"204","hashOfConfig":"131"},{"size":13593,"mtime":1617093904469,"results":"205","hashOfConfig":"131"},{"size":868,"mtime":1617790825953,"results":"206","hashOfConfig":"131"},{"size":3061,"mtime":1632749396189,"results":"207","hashOfConfig":"119"},{"size":12310,"mtime":1634369729859,"results":"208","hashOfConfig":"119"},{"size":1308,"mtime":1632473004056,"results":"209","hashOfConfig":"119"},{"size":912,"mtime":1618202727968,"results":"210","hashOfConfig":"119"},{"size":585,"mtime":1632381574208,"results":"211","hashOfConfig":"119"},{"size":4090,"mtime":1632381586170,"results":"212","hashOfConfig":"119"},{"size":4202,"mtime":1632559726016,"results":"213","hashOfConfig":"119"},{"size":4416,"mtime":1632732917633,"results":"214","hashOfConfig":"119"},{"size":1351,"mtime":1632559974218,"results":"215","hashOfConfig":"119"},{"size":1337,"mtime":1632559972310,"results":"216","hashOfConfig":"119"},{"size":3301,"mtime":1633499523584,"results":"217","hashOfConfig":"119"},{"size":841,"mtime":1632723572395,"results":"218","hashOfConfig":"131"},{"size":333,"mtime":1614748615175,"results":"219","hashOfConfig":"119"},{"size":12348,"mtime":1634369731045,"results":"220","hashOfConfig":"119"},{"size":9525,"mtime":1634370583337,"results":"221","hashOfConfig":"119"},{"size":558,"mtime":1629523095321,"results":"222","hashOfConfig":"119"},{"size":5760,"mtime":1634558223632,"results":"223","hashOfConfig":"119"},{"size":1710,"mtime":1634380517251,"results":"224","hashOfConfig":"119"},{"size":19561,"mtime":1633077288254,"results":"225","hashOfConfig":"131"},{"size":7194,"mtime":1634378665323,"results":"226","hashOfConfig":"119"},{"size":8772,"mtime":1634824385568,"results":"227","hashOfConfig":"119"},{"size":26135,"mtime":1634371099771,"results":"228","hashOfConfig":"119"},{"size":4165,"mtime":1634736460067,"results":"229","hashOfConfig":"119"},{"size":1481,"mtime":1634735927350,"results":"230","hashOfConfig":"119"},{"size":1575,"mtime":1634799167794,"results":"231","hashOfConfig":"119"},{"size":4521,"mtime":1634799557218,"results":"232","hashOfConfig":"119"},{"size":20317,"mtime":1634802484386,"results":"233","hashOfConfig":"119"},{"size":4689,"mtime":1634818187315,"results":"234","hashOfConfig":"119"},{"size":1775,"mtime":1634818576054,"results":"235","hashOfConfig":"119"},{"size":4567,"mtime":1634824913174,"results":"236","hashOfConfig":"119"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},"1r1nmxn",{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1q7rrj",{"filePath":"262","messages":"263","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"239"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289","usedDeprecatedRules":"239"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342","usedDeprecatedRules":"239"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"345","usedDeprecatedRules":"239"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"348","usedDeprecatedRules":"239"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351","usedDeprecatedRules":"239"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354","usedDeprecatedRules":"239"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"239"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"362","usedDeprecatedRules":"363"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"372","usedDeprecatedRules":"239"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"375","messages":"376","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"397","messages":"398","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"401","messages":"402","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"407","messages":"408","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"409","usedDeprecatedRules":"239"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"414","usedDeprecatedRules":"239"},{"filePath":"415","messages":"416","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"417","messages":"418","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"419","usedDeprecatedRules":"239"},{"filePath":"420","messages":"421","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"422"},{"filePath":"423","messages":"424","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"425","messages":"426","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"363"},{"filePath":"427","messages":"428","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"429","messages":"430","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"431","messages":"432","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"433","usedDeprecatedRules":"239"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"438","usedDeprecatedRules":"239"},{"filePath":"439","messages":"440","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"441","messages":"442","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"443","messages":"444","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"445","messages":"446","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"447","messages":"448","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"449","messages":"450","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"451","usedDeprecatedRules":"239"},{"filePath":"452","messages":"453","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"454","messages":"455","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"456","messages":"457","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"458","usedDeprecatedRules":"239"},{"filePath":"459","messages":"460","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"461","usedDeprecatedRules":"239"},{"filePath":"462","messages":"463","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"464","messages":"465","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"466","messages":"467","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"468","messages":"469","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"471","messages":"472","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"473","messages":"474","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"475","messages":"476","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"477","messages":"478","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"479","messages":"480","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"481","messages":"482","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"483","messages":"484","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"485","messages":"486","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"487","messages":"488","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"489","messages":"490","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"491","messages":"492","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\git vinraj\\NewVinraj\\src\\index.js",[],["493","494"],"E:\\git vinraj\\NewVinraj\\src\\App.js",[],"E:\\git vinraj\\NewVinraj\\src\\reduxStore\\reducers\\RDepartment.js",[],"E:\\git vinraj\\NewVinraj\\src\\reduxStore\\reducers\\RAccountGroup.js",[],"E:\\git vinraj\\NewVinraj\\src\\reduxStore\\reducers\\RPrefix.js",[],"E:\\git vinraj\\NewVinraj\\src\\reduxStore\\reducers\\RForm.js",[],"E:\\git vinraj\\NewVinraj\\src\\reduxStore\\reducers\\RAccountName.js",[],"E:\\git vinraj\\NewVinraj\\src\\reduxStore\\reducers\\RItemGroup.js",[],"E:\\git vinraj\\NewVinraj\\src\\reduxStore\\reducers\\RItemName.js",[],"E:\\git vinraj\\NewVinraj\\src\\reduxStore\\reducers\\RItemUnits.js",[],"E:\\git vinraj\\NewVinraj\\src\\reduxStore\\reducers\\RAddUserMaster.js",[],"E:\\git vinraj\\NewVinraj\\src\\Components\\Home\\Home.js",[],"E:\\git vinraj\\NewVinraj\\src\\Components\\User&Pass\\UserMaster.js",["495"],"import React from \"react\";\r\nimport { Fragment } from \"react\";\r\nimport Sidebar from \"../Home/Sidebar\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport AddUserMaster from \"./AddUserMaster\";\r\nimport RightsUserMaster from \"./RightsUserMaster\";\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`simple-tabpanel-${index}`}\r\n      aria-labelledby={`simple-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `simple-tab-${index}`,\r\n    \"aria-controls\": `simple-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n}));\r\n\r\nfunction UserMaster(props) {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      {/* <div className=\"wrapper\">\r\n        \r\n        <nav className=\"main-header navbar navbar-expand navbar-white navbar-light\">\r\n        \r\n          <ul className=\"navbar-nav\">\r\n            <li className=\"nav-item\">\r\n              <a\r\n                className=\"nav-link\"\r\n                data-widget=\"pushmenu\"\r\n                href=\"n\"\r\n                role=\"button\"\r\n              >\r\n                <i className=\"fas fa-bars\"> </i>\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item d-none d-sm-inline-block\">\r\n              <a href=\"/\" className=\"nav-link\">\r\n                Home\r\n              </a>\r\n            </li>\r\n          </ul>\r\n       \r\n        </nav>\r\n     \r\n\r\n        <Sidebar />\r\n        <div class=\"content-wrapper\">\r\n          <section className=\"content\">\r\n            <div className=\"container-fluid\"> */}\r\n      <div className={classes.root}>\r\n        <AppBar position=\"static\">\r\n          <Tabs\r\n            value={value}\r\n            onChange={handleChange}\r\n            aria-label=\"simple tabs example\"\r\n          >\r\n            <Tab label=\"Add User\" {...a11yProps(0)} />\r\n            <Tab label=\"Rights\" {...a11yProps(1)} />\r\n          </Tabs>\r\n        </AppBar>\r\n        <TabPanel value={value} index={0}>\r\n          <AddUserMaster />\r\n        </TabPanel>\r\n        <TabPanel value={value} index={1}>\r\n          <RightsUserMaster />\r\n        </TabPanel>\r\n      </div>\r\n      {/* </div>\r\n          </section>\r\n        </div>\r\n      </div> */}\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default UserMaster;\r\n","E:\\git vinraj\\NewVinraj\\src\\Components\\Maintaince\\EquipmentValidationReport.js",[],"E:\\git vinraj\\NewVinraj\\src\\Components\\Maintaince\\MachineryAndEquipmentMmanualList.js",[],"E:\\git vinraj\\NewVinraj\\src\\Components\\Maintaince\\ListOfSuppliersForMaintenanceActivities.js",[],"E:\\git vinraj\\NewVinraj\\src\\Components\\Maintaince\\BreakdownMaintenance.js",[],"E:\\git vinraj\\NewVinraj\\src\\Components\\Maintaince\\PreventiveMaintenanceSchedule.js",[],"E:\\git vinraj\\NewVinraj\\src\\Components\\Maintaince\\MaintenanceCleanlinessChecklist.js",[],"E:\\git vinraj\\NewVinraj\\src\\Components\\Maintaince\\PreventiveMaintenanceRecord.js",[],"E:\\git vinraj\\NewVinraj\\src\\Components\\Maintaince\\PreventiveMaintenanceAnalysisReport.js",[],"E:\\git vinraj\\NewVinraj\\src\\Components\\Maintaince\\BreakdownMaintenanceRecord.js",["496"],"E:\\git vinraj\\NewVinraj\\src\\Components\\Maintaince\\PreventiveMaintenancePlan.js",[],"E:\\git vinraj\\NewVinraj\\src\\Components\\Maintaince\\BreakdownMaintenanceAnalysisRecord.js",[],"E:\\git vinraj\\NewVinraj\\src\\Components\\Production\\ProductionPlanningCf.js",["497","498"],"/* eslint-disable array-callback-return */\r\n/* eslint-disable eqeqeq */\r\n/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Modal,\r\n  ModalBody,\r\n  ModalHeader,\r\n  Label,\r\n  InputGroup,\r\n  FormGroup,\r\n  InputGroupAddon,\r\n  Table,\r\n} from \"reactstrap\";\r\n// import { jsPDF } from \"jspdf\";\r\n// import html2canvas from \"html2canvas\";\r\n\r\nimport { Formik, Form, Field, ErrorMessage, FieldArray } from \"formik\";\r\nimport CustomInput from \"../../views/Custom/CustomInput\";\r\nimport * as Yup from \"yup\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../reduxStore/actions\";\r\nimport CustomSelect from \"../../views/Custom/CustomSelect\";\r\nimport Loader2 from \"../loader/Loader2\";\r\n\r\nimport printJS from \"print-js\";\r\nimport \"../../css/Format.css\";\r\n\r\nfunction ProductionPlanningCf(props) {\r\n  let data = {\r\n    token: props.login?.login?.token,\r\n  };\r\n\r\n  const [modal, setModal] = useState(false);\r\n  const [showtable, setShowTable] = useState(false);\r\n  const toggle = () => {\r\n    setModal(!modal);\r\n    setShowTable(false);\r\n  };\r\n\r\n  const [deleteStatus, setDeleteStatus] = useState(false);\r\n  const [updateStatus, setUpdateStatus] = useState(false);\r\n  const [createStatus, setCreateStatus] = useState(false);\r\n  const [printStatus, setPrintStatus] = useState(false);\r\n\r\n  useEffect(() => {\r\n    props.onDepartmentGetData(data);\r\n    props.onFormGetData(data);\r\n    props.onPrefixGetData(data);\r\n    status();\r\n  }, []);\r\n\r\n  function status() {\r\n    props.login?.login?.user?.rights?.map((right) => {\r\n      if (right.form_id == 19) {\r\n        if (right.create_status == 1) {\r\n          setCreateStatus(true);\r\n        }\r\n        if (right.update_status == 1) {\r\n          setUpdateStatus(true);\r\n        }\r\n        if (right.delete_status == 1) {\r\n          setDeleteStatus(true);\r\n        }\r\n        if (right.print_status == 1) {\r\n          setPrintStatus(true);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  const printMutliple = () => {\r\n    console.log(\"print\");\r\n    printJS({\r\n      printable: \"htmlToPdf2\",\r\n      CSS: \"../../css/Format.css\",\r\n      scanStyles: \"true\",\r\n      maxWidth: 1500,\r\n      type: \"html\",\r\n      targetStyles: \"[*]\",\r\n      // style: \"@page { size: Letter landscape; } @font {size: 8px}\",\r\n    });\r\n  };\r\n\r\n  // const printMutliple = () => {\r\n  //   const divToDisplay = document.getElementById(\"htmlToPdf2\");\r\n  //   html2canvas(divToDisplay).then(function (canvas) {\r\n  //     console.log(canvas);\r\n  //     const imgData = canvas.toDataURL(\"image/png\");\r\n  //     const pdf = new jsPDF({\r\n  //       orientation: \"Potrait\",\r\n  //     });\r\n  //     const imgProps = pdf.getImageProperties(imgData);\r\n  //     const pdfWidth = pdf.internal.pageSize.getWidth();\r\n  //     const pdfHeight = (imgProps.height * pdfWidth) / imgProps.width;\r\n  //     console.log(pdfHeight, pdfWidth);\r\n  //     pdf.addImage(imgData, \"PNG\", 0, 0, pdfWidth, pdfHeight);\r\n  //     pdf.save(\"download.pdf\");\r\n  //   });\r\n  // };\r\n  let user;\r\n  const handleSubmit = (values, { setSubmitting }) => {\r\n    console.log(\"values in Bio Data:\", values);\r\n\r\n    user = {\r\n      form_id: values.form_id,\r\n      title: values.title,\r\n      rev_no: values.rev_no,\r\n      details: values.details,\r\n      department_id: values.department_id,\r\n      di_no: values.di_no,\r\n    };\r\n    console.log(\"Data of User of details:\", user);\r\n    // props.postEnquiriesData(data, user, toggle, setSubmitting, setShowTable);\r\n    // setSubmitting(true);\r\n    setShowTable(true);\r\n    return;\r\n  };\r\n\r\n  if (props.login?.login?.user?.role == \"admin\")\r\n    return (\r\n      <Card>\r\n        <CardHeader className=\"bg-warning text-white\">\r\n          <div className=\"\">\r\n            <strong>Production Planning Cf</strong>\r\n\r\n            <Button\r\n              className=\"btn-success  float-right\"\r\n              onClick={() => {\r\n                toggle();\r\n              }}\r\n            >\r\n              Add Production Planning Cf\r\n            </Button>\r\n          </div>\r\n          <Modal className=\"modal-info modal-lg\" isOpen={modal} toggle={toggle}>\r\n            <ModalHeader toggle={toggle}>\r\n              Add New Production Planning Cf\r\n            </ModalHeader>\r\n\r\n            <ModalBody>\r\n              <Formik\r\n                initialValues={{\r\n                  form_id: 19,\r\n                  department_id: 7,\r\n                  di_no: \"\",\r\n                  title: \"\",\r\n                  rev_no: \"\",\r\n                  // rev_date: \"\",\r\n                  // date: \"\",\r\n                  // ref_no: \"\",\r\n                  details: [],\r\n                  row: \"\",\r\n                }}\r\n                onSubmit={handleSubmit}\r\n                validationSchema={Yup.object().shape({})}\r\n              >\r\n                {(formProps) => {\r\n                  props.prefix?.map((pre) => {\r\n                    if (\r\n                      pre.form_id == formProps.values.form_id &&\r\n                      pre.department_id == formProps.values.department_id\r\n                    ) {\r\n                      formProps.values.title = pre.title;\r\n                      formProps.values.di_no = pre.prefix;\r\n                      formProps.values.rev_no = pre.rev_no;\r\n                    }\r\n                  });\r\n\r\n                  return !showtable ? (\r\n                    <Form>\r\n                      <Row className=\"form-group\">\r\n                        <Col md={3}>\r\n                          <Label for=\"department_id\">Department</Label>\r\n                          <InputGroup>\r\n                            <Field\r\n                              component={CustomSelect}\r\n                              type=\"select\"\r\n                              list=\"userdatalist\"\r\n                              name=\"department_id\"\r\n                              id=\"department_id\"\r\n                              placeholder=\"Enter Title\"\r\n                              disabled\r\n                              className={\r\n                                \"form-control\" +\r\n                                (formProps.errors.department_id &&\r\n                                formProps.touched.department_id\r\n                                  ? \" is-invalid\"\r\n                                  : \"\")\r\n                              }\r\n                            >\r\n                              {props.department?.map((dep) => {\r\n                                if (dep.id == 11)\r\n                                  return (\r\n                                    <option value={dep.id}>{dep.name}</option>\r\n                                  );\r\n                              })}\r\n                            </Field>\r\n                          </InputGroup>\r\n                        </Col>\r\n\r\n                        <Col md={3}>\r\n                          <Label for=\"di_no\">Di No</Label>\r\n                          <InputGroup>\r\n                            <Field\r\n                              component={CustomInput}\r\n                              type=\"text\"\r\n                              name=\"di_no\"\r\n                              id=\"di_no\"\r\n                              placeholder=\"Enter di_no\"\r\n                              disabled\r\n                              className={\r\n                                \"form-control\" +\r\n                                (formProps.errors.di_no &&\r\n                                formProps.touched.di_no\r\n                                  ? \" is-invalid\"\r\n                                  : \"\")\r\n                              }\r\n                            ></Field>\r\n\r\n                            <ErrorMessage\r\n                              name=\"di_no\"\r\n                              component=\"div\"\r\n                              className=\"invalid-feedback\"\r\n                            />\r\n                          </InputGroup>\r\n                        </Col>\r\n\r\n                        <Col md={3}>\r\n                          <Label for=\"title\">Title</Label>\r\n                          <InputGroup>\r\n                            <Field\r\n                              component={CustomInput}\r\n                              type=\"text\"\r\n                              name=\"title\"\r\n                              id=\"title\"\r\n                              disabled\r\n                              placeholder=\"Enter Title\"\r\n                              className={\r\n                                \"form-control\" +\r\n                                (formProps.errors.title &&\r\n                                formProps.touched.title\r\n                                  ? \" is-invalid\"\r\n                                  : \"\")\r\n                              }\r\n                            />\r\n\r\n                            <ErrorMessage\r\n                              name=\"title\"\r\n                              component=\"div\"\r\n                              className=\"invalid-feedback\"\r\n                            />\r\n                          </InputGroup>\r\n                        </Col>\r\n\r\n                        <Col md={3}>\r\n                          <Label for=\"rev_no\">Rev no</Label>\r\n                          <InputGroup>\r\n                            <Field\r\n                              component={CustomInput}\r\n                              type=\"text\"\r\n                              name=\"rev_no\"\r\n                              id=\"rev_no\"\r\n                              placeholder=\"Enter rev_no\"\r\n                              disabled\r\n                              className={\r\n                                \"form-control\" +\r\n                                (formProps.errors.rev_no &&\r\n                                formProps.touched.rev_no\r\n                                  ? \" is-invalid\"\r\n                                  : \"\")\r\n                              }\r\n                            />\r\n\r\n                            <ErrorMessage\r\n                              name=\"rev_no\"\r\n                              component=\"div\"\r\n                              className=\"invalid-feedback\"\r\n                            />\r\n                          </InputGroup>\r\n                        </Col>\r\n                      </Row>\r\n\r\n                      <Row className=\"form-group\">\r\n                        <Col md={6}>\r\n                          <Label for=\"row\">Add Table Rows</Label>\r\n                          <InputGroup>\r\n                            <Field\r\n                              component={CustomInput}\r\n                              type=\"number\"\r\n                              name=\"row\"\r\n                              id=\"row\"\r\n                              placeholder=\"Enter Table rows\"\r\n                              className={\r\n                                \"form-control\" +\r\n                                (formProps.errors.row && formProps.touched.row\r\n                                  ? \" is-invalid\"\r\n                                  : \"\")\r\n                              }\r\n                            />\r\n\r\n                            <ErrorMessage\r\n                              name=\"row\"\r\n                              component=\"div\"\r\n                              className=\"invalid-feedback\"\r\n                            />\r\n                          </InputGroup>\r\n                        </Col>\r\n                      </Row>\r\n\r\n                      <Row>\r\n                        <Col md={12}>\r\n                          <FieldArray\r\n                            name=\"details\"\r\n                            render={(arrayHelpers) => (\r\n                              <div>\r\n                                <Row>\r\n                                  <Col md={10}>\r\n                                    <FormGroup>\r\n                                      <InputGroup>\r\n                                        <InputGroupAddon addonType=\"append\">\r\n                                          <Button\r\n                                            block\r\n                                            className=\"btn-success\"\r\n                                            onClick={() => {\r\n                                              for (\r\n                                                let i = 1;\r\n                                                i <= formProps.values.row;\r\n                                                i++\r\n                                              ) {\r\n                                                arrayHelpers.push({\r\n                                                  form_id:\r\n                                                    formProps.values.form_id,\r\n                                                  customer_name: \"\",\r\n                                                  so_no: \"\",\r\n                                                  grade: \"\",\r\n                                                  colour: \"\",\r\n                                                  width: \"\",\r\n                                                  thickness: \"\",\r\n                                                  length: \"\",\r\n                                                  slitt_size: \"\",\r\n                                                  no_rolls: \"\",\r\n                                                  qty: \"\",\r\n                                                  actual_production: \"\",\r\n                                                  balance: \"\",\r\n                                                  cf: \"\",\r\n                                                  remarks: \"\",\r\n                                                });\r\n                                              }\r\n                                            }}\r\n                                          >\r\n                                            Add Rows\r\n                                          </Button>\r\n                                        </InputGroupAddon>\r\n                                      </InputGroup>\r\n                                    </FormGroup>\r\n                                  </Col>\r\n                                </Row>\r\n                                <div style={{ overflow: \"scroll\" }}>\r\n                                  <Table size=\"sm\" className=\"text-center\">\r\n                                    <thead>\r\n                                      <tr>\r\n                                        <th>Customer Name</th>\r\n                                        <th>SO.NO</th>\r\n                                        <th>Grade</th>\r\n                                        <th>Colour</th>\r\n                                        <th>Width (MM)</th>\r\n                                        <th>Thickness (MM)</th>\r\n                                        <th>Length (Metre)</th>\r\n                                        <th>No. of Rolls</th>\r\n                                        <th>Quantity (kG)</th>\r\n                                        <th>Slitt Size (MM)</th>\r\n                                        <th>Actual Production</th>\r\n                                        <th>Balance</th>\r\n                                        <th>C/F</th>\r\n                                        <th>Remarks</th>\r\n                                      </tr>\r\n                                    </thead>\r\n                                    <tbody className=\"text-center\">\r\n                                      {console.log(\r\n                                        \"values\",\r\n                                        formProps?.values?.details\r\n                                      )}\r\n                                      {formProps?.values?.details?.map(\r\n                                        (detail, index) => {\r\n                                          return (\r\n                                            <tr\r\n                                              key={index}\r\n                                              className=\"text-center\"\r\n                                            >\r\n                                              <td>\r\n                                                <Field\r\n                                                  component={CustomInput}\r\n                                                  type=\"text\"\r\n                                                  name={`details.${index}.customer_name`}\r\n                                                  id=\"customer_name\"\r\n                                                  style={{ width: \"150px\" }}\r\n                                                />\r\n                                              </td>\r\n                                              <td>\r\n                                                <Field\r\n                                                  component={CustomInput}\r\n                                                  type=\"text\"\r\n                                                  name={`details.${index}.so_no`}\r\n                                                  id={`details.${index}.so_no`}\r\n                                                  style={{ width: \"50px\" }}\r\n                                                />\r\n                                              </td>\r\n                                              <td>\r\n                                                <Field\r\n                                                  component={CustomInput}\r\n                                                  type=\"text\"\r\n                                                  name={`details.${index}.grade`}\r\n                                                  id={`details.${index}.grade`}\r\n                                                  style={{ width: \"100px\" }}\r\n                                                />\r\n                                              </td>\r\n                                              <td>\r\n                                                <Field\r\n                                                  component={CustomInput}\r\n                                                  type=\"text\"\r\n                                                  name={`details.${index}.colour`}\r\n                                                  id={`details.${index}.colour`}\r\n                                                  style={{ width: \"100px\" }}\r\n                                                />\r\n                                              </td>\r\n                                              <td>\r\n                                                <Field\r\n                                                  component={CustomInput}\r\n                                                  type=\"text\"\r\n                                                  name={`details.${index}.width`}\r\n                                                  id={`details.${index}.width`}\r\n                                                  style={{ width: \"50px\" }}\r\n                                                />\r\n                                              </td>\r\n                                              <td>\r\n                                                <Field\r\n                                                  component={CustomInput}\r\n                                                  type=\"text\"\r\n                                                  name={`details.${index}.thickness`}\r\n                                                  id={`details.${index}.thickness`}\r\n                                                  style={{ width: \"50px\" }}\r\n                                                />\r\n                                              </td>\r\n                                              <td>\r\n                                                <Field\r\n                                                  component={CustomInput}\r\n                                                  type=\"text\"\r\n                                                  name={`details.${index}.length`}\r\n                                                  id={`details.${index}.length`}\r\n                                                  style={{ width: \"50px\" }}\r\n                                                />\r\n                                              </td>\r\n                                              <td>\r\n                                                <Field\r\n                                                  component={CustomInput}\r\n                                                  type=\"text\"\r\n                                                  name={`details.${index}.slitt_size`}\r\n                                                  id={`details.${index}.slitt_size`}\r\n                                                  style={{ width: \"50px\" }}\r\n                                                />\r\n                                              </td>\r\n                                              <td>\r\n                                                <Field\r\n                                                  component={CustomInput}\r\n                                                  type=\"text\"\r\n                                                  name={`details.${index}.no_rolls`}\r\n                                                  id={`details.${index}.no_rolls`}\r\n                                                  style={{ width: \"100px\" }}\r\n                                                />\r\n                                              </td>\r\n                                              <td>\r\n                                                <Field\r\n                                                  component={CustomInput}\r\n                                                  type=\"number\"\r\n                                                  name={`details.${index}.qty`}\r\n                                                  id={`details.${index}.qty`}\r\n                                                  style={{ width: \"100px\" }}\r\n                                                />\r\n                                              </td>\r\n                                              <td>\r\n                                                <Field\r\n                                                  component={CustomInput}\r\n                                                  type=\"text\"\r\n                                                  name={`details.${index}.actual_production`}\r\n                                                  id={`details.${index}.actual_production`}\r\n                                                  style={{ width: \"150px\" }}\r\n                                                />\r\n                                              </td>\r\n                                              <td>\r\n                                                <Field\r\n                                                  component={CustomInput}\r\n                                                  type=\"text\"\r\n                                                  name={`details.${index}.balance`}\r\n                                                  id={`details.${index}.balance`}\r\n                                                  style={{ width: \"150px\" }}\r\n                                                />\r\n                                              </td>\r\n                                              <td>\r\n                                                <Field\r\n                                                  component={CustomInput}\r\n                                                  type=\"text\"\r\n                                                  name={`details.${index}.cf`}\r\n                                                  id={`details.${index}.cf`}\r\n                                                  style={{ width: \"150px\" }}\r\n                                                />\r\n                                              </td>\r\n                                              <td>\r\n                                                <Field\r\n                                                  component={CustomInput}\r\n                                                  type=\"text\"\r\n                                                  name={`details.${index}.remarks`}\r\n                                                  id={`details.${index}.remarks`}\r\n                                                  style={{ width: \"150px\" }}\r\n                                                />\r\n                                              </td>\r\n                                            </tr>\r\n                                          );\r\n                                        }\r\n                                      )}\r\n                                    </tbody>\r\n                                  </Table>\r\n                                </div>\r\n                              </div>\r\n                            )}\r\n                          />\r\n                        </Col>\r\n                      </Row>\r\n                      <br />\r\n                      <Row style={{ justifyContent: \"center\" }}>\r\n                        <Col md={4}>\r\n                          <Button type=\"reset\" className=\"btn-danger\" block>\r\n                            <b>Reset</b>\r\n                          </Button>\r\n                        </Col>\r\n                        <Col md={4}>\r\n                          <Button\r\n                            type=\"submit\"\r\n                            disabled={formProps.isSubmitting}\r\n                            color=\"primary\"\r\n                            block\r\n                          >\r\n                            Submit\r\n                          </Button>\r\n                        </Col>\r\n                      </Row>\r\n                    </Form>\r\n                  ) : (\r\n                    <>\r\n                      <div\r\n                        id=\"htmlToPdf2\"\r\n                        className=\"d-flex flex-column flex-wrap f-10 w-100\"\r\n                      >\r\n                        <div className=\"d-flex test\">\r\n                          <div className=\"w-25 test-r p-1 text-center\">\r\n                            <img\r\n                              src=\"https://uditsolutions.in/vinraj.png\"\r\n                              alt=\"\"\r\n                            />\r\n                          </div>\r\n                          <div className=\"w-50 test-r d-flex justify-content-center align-items-center\">\r\n                            <h5 className=\"font-weight-bold text-underline\">\r\n                              DAILY PRODUCTION PLANNING SHEET.\r\n                            </h5>\r\n                          </div>\r\n                          <div className=\"w-25 f-12 p-0 text-center d-flex flex-column justify-content-between\">\r\n                            <div className=\"d-flex\">\r\n                              <th className=\"w-40\">Di.No: </th>\r\n                              <td className=\"w-60\">\r\n                                {formProps.values?.di_no}\r\n                              </td>\r\n                            </div>\r\n                            <div className=\"d-flex\">\r\n                              <th className=\"w-40\">Rev. No.: </th>\r\n                              <td className=\"w-60\">\r\n                                {formProps.values?.rev_no}\r\n                              </td>\r\n                            </div>\r\n                            <div className=\"d-flex\">\r\n                              <th className=\"w-50\">Rev. Date: </th>\r\n                              <td className=\"w-60\">\r\n                                {formProps.values?.rev_date}\r\n                              </td>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n\r\n                        <div className=\"test w-100\">\r\n                          <div className=\"d-flex mb-1 w-100\">\r\n                            <div className=\"ml-3 w-50\">\r\n                              <span className=\"\">Date: </span>\r\n                              <span>{props.details?.postDetails?.date}</span>\r\n                            </div>\r\n                            <div className=\"ml-3 w-50\">\r\n                              <span className=\"\">Ref No: </span>\r\n                              <span>{props.details?.postDetails?.ref_no}</span>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"w-100\">\r\n                          <table className=\"table-sm w-100\">\r\n                            <thead className=\"w-50\">\r\n                              <tr className=\"w-100\">\r\n                                <th className=\"test\">Sr No.</th>\r\n                                <th className=\"test\">Customer Name</th>\r\n                                <th className=\"test\">SO NO</th>\r\n                                <th className=\"test\">GRADE</th>\r\n                                <th className=\"test\">COLOUR</th>\r\n                                <th className=\"test\">WIDTH (MM)</th>\r\n                                <th className=\"test\">THICKNESS (MM)</th>\r\n                                <th className=\"test\">LENGTH (METRE)</th>\r\n                                <th className=\"test\">NO. OF ROLLS</th>\r\n\r\n                                <th className=\"test\">QUANTITY (KG)</th>\r\n                                <th className=\"test\">SLITT SIZE (MM)</th>\r\n                                <th className=\"test\">ACTUAL PRODUCTION</th>\r\n                                <th className=\"test\">BALANCE</th>\r\n                                <th className=\"test\">C/F</th>\r\n                                <th className=\"test\">REMARKS</th>\r\n                              </tr>\r\n                            </thead>\r\n                            <tbody className=\"w-50\">\r\n                              {formProps.values?.details?.map((de, index) => {\r\n                                return (\r\n                                  <tr key={index} className=\"w-100\">\r\n                                    <td className=\"test\">{index + 1}</td>\r\n\r\n                                    <td className=\"test\">{de.customer_name}</td>\r\n                                    <td className=\"test\">{de.so_no}</td>\r\n                                    <td className=\"test\"> {de.grade}</td>\r\n                                    <td className=\"test\">{de.colour} </td>\r\n\r\n                                    <td className=\"test\">{de.width}</td>\r\n                                    <td className=\"test\">{de.thickness}</td>\r\n                                    <td className=\"test\">{de.length}</td>\r\n                                    <td className=\"test\">{de.no_rolls}</td>\r\n                                    <td className=\"test\">{de.qty}</td>\r\n                                    <td className=\"test\">{de.slitt_size}</td>\r\n                                    <td className=\"test\">\r\n                                      {de.actual_production}\r\n                                    </td>\r\n                                    <td className=\"test\">{de.balance}</td>\r\n                                    <td className=\"test\">{de.cf}</td>\r\n\r\n                                    <td className=\"test\">{de.remarks}</td>\r\n                                  </tr>\r\n                                );\r\n                              })}\r\n                            </tbody>\r\n                          </table>\r\n                        </div>\r\n                      </div>\r\n                      {(printStatus ||\r\n                        props.login?.login?.user?.role == \"admin\") && (\r\n                        <div className=\"modal-footer\">\r\n                          <button\r\n                            type=\"button\"\r\n                            className=\"btn btn-secondary\"\r\n                            data-dismiss=\"modal\"\r\n                            onClick={() => setModal(false)}\r\n                          >\r\n                            Cancel\r\n                          </button>\r\n                          <button\r\n                            type=\"button\"\r\n                            className=\"btn btn-primary\"\r\n                            onClick={printMutliple}\r\n                          >\r\n                            Print\r\n                          </button>\r\n                        </div>\r\n                      )}\r\n                    </>\r\n                  );\r\n                }}\r\n              </Formik>\r\n            </ModalBody>\r\n          </Modal>\r\n        </CardHeader>\r\n        <CardBody style={{ overflow: \"scroll\" }}>\r\n          <table\r\n            className=\"table table-sm text-center\"\r\n            style={{ fontSize: \"12px\" }}\r\n          >\r\n            <thead className=\"table-sticky\">\r\n              <tr>\r\n                {/* <th>ID</th> */}\r\n\r\n                <th scope=\"col\">Title</th>\r\n                <th scope=\"col\">Rev no</th>\r\n                <th scope=\"col\">Rev Date</th>\r\n                <th scope=\"col\">Date</th>\r\n                <th scope=\"col\">Ref no</th>\r\n                <th scope=\"col\">Customer Name</th>\r\n                <th scope=\"col\">Contact No</th>\r\n                <th scope=\"col\">Email</th>\r\n                <th scope=\"col\">View</th>\r\n\r\n                {/* <th scope=\"col\">Actions</th> */}\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {props.form?.isLoading ? (\r\n                <tr>\r\n                  <td colSpan={18}>\r\n                    <Loader2 color={\"primary\"} />\r\n                  </td>\r\n                </tr>\r\n              ) : props.form?.form?.length > 0 ? (\r\n                props.form?.form\r\n                  .filter((user) => user.id == 19)\r\n                  .map((user, index) => {\r\n                    return user.form_headers.map((form) => {\r\n                      return (\r\n                        <tr key={index}>\r\n                          <td>{form.title}</td>\r\n                          <td>{form.rev_no}</td>\r\n                          <td>{form.rev_date}</td>\r\n                          <td>{form.date}</td>\r\n                          <td>{form.ref_no}</td>\r\n                          <td>{form.customer_name}</td>\r\n                          <td>{form.contact_name}</td>\r\n                          <td>{form.contact_no}</td>\r\n                          <td>\r\n                            {/* <ViewSales\r\n                              data={form}\r\n                              formdata={user}\r\n                              printStatus={printStatus}\r\n                            />{\" \"} */}\r\n                          </td>\r\n                          {/* <td className=\"d-flex justify-content-center\">\r\n                            {updateStatus ||\r\n                              (props.login?.login?.user?.role == \"admin\" && (\r\n                                <EditPurchaseRequisition\r\n                                  data={form}\r\n                                  formdata={user}\r\n                                />\r\n                              ))}\r\n                            {(deleteStatus ||\r\n                              props.login?.login?.user?.role == \"admin\") && (\r\n                              <Button\r\n                                className=\"btn-danger ml-3 p-1\"\r\n                                onClick={() => {\r\n                                  if (\r\n                                    window.confirm(\r\n                                      \"Are you sure you wish to delete this Purchase Requisition?\"\r\n                                    )\r\n                                  )\r\n                                    props.deleteDetails(data);\r\n                                }}\r\n                              >\r\n                                <i\r\n                                  className=\"fa fa-trash-alt \"\r\n                                  value={user.id}\r\n                                  aria-hidden=\"true\"\r\n                                ></i>\r\n                              </Button>\r\n                            )}\r\n                          </td>\r\n                         */}\r\n                        </tr>\r\n                      );\r\n                    });\r\n                  })\r\n              ) : (\r\n                <tr>\r\n                  <td colSpan={3}>No Forms Data</td>\r\n                </tr>\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </CardBody>\r\n      </Card>\r\n    );\r\n  else if (props.login?.login?.user?.role == \"user\")\r\n    return (\r\n      <Card>\r\n        <CardHeader className=\"bg-warning text-white\">\r\n          <div className=\"\">\r\n            <strong>Production Planning Cf</strong>\r\n            {createStatus && (\r\n              <Button\r\n                className=\"btn-success  float-right\"\r\n                onClick={() => {\r\n                  toggle();\r\n                }}\r\n              >\r\n                Add Production Planning Cf\r\n              </Button>\r\n            )}\r\n          </div>\r\n          <Modal className=\"modal-info modal-lg\" isOpen={modal} toggle={toggle}>\r\n            <ModalHeader toggle={toggle}>\r\n              Add New Production Planning Cf\r\n            </ModalHeader>\r\n\r\n            <ModalBody>\r\n              <Formik\r\n                initialValues={{\r\n                  form_id: 19,\r\n                  department_id: 7,\r\n                  di_no: \"\",\r\n                  title: \"\",\r\n                  rev_no: \"\",\r\n                  // rev_date: \"\",\r\n                  // date: \"\",\r\n                  // ref_no: \"\",\r\n                  details: [],\r\n                  row: \"\",\r\n                }}\r\n                onSubmit={handleSubmit}\r\n                validationSchema={Yup.object().shape({})}\r\n              >\r\n                {(formProps) => {\r\n                  props.prefix?.map((pre) => {\r\n                    if (\r\n                      pre.form_id == formProps.values.form_id &&\r\n                      pre.department_id == formProps.values.department_id\r\n                    ) {\r\n                      formProps.values.title = pre.title;\r\n                      formProps.values.di_no = pre.prefix;\r\n                      formProps.values.rev_no = pre.rev_no;\r\n                    }\r\n                  });\r\n\r\n                  return !showtable ? (\r\n                    <Form>\r\n                      <Row className=\"form-group\">\r\n                        <Col md={3}>\r\n                          <Label for=\"department_id\">Department</Label>\r\n                          <InputGroup>\r\n                            <Field\r\n                              component={CustomSelect}\r\n                              type=\"select\"\r\n                              list=\"userdatalist\"\r\n                              name=\"department_id\"\r\n                              id=\"department_id\"\r\n                              placeholder=\"Enter Title\"\r\n                              disabled\r\n                              className={\r\n                                \"form-control\" +\r\n                                (formProps.errors.department_id &&\r\n                                formProps.touched.department_id\r\n                                  ? \" is-invalid\"\r\n                                  : \"\")\r\n                              }\r\n                            >\r\n                              {props.department?.map((dep) => {\r\n                                if (dep.id == 11)\r\n                                  return (\r\n                                    <option value={dep.id}>{dep.name}</option>\r\n                                  );\r\n                              })}\r\n                            </Field>\r\n                          </InputGroup>\r\n                        </Col>\r\n\r\n                        <Col md={3}>\r\n                          <Label for=\"di_no\">Di No</Label>\r\n                          <InputGroup>\r\n                            <Field\r\n                              component={CustomInput}\r\n                              type=\"text\"\r\n                              name=\"di_no\"\r\n                              id=\"di_no\"\r\n                              placeholder=\"Enter di_no\"\r\n                              disabled\r\n                              className={\r\n                                \"form-control\" +\r\n                                (formProps.errors.di_no &&\r\n                                formProps.touched.di_no\r\n                                  ? \" is-invalid\"\r\n                                  : \"\")\r\n                              }\r\n                            ></Field>\r\n\r\n                            <ErrorMessage\r\n                              name=\"di_no\"\r\n                              component=\"div\"\r\n                              className=\"invalid-feedback\"\r\n                            />\r\n                          </InputGroup>\r\n                        </Col>\r\n\r\n                        <Col md={3}>\r\n                          <Label for=\"title\">Title</Label>\r\n                          <InputGroup>\r\n                            <Field\r\n                              component={CustomInput}\r\n                              type=\"text\"\r\n                              name=\"title\"\r\n                              id=\"title\"\r\n                              disabled\r\n                              placeholder=\"Enter Title\"\r\n                              className={\r\n                                \"form-control\" +\r\n                                (formProps.errors.title &&\r\n                                formProps.touched.title\r\n                                  ? \" is-invalid\"\r\n                                  : \"\")\r\n                              }\r\n                            />\r\n\r\n                            <ErrorMessage\r\n                              name=\"title\"\r\n                              component=\"div\"\r\n                              className=\"invalid-feedback\"\r\n                            />\r\n                          </InputGroup>\r\n                        </Col>\r\n\r\n                        <Col md={3}>\r\n                          <Label for=\"rev_no\">Rev no</Label>\r\n                          <InputGroup>\r\n                            <Field\r\n                              component={CustomInput}\r\n                              type=\"text\"\r\n                              name=\"rev_no\"\r\n                              id=\"rev_no\"\r\n                              placeholder=\"Enter rev_no\"\r\n                              disabled\r\n                              className={\r\n                                \"form-control\" +\r\n                                (formProps.errors.rev_no &&\r\n                                formProps.touched.rev_no\r\n                                  ? \" is-invalid\"\r\n                                  : \"\")\r\n                              }\r\n                            />\r\n\r\n                            <ErrorMessage\r\n                              name=\"rev_no\"\r\n                              component=\"div\"\r\n                              className=\"invalid-feedback\"\r\n                            />\r\n                          </InputGroup>\r\n                        </Col>\r\n                      </Row>\r\n\r\n                      <Row className=\"form-group\">\r\n                        <Col md={6}>\r\n                          <Label for=\"row\">Add Table Rows</Label>\r\n                          <InputGroup>\r\n                            <Field\r\n                              component={CustomInput}\r\n                              type=\"number\"\r\n                              name=\"row\"\r\n                              id=\"row\"\r\n                              placeholder=\"Enter Table rows\"\r\n                              className={\r\n                                \"form-control\" +\r\n                                (formProps.errors.row && formProps.touched.row\r\n                                  ? \" is-invalid\"\r\n                                  : \"\")\r\n                              }\r\n                            />\r\n\r\n                            <ErrorMessage\r\n                              name=\"row\"\r\n                              component=\"div\"\r\n                              className=\"invalid-feedback\"\r\n                            />\r\n                          </InputGroup>\r\n                        </Col>\r\n                      </Row>\r\n\r\n                      <Row>\r\n                        <Col md={12}>\r\n                          <FieldArray\r\n                            name=\"details\"\r\n                            render={(arrayHelpers) => (\r\n                              <div>\r\n                                <Row>\r\n                                  <Col md={10}>\r\n                                    <FormGroup>\r\n                                      <InputGroup>\r\n                                        <InputGroupAddon addonType=\"append\">\r\n                                          <Button\r\n                                            block\r\n                                            className=\"btn-success\"\r\n                                            onClick={() => {\r\n                                              for (\r\n                                                let i = 1;\r\n                                                i <= formProps.values.row;\r\n                                                i++\r\n                                              ) {\r\n                                                arrayHelpers.push({\r\n                                                  form_id:\r\n                                                    formProps.values.form_id,\r\n                                                  customer_name: \"\",\r\n                                                  so_no: \"\",\r\n                                                  grade: \"\",\r\n                                                  colour: \"\",\r\n                                                  width: \"\",\r\n                                                  thickness: \"\",\r\n                                                  length: \"\",\r\n                                                  slitt_size: \"\",\r\n                                                  no_rolls: \"\",\r\n                                                  qty: \"\",\r\n                                                  actual_production: \"\",\r\n                                                  balance: \"\",\r\n                                                  cf: \"\",\r\n                                                  remarks: \"\",\r\n                                                });\r\n                                              }\r\n                                            }}\r\n                                          >\r\n                                            Add Rows\r\n                                          </Button>\r\n                                        </InputGroupAddon>\r\n                                      </InputGroup>\r\n                                    </FormGroup>\r\n                                  </Col>\r\n                                </Row>\r\n                                <div style={{ overflow: \"scroll\" }}>\r\n                                  <Table size=\"sm\" className=\"text-center\">\r\n                                    <thead>\r\n                                      <tr>\r\n                                        <th>Customer Name</th>\r\n                                        <th>SO.NO</th>\r\n                                        <th>Grade</th>\r\n                                        <th>Colour</th>\r\n                                        <th>Width (MM)</th>\r\n                                        <th>Thickness (MM)</th>\r\n                                        <th>Length (Metre)</th>\r\n                                        <th>No. of Rolls</th>\r\n                                        <th>Quantity (kG)</th>\r\n                                        <th>Slitt Size (MM)</th>\r\n                                        <th>Actual Production</th>\r\n                                        <th>Balance</th>\r\n                                        <th>C/F</th>\r\n                                        <th>Remarks</th>\r\n                                      </tr>\r\n                                    </thead>\r\n                                    <tbody className=\"text-center\">\r\n                                      {console.log(\r\n                                        \"values\",\r\n                                        formProps?.values?.details\r\n                                      )}\r\n                                      {formProps?.values?.details?.map(\r\n                                        (detail, index) => {\r\n                                          return (\r\n                                            <tr\r\n                                              key={index}\r\n                                              className=\"text-center\"\r\n                                            >\r\n                                              <td>\r\n                                                <Field\r\n                                                  component={CustomInput}\r\n                                                  type=\"text\"\r\n                                                  name={`details.${index}.customer_name`}\r\n                                                  id=\"customer_name\"\r\n                                                  style={{ width: \"150px\" }}\r\n                                                />\r\n                                              </td>\r\n                                              <td>\r\n                                                <Field\r\n                                                  component={CustomInput}\r\n                                                  type=\"text\"\r\n                                                  name={`details.${index}.so_no`}\r\n                                                  id={`details.${index}.so_no`}\r\n                                                  style={{ width: \"50px\" }}\r\n                                                />\r\n                                              </td>\r\n                                              <td>\r\n                                                <Field\r\n                                                  component={CustomInput}\r\n                                                  type=\"text\"\r\n                                                  name={`details.${index}.grade`}\r\n                                                  id={`details.${index}.grade`}\r\n                                                  style={{ width: \"100px\" }}\r\n                                                />\r\n                                              </td>\r\n                                              <td>\r\n                                                <Field\r\n                                                  component={CustomInput}\r\n                                                  type=\"text\"\r\n                                                  name={`details.${index}.colour`}\r\n                                                  id={`details.${index}.colour`}\r\n                                                  style={{ width: \"100px\" }}\r\n                                                />\r\n                                              </td>\r\n                                              <td>\r\n                                                <Field\r\n                                                  component={CustomInput}\r\n                                                  type=\"text\"\r\n                                                  name={`details.${index}.width`}\r\n                                                  id={`details.${index}.width`}\r\n                                                  style={{ width: \"50px\" }}\r\n                                                />\r\n                                              </td>\r\n                                              <td>\r\n                                                <Field\r\n                                                  component={CustomInput}\r\n                                                  type=\"text\"\r\n                                                  name={`details.${index}.thickness`}\r\n                                                  id={`details.${index}.thickness`}\r\n                                                  style={{ width: \"50px\" }}\r\n                                                />\r\n                                              </td>\r\n                                              <td>\r\n                                                <Field\r\n                                                  component={CustomInput}\r\n                                                  type=\"text\"\r\n                                                  name={`details.${index}.length`}\r\n                                                  id={`details.${index}.length`}\r\n                                                  style={{ width: \"50px\" }}\r\n                                                />\r\n                                              </td>\r\n                                              <td>\r\n                                                <Field\r\n                                                  component={CustomInput}\r\n                                                  type=\"text\"\r\n                                                  name={`details.${index}.slitt_size`}\r\n                                                  id={`details.${index}.slitt_size`}\r\n                                                  style={{ width: \"50px\" }}\r\n                                                />\r\n                                              </td>\r\n                                              <td>\r\n                                                <Field\r\n                                                  component={CustomInput}\r\n                                                  type=\"text\"\r\n                                                  name={`details.${index}.no_rolls`}\r\n                                                  id={`details.${index}.no_rolls`}\r\n                                                  style={{ width: \"100px\" }}\r\n                                                />\r\n                                              </td>\r\n                                              <td>\r\n                                                <Field\r\n                                                  component={CustomInput}\r\n                                                  type=\"number\"\r\n                                                  name={`details.${index}.qty`}\r\n                                                  id={`details.${index}.qty`}\r\n                                                  style={{ width: \"100px\" }}\r\n                                                />\r\n                                              </td>\r\n                                              <td>\r\n                                                <Field\r\n                                                  component={CustomInput}\r\n                                                  type=\"text\"\r\n                                                  name={`details.${index}.actual_production`}\r\n                                                  id={`details.${index}.actual_production`}\r\n                                                  style={{ width: \"150px\" }}\r\n                                                />\r\n                                              </td>\r\n                                              <td>\r\n                                                <Field\r\n                                                  component={CustomInput}\r\n                                                  type=\"text\"\r\n                                                  name={`details.${index}.balance`}\r\n                                                  id={`details.${index}.balance`}\r\n                                                  style={{ width: \"150px\" }}\r\n                                                />\r\n                                              </td>\r\n                                              <td>\r\n                                                <Field\r\n                                                  component={CustomInput}\r\n                                                  type=\"text\"\r\n                                                  name={`details.${index}.cf`}\r\n                                                  id={`details.${index}.cf`}\r\n                                                  style={{ width: \"150px\" }}\r\n                                                />\r\n                                              </td>\r\n                                              <td>\r\n                                                <Field\r\n                                                  component={CustomInput}\r\n                                                  type=\"text\"\r\n                                                  name={`details.${index}.remarks`}\r\n                                                  id={`details.${index}.remarks`}\r\n                                                  style={{ width: \"150px\" }}\r\n                                                />\r\n                                              </td>\r\n                                            </tr>\r\n                                          );\r\n                                        }\r\n                                      )}\r\n                                    </tbody>\r\n                                  </Table>\r\n                                </div>\r\n                              </div>\r\n                            )}\r\n                          />\r\n                        </Col>\r\n                      </Row>\r\n                      <br />\r\n                      <Row style={{ justifyContent: \"center\" }}>\r\n                        <Col md={4}>\r\n                          <Button type=\"reset\" className=\"btn-danger\" block>\r\n                            <b>Reset</b>\r\n                          </Button>\r\n                        </Col>\r\n                        <Col md={4}>\r\n                          <Button\r\n                            type=\"submit\"\r\n                            disabled={formProps.isSubmitting}\r\n                            color=\"primary\"\r\n                            block\r\n                          >\r\n                            Submit\r\n                          </Button>\r\n                        </Col>\r\n                      </Row>\r\n                    </Form>\r\n                  ) : (\r\n                    <>\r\n                      <div\r\n                        id=\"htmlToPdf2\"\r\n                        className=\"d-flex flex-column flex-wrap f-10 w-100\"\r\n                      >\r\n                        <div className=\"d-flex test\">\r\n                          <div className=\"w-25 test-r p-1 text-center\">\r\n                            <img\r\n                              src=\"https://uditsolutions.in/vinraj.png\"\r\n                              alt=\"\"\r\n                            />\r\n                          </div>\r\n                          <div className=\"w-50 test-r d-flex justify-content-center align-items-center\">\r\n                            <h5 className=\"font-weight-bold text-underline\">\r\n                              DAILY PRODUCTION PLANNING SHEET.\r\n                            </h5>\r\n                          </div>\r\n                          <div className=\"w-25 f-12 p-0 text-center d-flex flex-column justify-content-between\">\r\n                            <div className=\"d-flex\">\r\n                              <th className=\"w-40\">Di.No: </th>\r\n                              <td className=\"w-60\">\r\n                                {formProps.values?.di_no}\r\n                              </td>\r\n                            </div>\r\n                            <div className=\"d-flex\">\r\n                              <th className=\"w-40\">Rev. No.: </th>\r\n                              <td className=\"w-60\">\r\n                                {formProps.values?.rev_no}\r\n                              </td>\r\n                            </div>\r\n                            <div className=\"d-flex\">\r\n                              <th className=\"w-50\">Rev. Date: </th>\r\n                              <td className=\"w-60\">\r\n                                {formProps.values?.rev_date}\r\n                              </td>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n\r\n                        <div className=\"test w-100\">\r\n                          <div className=\"d-flex mb-1 w-100\">\r\n                            <div className=\"ml-3 w-50\">\r\n                              <span className=\"\">Date: </span>\r\n                              <span>{props.details?.postDetails?.date}</span>\r\n                            </div>\r\n                            <div className=\"ml-3 w-50\">\r\n                              <span className=\"\">Ref No: </span>\r\n                              <span>{props.details?.postDetails?.ref_no}</span>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"w-100\">\r\n                          <table className=\"table-sm w-100\">\r\n                            <thead className=\"w-50\">\r\n                              <tr className=\"w-100\">\r\n                                <th className=\"test\">Sr No.</th>\r\n                                <th className=\"test\">Customer Name</th>\r\n                                <th className=\"test\">SO NO</th>\r\n                                <th className=\"test\">GRADE</th>\r\n                                <th className=\"test\">COLOUR</th>\r\n                                <th className=\"test\">WIDTH (MM)</th>\r\n                                <th className=\"test\">THICKNESS (MM)</th>\r\n                                <th className=\"test\">LENGTH (METRE)</th>\r\n                                <th className=\"test\">NO. OF ROLLS</th>\r\n\r\n                                <th className=\"test\">QUANTITY (KG)</th>\r\n                                <th className=\"test\">SLITT SIZE (MM)</th>\r\n                                <th className=\"test\">ACTUAL PRODUCTION</th>\r\n                                <th className=\"test\">BALANCE</th>\r\n                                <th className=\"test\">C/F</th>\r\n                                <th className=\"test\">REMARKS</th>\r\n                              </tr>\r\n                            </thead>\r\n                            <tbody className=\"w-50\">\r\n                              {formProps.values?.details?.map((de, index) => {\r\n                                return (\r\n                                  <tr key={index} className=\"w-100\">\r\n                                    <td className=\"test\">{index + 1}</td>\r\n\r\n                                    <td className=\"test\">{de.customer_name}</td>\r\n                                    <td className=\"test\">{de.so_no}</td>\r\n                                    <td className=\"test\"> {de.grade}</td>\r\n                                    <td className=\"test\">{de.colour} </td>\r\n\r\n                                    <td className=\"test\">{de.width}</td>\r\n                                    <td className=\"test\">{de.thickness}</td>\r\n                                    <td className=\"test\">{de.length}</td>\r\n                                    <td className=\"test\">{de.no_rolls}</td>\r\n                                    <td className=\"test\">{de.qty}</td>\r\n                                    <td className=\"test\">{de.slitt_size}</td>\r\n                                    <td className=\"test\">\r\n                                      {de.actual_production}\r\n                                    </td>\r\n                                    <td className=\"test\">{de.balance}</td>\r\n                                    <td className=\"test\">{de.cf}</td>\r\n\r\n                                    <td className=\"test\">{de.remarks}</td>\r\n                                  </tr>\r\n                                );\r\n                              })}\r\n                            </tbody>\r\n                          </table>\r\n                        </div>\r\n                      </div>\r\n                      {(printStatus ||\r\n                        props.login?.login?.user?.role == \"admin\") && (\r\n                        <div className=\"modal-footer\">\r\n                          <button\r\n                            type=\"button\"\r\n                            className=\"btn btn-secondary\"\r\n                            data-dismiss=\"modal\"\r\n                            onClick={() => setModal(false)}\r\n                          >\r\n                            Cancel\r\n                          </button>\r\n                          <button\r\n                            type=\"button\"\r\n                            className=\"btn btn-primary\"\r\n                            onClick={printMutliple}\r\n                          >\r\n                            Print\r\n                          </button>\r\n                        </div>\r\n                      )}\r\n                    </>\r\n                  );\r\n                }}\r\n              </Formik>\r\n            </ModalBody>\r\n          </Modal>\r\n        </CardHeader>\r\n        <CardBody style={{ overflow: \"scroll\" }}>\r\n          <table\r\n            className=\"table table-sm text-center\"\r\n            style={{ fontSize: \"12px\" }}\r\n          >\r\n            <thead className=\"table-sticky\">\r\n              <tr>\r\n                {/* <th>ID</th> */}\r\n\r\n                <th scope=\"col\">Title</th>\r\n                <th scope=\"col\">Rev no</th>\r\n                <th scope=\"col\">Rev Date</th>\r\n                <th scope=\"col\">Date</th>\r\n                <th scope=\"col\">Ref no</th>\r\n                <th scope=\"col\">Customer Name</th>\r\n                <th scope=\"col\">Contact No</th>\r\n                <th scope=\"col\">Email</th>\r\n                <th scope=\"col\">View</th>\r\n\r\n                {/* <th scope=\"col\">Actions</th> */}\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {props.form?.isLoading ? (\r\n                <tr>\r\n                  <td colSpan={18}>\r\n                    <Loader2 color={\"primary\"} />\r\n                  </td>\r\n                </tr>\r\n              ) : props.form?.form?.length > 0 ? (\r\n                props.form?.form\r\n                  .filter((user) => user.id == 19)\r\n                  .map((user, index) => {\r\n                    return user.form_headers.map((form) => {\r\n                      return (\r\n                        <tr key={index}>\r\n                          <td>{form.title}</td>\r\n                          <td>{form.rev_no}</td>\r\n                          <td>{form.rev_date}</td>\r\n                          <td>{form.date}</td>\r\n                          <td>{form.ref_no}</td>\r\n                          <td>{form.customer_name}</td>\r\n                          <td>{form.contact_name}</td>\r\n                          <td>{form.contact_no}</td>\r\n                          <td>\r\n                            {/* <ViewSales\r\n                              data={form}\r\n                              formdata={user}\r\n                              printStatus={printStatus}\r\n                            />{\" \"} */}\r\n                          </td>\r\n                          {/* <td className=\"d-flex justify-content-center\">\r\n                            {updateStatus ||\r\n                              (props.login?.login?.user?.role == \"admin\" && (\r\n                                <EditPurchaseRequisition\r\n                                  data={form}\r\n                                  formdata={user}\r\n                                />\r\n                              ))}\r\n                            {(deleteStatus ||\r\n                              props.login?.login?.user?.role == \"admin\") && (\r\n                              <Button\r\n                                className=\"btn-danger ml-3 p-1\"\r\n                                onClick={() => {\r\n                                  if (\r\n                                    window.confirm(\r\n                                      \"Are you sure you wish to delete this Purchase Requisition?\"\r\n                                    )\r\n                                  )\r\n                                    props.deleteDetails(data);\r\n                                }}\r\n                              >\r\n                                <i\r\n                                  className=\"fa fa-trash-alt \"\r\n                                  value={user.id}\r\n                                  aria-hidden=\"true\"\r\n                                ></i>\r\n                              </Button>\r\n                            )}\r\n                          </td>\r\n                         */}\r\n                        </tr>\r\n                      );\r\n                    });\r\n                  })\r\n              ) : (\r\n                <tr>\r\n                  <td colSpan={3}>No Forms Data</td>\r\n                </tr>\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </CardBody>\r\n      </Card>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    login: state.login,\r\n    prefix: state.prefix.prefix,\r\n    department: state.department.department,\r\n    form: state.form.form,\r\n    details: state.details,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onDepartmentGetData: (data) => dispatch(actions.departmentGetData(data)),\r\n    onFormGetData: (data) => dispatch(actions.formGetData(data)),\r\n    onPrefixGetData: (data) => dispatch(actions.prefixGetData(data)),\r\n    onDeletePrefix: (data, id) => dispatch(actions.deletePrefix(data, id)),\r\n    onPostPrefixData: (data, user, toggle) =>\r\n      dispatch(actions.postPrefixData(data, user, toggle)),\r\n    updatePrefixDataToggle: (data, user, toggle) =>\r\n      dispatch(actions.updatePrefixDataToggle(data, user, toggle)),\r\n    postEnquiriesData: (data, user, toggle, setSubmitting, setShowTable) =>\r\n      dispatch(\r\n        actions.postEnquiriesData(\r\n          data,\r\n          user,\r\n          toggle,\r\n          setSubmitting,\r\n          setShowTable\r\n        )\r\n      ),\r\n    updateDetailsData: (data, user, toggle, setSubmitting) =>\r\n      dispatch(actions.updateDetailsData(data, user, toggle, setSubmitting)),\r\n  };\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ProductionPlanningCf);\r\n","E:\\git vinraj\\NewVinraj\\src\\Components\\Production\\ProductionReportCf.js",[],"E:\\git vinraj\\NewVinraj\\src\\Components\\Production\\StockReportCf.js",[],"E:\\git vinraj\\NewVinraj\\src\\Components\\Production\\ProcessParametersCf.js",["499","500"],"E:\\git vinraj\\NewVinraj\\src\\Components\\Production\\ProductionPlanningVf.js",[],"E:\\git vinraj\\NewVinraj\\src\\Components\\Production\\ProductionReportVf.js",[],"E:\\git vinraj\\NewVinraj\\src\\Components\\Production\\StockReportVf.js",[],"E:\\git vinraj\\NewVinraj\\src\\Components\\Purchase\\AuthorizedSupplierList.js",[],"E:\\git vinraj\\NewVinraj\\src\\Components\\Purchase\\PurchaseRequition.js",[],"E:\\git vinraj\\NewVinraj\\src\\Components\\Purchase\\SuppilierPerformanceMonitiringRecord.js",[],"E:\\git vinraj\\NewVinraj\\src\\Components\\Sales\\EnquiryForm.js",["501","502"],"E:\\git vinraj\\NewVinraj\\src\\Components\\Sales\\CustomerRegistrationForm.js",[],"E:\\git vinraj\\NewVinraj\\src\\Components\\Sales\\Quotation.js",[],"E:\\git vinraj\\NewVinraj\\src\\Components\\Sales\\SalesTargetPlanVsActual.js",[],"E:\\git vinraj\\NewVinraj\\src\\Components\\Sales\\CustomerFeedback.js",[],"E:\\git vinraj\\NewVinraj\\src\\Components\\Sales\\FeasibilityReport.js",[],"E:\\git vinraj\\NewVinraj\\src\\Components\\Stores\\PurchaseRequisition.js",[],"E:\\git vinraj\\NewVinraj\\src\\Components\\Stores\\IncomingMaterialInspectionChecklist.js",[],"E:\\git vinraj\\NewVinraj\\src\\Components\\Stores\\StockRegister.js",[],"E:\\git vinraj\\NewVinraj\\src\\Components\\Stores\\ListOfShelfLifeOfItems.js",["503"],"E:\\git vinraj\\NewVinraj\\src\\Components\\Stores\\RecordOfDisposalOfShelfOfItems.js",[],"E:\\git vinraj\\NewVinraj\\src\\Components\\QMS\\IncomingMaterialTestingRecord.js",[],"E:\\git vinraj\\NewVinraj\\src\\Components\\QMS\\Capa.js",[],"E:\\git vinraj\\NewVinraj\\src\\Components\\QMS\\CustomerComplaintReport.js",[],"E:\\git vinraj\\NewVinraj\\src\\Components\\QMS\\ProductionMa.js",[],"E:\\git vinraj\\NewVinraj\\src\\Components\\QMS\\CustomerComplaintRecord.js",[],"E:\\git vinraj\\NewVinraj\\src\\Components\\Master\\AccountMaster\\AccountGroup\\AccountGroup.js",["504","505","506","507"],"import React, { useEffect, useState } from \"react\";\r\nimport { Fragment } from \"react\";\r\nimport Sidebar from \"../../../Home/Sidebar\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport * as actions from \"../../../../reduxStore/actions/index\";\r\nimport { connect } from \"react-redux\";\r\nimport Breadcrumbs from \"@material-ui/core/Breadcrumbs\";\r\n\r\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\";\r\nimport Link from \"@material-ui/core/Link\";\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`simple-tabpanel-${index}`}\r\n      aria-labelledby={`simple-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `simple-tab-${index}`,\r\n    \"aria-controls\": `simple-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n}));\r\n\r\nfunction AccountGroup(props) {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  let data = {\r\n    token: props.login?.login?.token,\r\n  };\r\n\r\n  //  console.log(\"data\", data);\r\n  //  console.log(\"login\", props.login?.login);\r\n\r\n  useEffect(() => {\r\n    console.log(\"currentUser data from redux \", currentUser);\r\n\r\n    props.onAccountGroupGetData(data);\r\n    props.onAccountGroupGetData(data);\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const [user, setUser] = useState({\r\n    name: \"\",\r\n    under_group_name: \"\",\r\n  });\r\n\r\n  const [editing, setEditing] = useState(false);\r\n\r\n  const initialFormState = {\r\n    id: \"\",\r\n    name: \"\",\r\n    under_group_name: \"\",\r\n  };\r\n\r\n  const [currentUser, setCurrentUser] = useState(initialFormState);\r\n\r\n  const currentUserInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setCurrentUser({ ...currentUser, [name]: value });\r\n  };\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUser({ ...user, [name]: value });\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      {/* <div className=\"wrapper\"> */}\r\n      {/* <nav className=\"main-header navbar navbar-expand navbar-white navbar-light\">\r\n         \r\n          <ul className=\"navbar-nav d-flex align-items-center\">\r\n            <li className=\"nav-item\">\r\n              <a\r\n                className=\"nav-link\"\r\n                data-widget=\"pushmenu\"\r\n                href=\"n\"\r\n                role=\"button\"\r\n              >\r\n                <i className=\"fas fa-bars\" />\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item d-none d-sm-inline-block ml-2\">\r\n              <Breadcrumbs\r\n                separator={<NavigateNextIcon fontSize=\"small\" />}\r\n                aria-label=\"breadcrumb\"\r\n              >\r\n                <Link color=\"inherit\" href=\"/\">\r\n                  Home\r\n                </Link>\r\n                <Link color=\"inherit\">Master</Link>\r\n                <Link color=\"inherit\">Account Master</Link>\r\n                <Typography color=\"textPrimary\">\r\n                  Account Group Master\r\n                </Typography>\r\n              </Breadcrumbs>\r\n            </li>\r\n          </ul>\r\n          \r\n        </nav> */}\r\n\r\n      {/* <Sidebar /> */}\r\n      {/* <div class=\"content-wrapper\">\r\n          <section className=\"content\">\r\n            <div className=\"container-fluid\"> */}\r\n      <div className={classes.root}>\r\n        <AppBar position=\"static\">\r\n          <Tabs\r\n            value={value}\r\n            onChange={handleChange}\r\n            aria-label=\"simple tabs example\"\r\n          >\r\n            <Tab label=\"Account Group\" {...a11yProps(0)} />\r\n          </Tabs>\r\n        </AppBar>\r\n        <TabPanel value={value} index={0}>\r\n          <div className=\"container\">\r\n            <div className=\"flex-row\">\r\n              <div className=\"flex-large\">\r\n                <form\r\n                  onSubmit={(event) => {\r\n                    event.preventDefault();\r\n                    props.onPostAccountGroupData(data, user);\r\n                  }}\r\n                >\r\n                  <div className=\"form-row\" style={{ fontSize: \"12px\" }}>\r\n                    <div className=\"form-group col-md-3\">\r\n                      <label htmlFor=\"inputPassword4\"> Account Group </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"inputPassword4\"\r\n                        placeholder=\"\"\r\n                        value={!editing ? user.name : currentUser.name}\r\n                        name=\"name\"\r\n                        onChange={\r\n                          editing ? currentUserInputChange : handleInputChange\r\n                        }\r\n                      />\r\n                    </div>\r\n                    <div className=\"form-group col-md-3\">\r\n                      <label htmlFor=\"inputPassword4\">\r\n                        Under Account Group\r\n                      </label>\r\n                      <select\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"inputPassword4\"\r\n                        name=\"under_group_name\"\r\n                        value={\r\n                          editing\r\n                            ? currentUser.under_group_name\r\n                            : user.under_group_name\r\n                        }\r\n                        onChange={\r\n                          editing ? currentUserInputChange : handleInputChange\r\n                        }\r\n                      >\r\n                        <option>select</option> &&\r\n                        {!editing\r\n                          ? props.accountGroup?.map((accgrp) => (\r\n                              <option key={accgrp.id} value={accgrp.name}>\r\n                                {accgrp.name}\r\n                              </option>\r\n                            ))\r\n                          : currentUser\r\n                          ? // <option>{currentUser}</option>\r\n                            //  &&\r\n                            props.accountGroup?.map((accgrp) => (\r\n                              <option key={accgrp.id} value={accgrp.name}>\r\n                                {accgrp.name}\r\n                              </option>\r\n                            ))\r\n                          : null}\r\n                      </select>\r\n                    </div>\r\n\r\n                    <div className=\"form-group col-md-3 mt-4\">\r\n                      {!editing ? (\r\n                        <button className=\"btn btn-primary \" type=\"submit\">\r\n                          Add\r\n                        </button>\r\n                      ) : (\r\n                        <div className=\"d-flex\">\r\n                          <button\r\n                            className=\"btn btn-success\"\r\n                            type=\"button\"\r\n                            onClick={() =>\r\n                              props.onUpdateAccountGroupData(\r\n                                data,\r\n                                currentUser.id,\r\n                                editing,\r\n                                setEditing,\r\n                                currentUser,\r\n                                setCurrentUser\r\n                              )\r\n                            }\r\n                          >\r\n                            Update\r\n                          </button>\r\n                          <button\r\n                            className=\"btn btn-primary ml-3\"\r\n                            type=\"button\"\r\n                            onClick={() => setEditing(false)}\r\n                          >\r\n                            Cancel\r\n                          </button>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n              <div className=\"flex-large\">\r\n                <table className=\"table table-sm\" style={{ fontSize: \"12px\" }}>\r\n                  <thead>\r\n                    <tr>\r\n                      {/* <th>ID</th> */}\r\n                      <th scope=\"col\">Account Group</th>\r\n                      <th scope=\"col\">Under Account Group</th>\r\n\r\n                      <th scope=\"col\">Actions</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {props.accountGroup.length > 0 ? (\r\n                      props.accountGroup.map((user) => (\r\n                        <tr key={user.id}>\r\n                          {/* <td>{user.id}</td> */}\r\n                          <td>{user.name}</td>\r\n                          <td>{user.under_group_name}</td>\r\n\r\n                          <td className=\"d-flex\">\r\n                            <button\r\n                              onClick={() =>\r\n                                props.onEditAccountGroupRow(\r\n                                  data,\r\n                                  user.id,\r\n                                  editing,\r\n                                  setEditing,\r\n                                  currentUser,\r\n                                  setCurrentUser\r\n                                )\r\n                              }\r\n                            >\r\n                              <i className=\"fa fa-edit\" aria-hidden=\"true\"></i>\r\n                            </button>\r\n\r\n                            <button\r\n                              className=\"ml-3\"\r\n                              onClick={() => {\r\n                                if (\r\n                                  window.confirm(\r\n                                    \"Are you sure you wish to delete this Account Group?\"\r\n                                  )\r\n                                )\r\n                                  props.onDeleteAccountGroup(user.id, data);\r\n                              }}\r\n                            >\r\n                              <i\r\n                                className=\"fa fa-trash-alt \"\r\n                                value={user.id}\r\n                                aria-hidden=\"true\"\r\n                              ></i>\r\n                            </button>\r\n                          </td>\r\n                        </tr>\r\n                      ))\r\n                    ) : (\r\n                      <tr>\r\n                        <td colSpan={3}>No users</td>\r\n                      </tr>\r\n                    )}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </TabPanel>\r\n      </div>\r\n      {/* </div>\r\n          </section>\r\n        </div> */}\r\n      {/* </div> */}\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    accountGroup: state.accountGroup.accountGroup,\r\n    form: state.form.form,\r\n    login: state.login,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onAccountGroupGetData: (data) =>\r\n      dispatch(actions.accountGroupGetData(data)),\r\n    onDeleteAccountGroup: (id, data) =>\r\n      dispatch(actions.deleteAccountGroup(id, data)),\r\n    onPostAccountGroupData: (data, user) =>\r\n      dispatch(actions.postAccountGroupData(data, user)),\r\n    onUpdateAccountGroupData: (\r\n      data,\r\n      id,\r\n      editing,\r\n      setEditing,\r\n      currentUser,\r\n      setCurrentUser\r\n    ) =>\r\n      dispatch(\r\n        actions.updateAccountGroupData(\r\n          data,\r\n          id,\r\n          editing,\r\n          setEditing,\r\n          currentUser,\r\n          setCurrentUser\r\n        )\r\n      ),\r\n    onEditAccountGroupRow: (\r\n      data,\r\n      id,\r\n      editing,\r\n      setEditing,\r\n      currentUser,\r\n      setCurrentUser\r\n    ) =>\r\n      dispatch(\r\n        actions.editAccountGroupRow(\r\n          data,\r\n          id,\r\n          editing,\r\n          setEditing,\r\n          currentUser,\r\n          setCurrentUser\r\n        )\r\n      ),\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AccountGroup);\r\n","E:\\git vinraj\\NewVinraj\\src\\Components\\Master\\ItemMaster\\ItemName\\ItemName.js",["508","509","510","511"],"import React, { useEffect, useState } from \"react\";\r\nimport { Fragment } from \"react\";\r\nimport Sidebar from \"../../../Home/Sidebar\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport * as actions from \"../../../../reduxStore/actions/index\";\r\nimport { connect } from \"react-redux\";\r\nimport Breadcrumbs from \"@material-ui/core/Breadcrumbs\";\r\n\r\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\";\r\nimport Link from \"@material-ui/core/Link\";\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`simple-tabpanel-${index}`}\r\n      aria-labelledby={`simple-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `simple-tab-${index}`,\r\n    \"aria-controls\": `simple-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n}));\r\n\r\nfunction ItemName(props) {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  let data = {\r\n    token: props.login?.login?.token,\r\n  };\r\n\r\n  //  console.log(\"data\", data);\r\n  //  console.log(\"login\", props.login?.login);\r\n  useEffect(() => {\r\n    //console.log(\"currentUser data from redux \", currentUser);\r\n\r\n    props.onItemUnitsGetData(data);\r\n    props.onItemGroupGetData(data);\r\n    props.onItemNameGetData(data);\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const [user, setUser] = useState({\r\n    name: \"\",\r\n    item_group_id: \"\",\r\n    unit_id: \"\",\r\n  });\r\n\r\n  const [editing, setEditing] = useState(false);\r\n\r\n  const initialFormState = {\r\n    id: \"\",\r\n    name: \"\",\r\n    item_group_id: \"\",\r\n    group_name: \"\",\r\n    unit_id: \"\",\r\n    unit_name: \"\",\r\n  };\r\n\r\n  const [currentUser, setCurrentUser] = useState(initialFormState);\r\n\r\n  const currentUserInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setCurrentUser({ ...currentUser, [name]: value });\r\n  };\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUser({ ...user, [name]: value });\r\n  };\r\n\r\n  // console.log(\"currentUser data from redux \", currentUser.group_name);\r\n  console.log(\"User data from redux \", currentUser);\r\n\r\n  return (\r\n    <Fragment>\r\n      {/* <div className=\"wrapper\">\r\n     <nav className=\"main-header navbar navbar-expand navbar-white navbar-light\">\r\n         \r\n          <ul className=\"navbar-nav d-flex align-items-center\">\r\n            <li className=\"nav-item\">\r\n              <a\r\n                className=\"nav-link\"\r\n                data-widget=\"pushmenu\"\r\n                href=\"n\"\r\n                role=\"button\"\r\n              >\r\n                <i className=\"fas fa-bars\" />\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item d-none d-sm-inline-block ml-2\">\r\n              <Breadcrumbs\r\n                separator={<NavigateNextIcon fontSize=\"small\" />}\r\n                aria-label=\"breadcrumb\"\r\n              >\r\n                <Link color=\"inherit\" href=\"/\">\r\n                  Home\r\n                </Link>\r\n                <Link color=\"inherit\">Master</Link>\r\n                <Link color=\"inherit\">Item Master</Link>\r\n                <Typography color=\"textPrimary\">Item Name Master</Typography>\r\n              </Breadcrumbs>\r\n            </li>\r\n          </ul>\r\n          \r\n        </nav>\r\n    \r\n\r\n        <Sidebar />\r\n        <div class=\"content-wrapper\">\r\n          <section className=\"content\">\r\n            <div className=\"container-fluid\"> */}\r\n      <div className={classes.root}>\r\n        <AppBar position=\"static\">\r\n          <Tabs\r\n            value={value}\r\n            onChange={handleChange}\r\n            aria-label=\"simple tabs example\"\r\n          >\r\n            <Tab label=\"Item\" {...a11yProps(0)} />\r\n          </Tabs>\r\n        </AppBar>\r\n        <TabPanel value={value} index={0}>\r\n          <div className=\"container\">\r\n            <div className=\"flex-row\">\r\n              <div className=\"flex-large\">\r\n                <form\r\n                  onSubmit={(event) => {\r\n                    event.preventDefault();\r\n                    props.onPostItemNameData(data, user);\r\n                  }}\r\n                >\r\n                  <div className=\"form-row\" style={{ fontSize: \"12px\" }}>\r\n                    <div className=\"form-group col-md-3\">\r\n                      <label htmlFor=\"inputPassword4\"> Item Name </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"inputPassword4\"\r\n                        placeholder=\"\"\r\n                        value={!editing ? user.name : currentUser.name}\r\n                        name=\"name\"\r\n                        onChange={\r\n                          editing ? currentUserInputChange : handleInputChange\r\n                        }\r\n                      />\r\n                    </div>\r\n                    <div className=\"form-group col-md-3\">\r\n                      <label htmlFor=\"inputPassword4\">Under Item Group</label>\r\n                      <select\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"inputPassword4\"\r\n                        name=\"item_group_id\"\r\n                        value={\r\n                          editing\r\n                            ? currentUser.item_group_id\r\n                            : user.item_group_id\r\n                        }\r\n                        onChange={\r\n                          editing ? currentUserInputChange : handleInputChange\r\n                        }\r\n                      >\r\n                        <option>select</option> &&\r\n                        {props.itemGroup?.map((accgrp) => (\r\n                          <option key={accgrp.id} value={accgrp.id}>\r\n                            {accgrp.name}\r\n                          </option>\r\n                        ))}\r\n                        {/* {!editing\r\n                                  ? props.itemGroup?.map((accgrp) => (\r\n                                      <option key={accgrp.id} value={accgrp.id}>\r\n                                        {accgrp.name}\r\n                                      </option>\r\n                                    ))\r\n                                  : currentUser\r\n                                  ? props.itemGroup?.map((accgrp) => (\r\n                                      <option key={accgrp.id} value={accgrp.id}>\r\n                                        {accgrp.name}\r\n                                      </option>\r\n                                    ))\r\n                                  : null} */}\r\n                      </select>\r\n                    </div>\r\n                    <div className=\"form-group col-md-3\">\r\n                      <label htmlFor=\"inputPassword4\">Units</label>\r\n                      <select\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"inputPassword4\"\r\n                        name=\"unit_id\"\r\n                        value={editing ? currentUser.unit_id : user.unit_id}\r\n                        onChange={\r\n                          editing ? currentUserInputChange : handleInputChange\r\n                        }\r\n                      >\r\n                        {\" \"}\r\n                        <option>select</option>\r\n                        {props.itemUnits?.map((units) => (\r\n                          <option key={units.id} value={units.id}>\r\n                            {units.unit_name}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                    </div>\r\n\r\n                    <div className=\"form-group col-md-3 mt-4\">\r\n                      {!editing ? (\r\n                        <button className=\"btn btn-primary \" type=\"submit\">\r\n                          Add\r\n                        </button>\r\n                      ) : (\r\n                        <div className=\"d-flex\">\r\n                          <button\r\n                            className=\"btn btn-success\"\r\n                            type=\"button\"\r\n                            onClick={() =>\r\n                              props.onUpdateItemNameData(\r\n                                data,\r\n                                currentUser.id,\r\n                                editing,\r\n                                setEditing,\r\n                                currentUser,\r\n                                setCurrentUser\r\n                              )\r\n                            }\r\n                          >\r\n                            Update\r\n                          </button>\r\n                          <button\r\n                            className=\"btn btn-primary ml-3\"\r\n                            type=\"button\"\r\n                            onClick={() => setEditing(false)}\r\n                          >\r\n                            Cancel\r\n                          </button>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n              <div className=\"flex-large\">\r\n                <table className=\"table\" style={{ fontSize: \"12px\" }}>\r\n                  <thead>\r\n                    <tr>\r\n                      {/* <th>ID</th> */}\r\n                      <th scope=\"col\">Item Name</th>\r\n                      <th scope=\"col\">Under Item Group</th>\r\n                      <th scope=\"col\">Units</th>\r\n\r\n                      <th scope=\"col\">Actions</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {props.itemName.length > 0 ? (\r\n                      props.itemName.map((user) => (\r\n                        <tr key={user.id}>\r\n                          {/* <td>{user.id}</td> */}\r\n                          <td>{user.name}</td>\r\n                          <td>\r\n                            {user.item_group ? user.item_group.name : null}\r\n                          </td>\r\n                          <td>{user.unit ? user.unit.unit_name : null}</td>\r\n\r\n                          <td className=\"d-flex\">\r\n                            <button\r\n                              onClick={() =>\r\n                                props.onEditItemNameRow(\r\n                                  data,\r\n                                  user.id,\r\n                                  editing,\r\n                                  setEditing,\r\n                                  currentUser,\r\n                                  setCurrentUser\r\n                                )\r\n                              }\r\n                            >\r\n                              <i className=\"fa fa-edit\" aria-hidden=\"true\"></i>\r\n                            </button>\r\n\r\n                            <button\r\n                              className=\"ml-3\"\r\n                              onClick={() => {\r\n                                if (\r\n                                  window.confirm(\r\n                                    \"Are you sure you wish to delete this Item Name?\"\r\n                                  )\r\n                                )\r\n                                  props.onDeleteItemName(user.id, data);\r\n                              }}\r\n                            >\r\n                              <i\r\n                                className=\"fa fa-trash-alt \"\r\n                                value={user.id}\r\n                                aria-hidden=\"true\"\r\n                              ></i>\r\n                            </button>\r\n                          </td>\r\n                        </tr>\r\n                      ))\r\n                    ) : (\r\n                      <tr>\r\n                        <td colSpan={3}>No users</td>\r\n                      </tr>\r\n                    )}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </TabPanel>\r\n      </div>\r\n      {/* </div>\r\n          </section>\r\n        </div>\r\n      </div> */}\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    itemUnits: state.itemUnits.itemUnits,\r\n    itemGroup: state.itemGroup.itemGroup,\r\n    itemName: state.itemName.itemName,\r\n    form: state.form.form,\r\n    login: state.login,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onItemUnitsGetData: (data) => dispatch(actions.itemUnitsGetData(data)),\r\n    onItemGroupGetData: (data) => dispatch(actions.itemGroupGetData(data)),\r\n    onItemNameGetData: (data) => dispatch(actions.itemNameGetData(data)),\r\n    onDeleteItemName: (id, data) => dispatch(actions.deleteItemName(id, data)),\r\n    onPostItemNameData: (data, user) =>\r\n      dispatch(actions.postItemNameData(data, user)),\r\n    onUpdateItemNameData: (\r\n      data,\r\n      id,\r\n      editing,\r\n      setEditing,\r\n      currentUser,\r\n      setCurrentUser\r\n    ) =>\r\n      dispatch(\r\n        actions.updateItemNameData(\r\n          data,\r\n          id,\r\n          editing,\r\n          setEditing,\r\n          currentUser,\r\n          setCurrentUser\r\n        )\r\n      ),\r\n    onEditItemNameRow: (\r\n      data,\r\n      id,\r\n      editing,\r\n      setEditing,\r\n      currentUser,\r\n      setCurrentUser\r\n    ) =>\r\n      dispatch(\r\n        actions.editItemNameRow(\r\n          data,\r\n          id,\r\n          editing,\r\n          setEditing,\r\n          currentUser,\r\n          setCurrentUser\r\n        )\r\n      ),\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ItemName);\r\n","E:\\git vinraj\\NewVinraj\\src\\Components\\Master\\AccountMaster\\AccountName\\AccountName.js",["512","513","514","515"],"import React, { useEffect, useState } from \"react\";\r\nimport { Fragment } from \"react\";\r\nimport Sidebar from \"../../../Home/Sidebar\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport * as actions from \"../../../../reduxStore/actions/index\";\r\nimport { connect } from \"react-redux\";\r\nimport Breadcrumbs from \"@material-ui/core/Breadcrumbs\";\r\n\r\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\";\r\nimport Link from \"@material-ui/core/Link\";\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`simple-tabpanel-${index}`}\r\n      aria-labelledby={`simple-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `simple-tab-${index}`,\r\n    \"aria-controls\": `simple-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n}));\r\n\r\nfunction AccountName(props) {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  let data = {\r\n    token: props.login?.login?.token,\r\n  };\r\n\r\n  //  console.log(\"data\", data);\r\n  //  console.log(\"login\", props.login?.login);\r\n  useEffect(() => {\r\n    console.log(\"currentUser data from redux \", currentUser);\r\n\r\n    props.onAccountGroupGetData(data);\r\n    props.onAccountNameGetData(data);\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const [user, setUser] = useState({\r\n    name: \"\",\r\n    account_group_id: \"\",\r\n  });\r\n\r\n  const [editing, setEditing] = useState(false);\r\n\r\n  const initialFormState = {\r\n    id: \"\",\r\n    name: \"\",\r\n    account_group_id: \"\",\r\n    group_name: \"\",\r\n  };\r\n\r\n  const [currentUser, setCurrentUser] = useState(initialFormState);\r\n\r\n  const currentUserInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setCurrentUser({ ...currentUser, [name]: value });\r\n  };\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUser({ ...user, [name]: value });\r\n  };\r\n\r\n  // console.log(\"currentUser data from redux \", currentUser.group_name);\r\n  console.log(\"User data from redux \", currentUser);\r\n\r\n  return (\r\n    <Fragment>\r\n      {/* <div className=\"wrapper\"> */}\r\n      {/* Navbar */}\r\n      {/* <nav className=\"main-header navbar navbar-expand navbar-white navbar-light\">\r\n       \r\n          <ul className=\"navbar-nav d-flex align-items-center\">\r\n            <li className=\"nav-item\">\r\n              <a\r\n                className=\"nav-link\"\r\n                data-widget=\"pushmenu\"\r\n                href=\"n\"\r\n                role=\"button\"\r\n              >\r\n                <i className=\"fas fa-bars\" />\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item d-none d-sm-inline-block ml-2\">\r\n              <Breadcrumbs\r\n                separator={<NavigateNextIcon fontSize=\"small\" />}\r\n                aria-label=\"breadcrumb\"\r\n              >\r\n                <Link color=\"inherit\" href=\"/\">\r\n                  Home\r\n                </Link>\r\n                <Link color=\"inherit\">Master</Link>\r\n                <Link color=\"inherit\">Account Master</Link>\r\n                <Typography color=\"textPrimary\">Account Name Master</Typography>\r\n              </Breadcrumbs>\r\n            </li>\r\n          </ul>\r\n \r\n        </nav>\r\n         */}\r\n\r\n      {/* <Sidebar />\r\n        <div class=\"content-wrapper\">\r\n          <section className=\"content\">\r\n            <div className=\"container-fluid\"> */}\r\n      <div className={classes.root}>\r\n        <AppBar position=\"static\">\r\n          <Tabs\r\n            value={value}\r\n            onChange={handleChange}\r\n            aria-label=\"simple tabs example\"\r\n          >\r\n            <Tab label=\"Account\" {...a11yProps(0)} />\r\n          </Tabs>\r\n        </AppBar>\r\n        <TabPanel value={value} index={0}>\r\n          <div className=\"container\">\r\n            <div className=\"flex-row\">\r\n              <div className=\"flex-large\">\r\n                <form\r\n                  onSubmit={(event) => {\r\n                    event.preventDefault();\r\n                    props.onPostAccountNameData(data, user);\r\n                  }}\r\n                >\r\n                  <div className=\"form-row\" style={{ fontSize: \"12px\" }}>\r\n                    <div className=\"form-group col-md-3\">\r\n                      <label htmlFor=\"inputPassword4\"> Account Name </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"inputPassword4\"\r\n                        placeholder=\"\"\r\n                        value={!editing ? user.name : currentUser.name}\r\n                        name=\"name\"\r\n                        onChange={\r\n                          editing ? currentUserInputChange : handleInputChange\r\n                        }\r\n                      />\r\n                    </div>\r\n                    <div className=\"form-group col-md-3\">\r\n                      <label htmlFor=\"inputPassword4\">\r\n                        Under Account Group\r\n                      </label>\r\n                      <select\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"inputPassword4\"\r\n                        name=\"account_group_id\"\r\n                        value={\r\n                          editing\r\n                            ? currentUser.account_group_id\r\n                            : user.account_group_id\r\n                        }\r\n                        onChange={\r\n                          editing ? currentUserInputChange : handleInputChange\r\n                        }\r\n                      >\r\n                        <option>select</option> &&\r\n                        {props.accountGroup?.map((accgrp) => (\r\n                          <option key={accgrp.id} value={accgrp.id}>\r\n                            {accgrp.name}\r\n                          </option>\r\n                        ))}\r\n                        {/* {!editing\r\n                                  ? props.accountGroup?.map((accgrp) => (\r\n                                      <option key={accgrp.id} value={accgrp.id}>\r\n                                        {accgrp.name}\r\n                                      </option>\r\n                                    ))\r\n                                  : currentUser\r\n                                  ? props.accountGroup?.map((accgrp) => (\r\n                                      <option key={accgrp.id} value={accgrp.id}>\r\n                                        {accgrp.name}\r\n                                      </option>\r\n                                    ))\r\n                                  : null} */}\r\n                      </select>\r\n                    </div>\r\n\r\n                    <div className=\"form-group col-md-3 mt-4\">\r\n                      {!editing ? (\r\n                        <button className=\"btn btn-primary \" type=\"submit\">\r\n                          Add\r\n                        </button>\r\n                      ) : (\r\n                        <div className=\"d-flex\">\r\n                          <button\r\n                            className=\"btn btn-success\"\r\n                            type=\"button\"\r\n                            onClick={() =>\r\n                              props.onUpdateAccountNameData(\r\n                                data,\r\n                                currentUser.id,\r\n                                editing,\r\n                                setEditing,\r\n                                currentUser,\r\n                                setCurrentUser\r\n                              )\r\n                            }\r\n                          >\r\n                            Update\r\n                          </button>\r\n                          <button\r\n                            className=\"btn btn-primary ml-3\"\r\n                            type=\"button\"\r\n                            onClick={() => setEditing(false)}\r\n                          >\r\n                            Cancel\r\n                          </button>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n              <div className=\"flex-large\">\r\n                <table className=\"table\" style={{ fontSize: \"12px\" }}>\r\n                  <thead>\r\n                    <tr>\r\n                      {/* <th>ID</th> */}\r\n                      <th scope=\"col\">Account Name</th>\r\n                      <th scope=\"col\">Under Account Group</th>\r\n\r\n                      <th scope=\"col\">Actions</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {props.accountName.length > 0 ? (\r\n                      props.accountName.map((user) => (\r\n                        <tr key={user.id}>\r\n                          {/* <td>{user.id}</td> */}\r\n                          <td>{user.name}</td>\r\n                          <td>\r\n                            {user.account_group\r\n                              ? user.account_group.name\r\n                              : null}\r\n                          </td>\r\n\r\n                          <td className=\"d-flex\">\r\n                            <button\r\n                              onClick={() =>\r\n                                props.onEditAccountNameRow(\r\n                                  data,\r\n                                  user.id,\r\n                                  editing,\r\n                                  setEditing,\r\n                                  currentUser,\r\n                                  setCurrentUser\r\n                                )\r\n                              }\r\n                            >\r\n                              <i className=\"fa fa-edit\" aria-hidden=\"true\"></i>\r\n                            </button>\r\n\r\n                            <button\r\n                              className=\"ml-3\"\r\n                              onClick={() => {\r\n                                if (\r\n                                  window.confirm(\r\n                                    \"Are you sure you wish to delete this Account Name?\"\r\n                                  )\r\n                                )\r\n                                  props.onDeleteAccountName(user.id, data);\r\n                              }}\r\n                            >\r\n                              <i\r\n                                className=\"fa fa-trash-alt \"\r\n                                value={user.id}\r\n                                aria-hidden=\"true\"\r\n                              ></i>\r\n                            </button>\r\n                          </td>\r\n                        </tr>\r\n                      ))\r\n                    ) : (\r\n                      <tr>\r\n                        <td colSpan={3}>No users</td>\r\n                      </tr>\r\n                    )}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </TabPanel>\r\n      </div>\r\n      {/* </div>\r\n          </section>\r\n        </div>\r\n      </div> */}\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    accountGroup: state.accountGroup.accountGroup,\r\n    accountName: state.accountName.accountName,\r\n    form: state.form.form,\r\n    login: state.login,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onAccountGroupGetData: (data) =>\r\n      dispatch(actions.accountGroupGetData(data)),\r\n    onAccountNameGetData: (data) => dispatch(actions.accountNameGetData(data)),\r\n    onDeleteAccountName: (id, data) =>\r\n      dispatch(actions.deleteAccountName(id, data)),\r\n    onPostAccountNameData: (data, user) =>\r\n      dispatch(actions.postAccountNameData(data, user)),\r\n    onUpdateAccountNameData: (\r\n      data,\r\n      id,\r\n      editing,\r\n      setEditing,\r\n      currentUser,\r\n      setCurrentUser\r\n    ) =>\r\n      dispatch(\r\n        actions.updateAccountNameData(\r\n          data,\r\n          id,\r\n          editing,\r\n          setEditing,\r\n          currentUser,\r\n          setCurrentUser\r\n        )\r\n      ),\r\n    onEditAccountNameRow: (\r\n      data,\r\n      id,\r\n      editing,\r\n      setEditing,\r\n      currentUser,\r\n      setCurrentUser\r\n    ) =>\r\n      dispatch(\r\n        actions.editAccountNameRow(\r\n          data,\r\n          id,\r\n          editing,\r\n          setEditing,\r\n          currentUser,\r\n          setCurrentUser\r\n        )\r\n      ),\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AccountName);\r\n","E:\\git vinraj\\NewVinraj\\src\\Components\\Master\\ItemMaster\\ItemGroup\\ItemGroup.js",["516","517","518","519"],"import React, { useEffect, useState } from \"react\";\r\nimport { Fragment } from \"react\";\r\nimport Sidebar from \"../../../Home/Sidebar\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport * as actions from \"../../../../reduxStore/actions/index\";\r\nimport { connect } from \"react-redux\";\r\nimport Breadcrumbs from \"@material-ui/core/Breadcrumbs\";\r\n\r\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\";\r\nimport Link from \"@material-ui/core/Link\";\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`simple-tabpanel-${index}`}\r\n      aria-labelledby={`simple-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `simple-tab-${index}`,\r\n    \"aria-controls\": `simple-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n}));\r\n\r\nfunction ItemGroup(props) {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  let data = {\r\n    token: props.login?.login?.token,\r\n  };\r\n\r\n  //  console.log(\"data\", data);\r\n  //  console.log(\"login\", props.login?.login);\r\n\r\n  useEffect(() => {\r\n    // console.log(\"currentUser data from redux \", currentUser);\r\n\r\n    props.onItemGroupGetData(data);\r\n    props.onItemGroupGetData(data);\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const [user, setUser] = useState({\r\n    name: \"\",\r\n    under_group_name: \"\",\r\n  });\r\n\r\n  const [editing, setEditing] = useState(false);\r\n\r\n  const initialFormState = {\r\n    id: \"\",\r\n    name: \"\",\r\n    under_group_name: \"\",\r\n  };\r\n\r\n  const [currentUser, setCurrentUser] = useState(initialFormState);\r\n\r\n  const currentUserInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setCurrentUser({ ...currentUser, [name]: value });\r\n  };\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUser({ ...user, [name]: value });\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      {/* <div className=\"wrapper\">\r\n        <nav className=\"main-header navbar navbar-expand navbar-white navbar-light\">\r\n          <ul className=\"navbar-nav d-flex align-items-center\">\r\n            <li className=\"nav-item\">\r\n              <a\r\n                className=\"nav-link\"\r\n                data-widget=\"pushmenu\"\r\n                href=\"n\"\r\n                role=\"button\"\r\n              >\r\n                <i className=\"fas fa-bars\" />\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item d-none d-sm-inline-block ml-2\">\r\n              <Breadcrumbs\r\n                separator={<NavigateNextIcon fontSize=\"small\" />}\r\n                aria-label=\"breadcrumb\"\r\n              >\r\n                <Link color=\"inherit\" href=\"/\">\r\n                  Home\r\n                </Link>\r\n                <Link color=\"inherit\">Master</Link>\r\n                <Link color=\"inherit\">Item Master</Link>\r\n                <Typography color=\"textPrimary\">Item Group Master</Typography>\r\n              </Breadcrumbs>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n\r\n        <div class=\"content-wrapper\">\r\n          <section className=\"content\">\r\n            <div className=\"container-fluid\"> */}\r\n      <div className={classes.root}>\r\n        <AppBar position=\"static\">\r\n          <Tabs\r\n            value={value}\r\n            onChange={handleChange}\r\n            aria-label=\"simple tabs example\"\r\n          >\r\n            <Tab label=\"Item Group\" {...a11yProps(0)} />\r\n          </Tabs>\r\n        </AppBar>\r\n        <TabPanel value={value} index={0}>\r\n          <div className=\"container\">\r\n            <div className=\"flex-row\">\r\n              <div className=\"flex-large\">\r\n                <form\r\n                  onSubmit={(event) => {\r\n                    event.preventDefault();\r\n                    props.onPostItemGroupData(data, user);\r\n                  }}\r\n                >\r\n                  <div className=\"form-row\" style={{ fontSize: \"12px\" }}>\r\n                    <div className=\"form-group col-md-3\">\r\n                      <label htmlFor=\"inputPassword4\"> Item Group </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"inputPassword4\"\r\n                        placeholder=\"\"\r\n                        value={!editing ? user.name : currentUser.name}\r\n                        name=\"name\"\r\n                        onChange={\r\n                          editing ? currentUserInputChange : handleInputChange\r\n                        }\r\n                      />\r\n                    </div>\r\n                    <div className=\"form-group col-md-3\">\r\n                      <label htmlFor=\"inputPassword4\">Under Item Group</label>\r\n                      <select\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"inputPassword4\"\r\n                        name=\"under_group_name\"\r\n                        value={\r\n                          editing\r\n                            ? currentUser.under_group_name\r\n                            : user.under_group_name\r\n                        }\r\n                        onChange={\r\n                          editing ? currentUserInputChange : handleInputChange\r\n                        }\r\n                      >\r\n                        <option>select</option> &&\r\n                        {!editing\r\n                          ? props.itemGroup?.map((accgrp) => (\r\n                              <option key={accgrp.id} value={accgrp.name}>\r\n                                {accgrp.name}\r\n                              </option>\r\n                            ))\r\n                          : currentUser\r\n                          ? // <option>{currentUser}</option>\r\n                            //  &&\r\n                            props.itemGroup?.map((accgrp) => (\r\n                              <option key={accgrp.id} value={accgrp.name}>\r\n                                {accgrp.name}\r\n                              </option>\r\n                            ))\r\n                          : null}\r\n                      </select>\r\n                    </div>\r\n\r\n                    <div className=\"form-group col-md-3 mt-4\">\r\n                      {!editing ? (\r\n                        <button className=\"btn btn-primary \" type=\"submit\">\r\n                          Add\r\n                        </button>\r\n                      ) : (\r\n                        <div className=\"d-flex\">\r\n                          <button\r\n                            className=\"btn btn-success\"\r\n                            type=\"button\"\r\n                            onClick={() =>\r\n                              props.onUpdateItemGroupData(\r\n                                data,\r\n                                currentUser.id,\r\n                                editing,\r\n                                setEditing,\r\n                                currentUser,\r\n                                setCurrentUser\r\n                              )\r\n                            }\r\n                          >\r\n                            Update\r\n                          </button>\r\n                          <button\r\n                            className=\"btn btn-primary ml-3\"\r\n                            type=\"button\"\r\n                            onClick={() => setEditing(false)}\r\n                          >\r\n                            Cancel\r\n                          </button>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n              <div className=\"flex-large\">\r\n                <table className=\"table\" style={{ fontSize: \"12px\" }}>\r\n                  <thead>\r\n                    <tr>\r\n                      {/* <th>ID</th> */}\r\n                      <th scope=\"col\">Item Group</th>\r\n                      <th scope=\"col\">Under Item Group</th>\r\n\r\n                      <th scope=\"col\">Actions</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {props.itemGroup.length > 0 ? (\r\n                      props.itemGroup.map((user) => (\r\n                        <tr key={user.id}>\r\n                          {/* <td>{user.id}</td> */}\r\n                          <td>{user.name}</td>\r\n                          <td>{user.under_group_name}</td>\r\n\r\n                          <td className=\"d-flex\">\r\n                            <button\r\n                              onClick={() =>\r\n                                props.onEditItemGroupRow(\r\n                                  data,\r\n                                  user.id,\r\n                                  editing,\r\n                                  setEditing,\r\n                                  currentUser,\r\n                                  setCurrentUser\r\n                                )\r\n                              }\r\n                            >\r\n                              <i className=\"fa fa-edit\" aria-hidden=\"true\"></i>\r\n                            </button>\r\n\r\n                            <button\r\n                              className=\"ml-3\"\r\n                              onClick={() => {\r\n                                if (\r\n                                  window.confirm(\r\n                                    \"Are you sure you wish to delete this Item Group?\"\r\n                                  )\r\n                                )\r\n                                  props.onDeleteItemGroup(user.id, data);\r\n                              }}\r\n                            >\r\n                              <i\r\n                                className=\"fa fa-trash-alt \"\r\n                                value={user.id}\r\n                                aria-hidden=\"true\"\r\n                              ></i>\r\n                            </button>\r\n                          </td>\r\n                        </tr>\r\n                      ))\r\n                    ) : (\r\n                      <tr>\r\n                        <td colSpan={3}>No users</td>\r\n                      </tr>\r\n                    )}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </TabPanel>\r\n      </div>\r\n      {/* </div>\r\n          </section>\r\n        </div>\r\n      </div> */}\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    itemGroup: state.itemGroup.itemGroup,\r\n    form: state.form.form,\r\n    login: state.login,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onItemGroupGetData: (data) => dispatch(actions.itemGroupGetData(data)),\r\n    onDeleteItemGroup: (id, data) =>\r\n      dispatch(actions.deleteItemGroup(id, data)),\r\n    onPostItemGroupData: (data, user) =>\r\n      dispatch(actions.postItemGroupData(data, user)),\r\n    onUpdateItemGroupData: (\r\n      data,\r\n      id,\r\n      editing,\r\n      setEditing,\r\n      currentUser,\r\n      setCurrentUser\r\n    ) =>\r\n      dispatch(\r\n        actions.updateItemGroupData(\r\n          data,\r\n          id,\r\n          editing,\r\n          setEditing,\r\n          currentUser,\r\n          setCurrentUser\r\n        )\r\n      ),\r\n    onEditItemGroupRow: (\r\n      data,\r\n      id,\r\n      editing,\r\n      setEditing,\r\n      currentUser,\r\n      setCurrentUser\r\n    ) =>\r\n      dispatch(\r\n        actions.editItemGroupRow(\r\n          data,\r\n          id,\r\n          editing,\r\n          setEditing,\r\n          currentUser,\r\n          setCurrentUser\r\n        )\r\n      ),\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ItemGroup);\r\n","E:\\git vinraj\\NewVinraj\\src\\Components\\Master\\ItemMaster\\ItemUnits\\ItemUnits.js",["520","521","522","523"],"/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Fragment } from \"react\";\r\nimport Sidebar from \"../../../Home/Sidebar\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport * as actions from \"../../../../reduxStore/actions/index\";\r\nimport { connect } from \"react-redux\";\r\nimport Breadcrumbs from \"@material-ui/core/Breadcrumbs\";\r\n\r\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\";\r\nimport Link from \"@material-ui/core/Link\";\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`simple-tabpanel-${index}`}\r\n      aria-labelledby={`simple-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `simple-tab-${index}`,\r\n    \"aria-controls\": `simple-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n}));\r\n\r\nfunction ItemUnits(props) {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  let data = {\r\n    token: props.login?.login?.token,\r\n  };\r\n\r\n  useEffect(() => {\r\n    props.onItemUnitsGetData(data);\r\n  }, []);\r\n\r\n  const [user, setUser] = useState({\r\n    unit_name: \"\",\r\n  });\r\n\r\n  const [editing, setEditing] = useState(false);\r\n\r\n  const initialFormState = {\r\n    id: \"\",\r\n    unit_name: \"\",\r\n  };\r\n\r\n  const [currentUser, setCurrentUser] = useState(initialFormState);\r\n\r\n  const currentUserInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setCurrentUser({ ...currentUser, [name]: value });\r\n  };\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUser({ ...user, [name]: value });\r\n  };\r\n\r\n  // console.log(\"currentUser data from redux \", currentUser.group_name);\r\n  console.log(\"User data from redux \", currentUser);\r\n\r\n  return (\r\n    <Fragment>\r\n      {/* <div className=\"wrapper\">\r\n       \r\n        <nav className=\"main-header navbar navbar-expand navbar-white navbar-light\">\r\n          \r\n          <ul className=\"navbar-nav d-flex align-items-center\">\r\n            <li className=\"nav-item\">\r\n              <a\r\n                className=\"nav-link\"\r\n                data-widget=\"pushmenu\"\r\n                href=\"n\"\r\n                role=\"button\"\r\n              >\r\n                <i className=\"fas fa-bars\" />\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item d-none d-sm-inline-block ml-2\">\r\n              <Breadcrumbs\r\n                separator={<NavigateNextIcon fontSize=\"small\" />}\r\n                aria-label=\"breadcrumb\"\r\n              >\r\n                <Link color=\"inherit\" href=\"/\">\r\n                  Home\r\n                </Link>\r\n                <Link color=\"inherit\">Master</Link>\r\n                <Link color=\"inherit\">Item Master</Link>\r\n                <Typography color=\"textPrimary\">Item Units Master</Typography>\r\n              </Breadcrumbs>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n        \r\n\r\n        <Sidebar />\r\n        <div class=\"content-wrapper\">\r\n          <section className=\"content\">\r\n            <div className=\"container-fluid\"> */}\r\n      <div className={classes.root}>\r\n        <AppBar position=\"static\">\r\n          <Tabs\r\n            value={value}\r\n            onChange={handleChange}\r\n            aria-label=\"simple tabs example\"\r\n          >\r\n            <Tab label=\"Item Units\" {...a11yProps(0)} />\r\n          </Tabs>\r\n        </AppBar>\r\n        <TabPanel value={value} index={0}>\r\n          <div className=\"container\">\r\n            <div className=\"flex-row\">\r\n              <div className=\"flex-large\">\r\n                <form\r\n                  onSubmit={(event) => {\r\n                    event.preventDefault();\r\n                    props.onPostItemUnitsData(data, user);\r\n                  }}\r\n                >\r\n                  <div className=\"form-row\" style={{ fontSize: \"12px\" }}>\r\n                    <div className=\"form-group col-md-3\">\r\n                      <label htmlFor=\"inputPassword4\"> Units </label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"inputPassword4\"\r\n                        placeholder=\"\"\r\n                        value={\r\n                          !editing ? user.unit_name : currentUser.unit_name\r\n                        }\r\n                        name=\"unit_name\"\r\n                        onChange={\r\n                          editing ? currentUserInputChange : handleInputChange\r\n                        }\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"form-group col-md-3 mt-4\">\r\n                      {!editing ? (\r\n                        <button className=\"btn btn-primary \" type=\"submit\">\r\n                          Add\r\n                        </button>\r\n                      ) : (\r\n                        <div className=\"d-flex\">\r\n                          <button\r\n                            className=\"btn btn-success\"\r\n                            type=\"button\"\r\n                            onClick={() =>\r\n                              props.onUpdateItemUnitsData(\r\n                                data,\r\n                                currentUser.id,\r\n                                editing,\r\n                                setEditing,\r\n                                currentUser,\r\n                                setCurrentUser\r\n                              )\r\n                            }\r\n                          >\r\n                            Update\r\n                          </button>\r\n                          <button\r\n                            className=\"btn btn-primary ml-3\"\r\n                            type=\"button\"\r\n                            onClick={() => setEditing(false)}\r\n                          >\r\n                            Cancel\r\n                          </button>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n              <div className=\"flex-large\">\r\n                <table className=\"table\" style={{ fontSize: \"12px\" }}>\r\n                  <thead>\r\n                    <tr>\r\n                      {/* <th>ID</th> */}\r\n                      <th scope=\"col\">Item Units</th>\r\n                      {/* <th scope=\"col\">Under Item Group</th> */}\r\n\r\n                      <th scope=\"col\">Actions</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {props.itemUnits.length > 0 ? (\r\n                      props.itemUnits.map((user) => (\r\n                        <tr key={user.id}>\r\n                          {/* <td>{user.id}</td> */}\r\n                          <td>{user.unit_name}</td>\r\n                          {/* <td>\r\n                                    {user.item_group\r\n                                      ? user.item_group.name\r\n                                      : null}\r\n                                  </td> */}\r\n\r\n                          <td className=\"d-flex\">\r\n                            <button\r\n                              onClick={() =>\r\n                                props.onEditItemUnitsRow(\r\n                                  data,\r\n                                  user.id,\r\n                                  editing,\r\n                                  setEditing,\r\n                                  currentUser,\r\n                                  setCurrentUser\r\n                                )\r\n                              }\r\n                            >\r\n                              <i className=\"fa fa-edit\" aria-hidden=\"true\"></i>\r\n                            </button>\r\n\r\n                            <button\r\n                              className=\"ml-3\"\r\n                              onClick={() => {\r\n                                if (\r\n                                  window.confirm(\r\n                                    \"Are you sure you wish to delete this Item Units?\"\r\n                                  )\r\n                                )\r\n                                  props.onDeleteItemUnits(user.id, data);\r\n                              }}\r\n                            >\r\n                              <i\r\n                                className=\"fa fa-trash-alt \"\r\n                                value={user.id}\r\n                                aria-hidden=\"true\"\r\n                              ></i>\r\n                            </button>\r\n                          </td>\r\n                        </tr>\r\n                      ))\r\n                    ) : (\r\n                      <tr>\r\n                        <td colSpan={3}>No users</td>\r\n                      </tr>\r\n                    )}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </TabPanel>\r\n      </div>\r\n      {/* </div>\r\n          </section>\r\n        </div>\r\n      </div> */}\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    // itemGroup: state.itemGroup.itemGroup,\r\n    itemUnits: state.itemUnits.itemUnits,\r\n    form: state.form.form,\r\n    login: state.login,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    // onItemGroupGetData: () => dispatch(actions.itemGroupGetData()),\r\n    onItemUnitsGetData: (data) => dispatch(actions.itemUnitsGetData(data)),\r\n    onDeleteItemUnits: (id, data) =>\r\n      dispatch(actions.deleteItemUnits(id, data)),\r\n    onPostItemUnitsData: (data, user) =>\r\n      dispatch(actions.postItemUnitsData(data, user)),\r\n    onUpdateItemUnitsData: (\r\n      data,\r\n      id,\r\n      editing,\r\n      setEditing,\r\n      currentUser,\r\n      setCurrentUser\r\n    ) =>\r\n      dispatch(\r\n        actions.updateItemUnitsData(\r\n          data,\r\n          id,\r\n          editing,\r\n          setEditing,\r\n          currentUser,\r\n          setCurrentUser\r\n        )\r\n      ),\r\n    onEditItemUnitsRow: (\r\n      data,\r\n      id,\r\n      editing,\r\n      setEditing,\r\n      currentUser,\r\n      setCurrentUser\r\n    ) =>\r\n      dispatch(\r\n        actions.editItemUnitsRow(\r\n          data,\r\n          id,\r\n          editing,\r\n          setEditing,\r\n          currentUser,\r\n          setCurrentUser\r\n        )\r\n      ),\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ItemUnits);\r\n","E:\\git vinraj\\NewVinraj\\src\\Components\\Master\\PrefixMaster\\Department\\Department.js",["524","525","526","527","528"],"/* eslint-disable react-hooks/exhaustive-deps */\r\n// import axios from \"axios\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Fragment } from \"react\";\r\n// import swal from \"sweetalert\";\r\nimport Sidebar from \"../../../Home/Sidebar\";\r\nimport * as actions from \"../../../../reduxStore/actions/index\";\r\nimport { connect } from \"react-redux\";\r\nimport Breadcrumbs from \"@material-ui/core/Breadcrumbs\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nfunction Department(props) {\r\n  let data = {\r\n    token: props.login?.login?.token,\r\n  };\r\n\r\n  const [isSubmit, setSubmit] = useState(false);\r\n\r\n  useEffect(() => {\r\n    props.onDepartmentGetData(data);\r\n  }, []);\r\n\r\n  const [user, setUser] = useState({\r\n    name: \"\",\r\n  });\r\n\r\n  const [editing, setEditing] = useState(false);\r\n\r\n  const initialFormState = {\r\n    name: \"\",\r\n  };\r\n\r\n  const [currentUser, setCurrentUser] = useState(initialFormState);\r\n\r\n  const currentUserInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setCurrentUser({ ...currentUser, [name]: value });\r\n  };\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUser({ ...user, [name]: value });\r\n  };\r\n\r\n  // console.log(\"editing\", editing);\r\n  // console.log(\"Current User\", currentUser);\r\n\r\n  return (\r\n    <Fragment>\r\n      {/* <div className=\"wrapper\">\r\n      \r\n        <nav className=\"main-header navbar navbar-expand navbar-white navbar-light\">\r\n                   <ul className=\"navbar-nav d-flex align-items-center\">\r\n            <li className=\"nav-item\">\r\n              <a\r\n                className=\"nav-link\"\r\n                data-widget=\"pushmenu\"\r\n                href=\"n\"\r\n                role=\"button\"\r\n              >\r\n                <i className=\"fas fa-bars\"> </i>\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item d-none d-sm-inline-block ml-2\">\r\n              <Breadcrumbs\r\n                separator={<NavigateNextIcon fontSize=\"small\" />}\r\n                aria-label=\"breadcrumb\"\r\n              >\r\n                <Link color=\"inherit\" href=\"/\">\r\n                  Home\r\n                </Link>\r\n                <Link color=\"inherit\">Master</Link>\r\n                <Typography color=\"textPrimary\">Department Master</Typography>\r\n              </Breadcrumbs>\r\n            </li>\r\n          </ul>\r\n          \r\n        </nav>\r\n    \r\n\r\n        <Sidebar />\r\n        <div class=\"content-wrapper\">\r\n          <section className=\"content\">\r\n            <div className=\"container-fluid\"> */}\r\n      <div className=\"container\">\r\n        <div className=\"flex-row\">\r\n          <div className=\"flex-large\">\r\n            {/* Department Form Section Start here */}\r\n            <form\r\n              onSubmit={(event) => {\r\n                event.preventDefault();\r\n                setSubmit(true);\r\n                props.onPostDepartmentData(data, user, setSubmit);\r\n              }}\r\n            >\r\n              <div className=\"form-row\" style={{ fontSize: \"12px\" }}>\r\n                <div className=\"form-group col-md-3\">\r\n                  <label htmlFor=\"inputPassword4\">Department Name</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    id=\"inputPassword4\"\r\n                    placeholder=\"\"\r\n                    value={editing ? currentUser.name : user.name}\r\n                    name=\"name\"\r\n                    onChange={\r\n                      editing ? currentUserInputChange : handleInputChange\r\n                    }\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"form-group col-md-3 mt-4\">\r\n                  {!editing || !currentUser ? (\r\n                    <button\r\n                      className=\"btn btn-primary \"\r\n                      type=\"submit\"\r\n                      disabled={isSubmit}\r\n                    >\r\n                      Add\r\n                    </button>\r\n                  ) : (\r\n                    <div>\r\n                      <button\r\n                        className=\"btn btn-success\"\r\n                        type=\"button\"\r\n                        onClick={() =>\r\n                          props.onUpdateDepartmentData(\r\n                            data,\r\n                            currentUser.id,\r\n                            editing,\r\n                            setEditing,\r\n                            currentUser,\r\n                            setCurrentUser\r\n                          )\r\n                        }\r\n                      >\r\n                        Update\r\n                      </button>\r\n                      <button\r\n                        className=\"btn btn-primary ml-3\"\r\n                        type=\"button\"\r\n                        onClick={() => setEditing(false)}\r\n                      >\r\n                        Cancel\r\n                      </button>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </form>\r\n            {/* Department Form Section End here */}\r\n          </div>\r\n          <div className=\"flex-large\">\r\n            <table\r\n              className=\"table\"\r\n              style={{\r\n                fontSize: \"12px\",\r\n              }}\r\n            >\r\n              <thead>\r\n                <tr>\r\n                  {/* <th>ID</th> */}\r\n                  <th scope=\"col\">Department Name</th>\r\n\r\n                  <th scope=\"col\">Actions</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {props.department?.length > 0 ? (\r\n                  props.department?.map((user) => (\r\n                    <tr key={user.id}>\r\n                      <td>{user.name}</td>\r\n\r\n                      <td>\r\n                        <Button\r\n                          className=\"btn-warning p-1\"\r\n                          onClick={() =>\r\n                            props.onEditDepartmentRow(\r\n                              data,\r\n                              user.id,\r\n                              editing,\r\n                              setEditing,\r\n                              currentUser,\r\n                              setCurrentUser\r\n                            )\r\n                          }\r\n                        >\r\n                          <i className=\"fa fa-edit\" aria-hidden=\"true\"></i>\r\n                        </Button>\r\n\r\n                        {/* <Button\r\n                          className=\"btn-danger p-1 ml-4\"\r\n                          onClick={() => {\r\n                            if (\r\n                              window.confirm(\r\n                                \"Are you sure you wish to delete this Department?\"\r\n                              )\r\n                            )\r\n                              props.onDeleteDepartment(user.id, data);\r\n                          }}\r\n                        >\r\n                          <i\r\n                            className=\"fa fa-trash-alt\"\r\n                            value={user.id}\r\n                            aria-hidden=\"true\"\r\n                          ></i>\r\n                        </Button> */}\r\n                      </td>\r\n                    </tr>\r\n                  ))\r\n                ) : (\r\n                  <tr>\r\n                    <td colSpan={3}>No users</td>\r\n                  </tr>\r\n                )}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* </div>\r\n          </section>\r\n        </div>\r\n      </div> */}\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    department: state.department.department,\r\n    login: state.login,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onDepartmentGetData: (data) => dispatch(actions.departmentGetData(data)),\r\n    onDeleteDepartment: (id, data) =>\r\n      dispatch(actions.deleteDepartment(id, data)),\r\n    onPostDepartmentData: (data, user, setSubmit) =>\r\n      dispatch(actions.postDepartmentData(data, user, setSubmit)),\r\n    onUpdateDepartmentData: (\r\n      data,\r\n      id,\r\n      editing,\r\n      setEditing,\r\n      currentUser,\r\n      setCurrentUser\r\n    ) =>\r\n      dispatch(\r\n        actions.updateDepartmentData(\r\n          data,\r\n          id,\r\n          editing,\r\n          setEditing,\r\n          currentUser,\r\n          setCurrentUser\r\n        )\r\n      ),\r\n    onEditDepartmentRow: (\r\n      data,\r\n      id,\r\n      editing,\r\n      setEditing,\r\n      currentUser,\r\n      setCurrentUser\r\n    ) =>\r\n      dispatch(\r\n        actions.editDepartmentRow(\r\n          data,\r\n          id,\r\n          editing,\r\n          setEditing,\r\n          currentUser,\r\n          setCurrentUser\r\n        )\r\n      ),\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Department);\r\n","E:\\git vinraj\\NewVinraj\\src\\Components\\Master\\PrefixMaster\\Form\\PrefixForm.js",[],"E:\\git vinraj\\NewVinraj\\src\\Components\\Master\\PrefixMaster\\Prefix\\Prefix.js",["529","530","531","532","533","534","535","536"],"/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Sidebar from \"../../../Home/Sidebar\";\r\nimport * as actions from \"../../../../reduxStore/actions/index\";\r\nimport Breadcrumbs from \"@material-ui/core/Breadcrumbs\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport ExportCSV from \"../../../ExcelFile/ExportCSV\";\r\n\r\nfunction Prefix(props) {\r\n  let data = {\r\n    token: props.login?.login?.token,\r\n  };\r\n\r\n  //  console.log(\"data\", data);\r\n  //  console.log(\"login\", props.login?.login);\r\n\r\n  const [user, setUser] = useState({\r\n    form_id: \"\",\r\n    department_id: \"\",\r\n    prefix: \"\",\r\n  });\r\n\r\n  const [editing, setEditing] = useState(false);\r\n  const [dep2, setDep2] = useState([]);\r\n\r\n  const initialFormState = {\r\n    id: \"\",\r\n    form_id: \"\",\r\n    form_name: \"\",\r\n    department_id: \"\",\r\n    department_name: \"\",\r\n    prefix: \"\",\r\n  };\r\n\r\n  const [currentUser, setCurrentUser] = useState(initialFormState);\r\n\r\n  const selectHandleInputChange = (event) => {\r\n    setDep2(event.target.value);\r\n    const { name, value } = event.target;\r\n    setUser({ ...user, [name]: value });\r\n  };\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUser({ ...user, [name]: value });\r\n  };\r\n\r\n  const currentUserInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setCurrentUser({ ...currentUser, [name]: value });\r\n  };\r\n\r\n  useEffect(() => {\r\n    props.onDepartmentGetData(data);\r\n    props.onFormGetData(data);\r\n    props.onPrefixGetData(data);\r\n  }, []);\r\n\r\n  const [csv, setCsv] = useState([]);\r\n\r\n  useEffect(() => {\r\n    props.prefix?.map((prefix) => {\r\n      csv.push({\r\n        FormName: prefix.form?.name,\r\n        DepartmentName: prefix.department?.name,\r\n        Prefix: prefix.prefix,\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  console.log(\"csv\", csv);\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"container\">\r\n        <div className=\"flex-row\">\r\n          <div className=\"flex-large\">\r\n            <form\r\n              onSubmit={(event) => {\r\n                event.preventDefault();\r\n                props.onPostPrefixData(data, user);\r\n              }}\r\n            >\r\n              <div className=\"form-row\" style={{ fontSize: \"12px\" }}>\r\n                <div className=\"form-group col-md-3\">\r\n                  <label htmlFor=\"inputPassword4\"> Department</label>\r\n                  <select\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    id=\"inputPassword4\"\r\n                    name=\"department_id\"\r\n                    value={\r\n                      editing ? currentUser.department_id : props.department.id\r\n                    }\r\n                    onChange={\r\n                      editing ? currentUserInputChange : selectHandleInputChange\r\n                    }\r\n                  >\r\n                    {\" \"}\r\n                    <option>select</option> &&\r\n                    {!editing\r\n                      ? props.department?.map((dep) => (\r\n                          <option key={dep.id} value={dep.id}>\r\n                            {dep.name}\r\n                          </option>\r\n                        ))\r\n                      : currentUser\r\n                      ? <option>{currentUser.department_name}</option> &&\r\n                        props.department?.map((dep) => (\r\n                          <option key={dep.id} value={dep.id}>\r\n                            {dep.name}\r\n                          </option>\r\n                        ))\r\n                      : null}\r\n                  </select>\r\n                </div>\r\n\r\n                <div className=\"form-group col-md-3\">\r\n                  <label htmlFor=\"inputPassword4\"> Form name </label>\r\n\r\n                  <select\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    id=\"inputPassword4\"\r\n                    name=\"form_id\"\r\n                    value={editing ? currentUser.form_id : props.form.id}\r\n                    onChange={\r\n                      editing ? currentUserInputChange : handleInputChange\r\n                    }\r\n                  >\r\n                    {\" \"}\r\n                    <option>select</option> &&\r\n                    {!editing\r\n                      ? props.form?.map((form) => {\r\n                          if (dep2 === form.department_id) {\r\n                            //  console.log(\"Dep2\", dep2);\r\n                            //  console.log(\"department value\", form.department_id);\r\n\r\n                            return (\r\n                              <option key={form.id} value={form.id}>\r\n                                {form.name}\r\n                              </option>\r\n                            );\r\n                          }\r\n                          return <div></div>;\r\n                        })\r\n                      : currentUser\r\n                      ? <option>{currentUser.form_name}</option> &&\r\n                        props.form?.map((form) => {\r\n                          if (\r\n                            currentUser.department_id === form.department_id\r\n                          ) {\r\n                            console.log(\"Dep2\", props.department.id);\r\n                            console.log(\"department value\", form.department_id);\r\n\r\n                            return (\r\n                              <option key={form.id} value={form.id}>\r\n                                {form.name}\r\n                              </option>\r\n                            );\r\n                          }\r\n                          return <div></div>;\r\n                        })\r\n                      : null}\r\n                    {/* {form.map((form) => <option key={form.id}  value={form.id}>{form.name}</option>)} */}\r\n                  </select>\r\n                </div>\r\n\r\n                <div className=\"form-group col-md-3\">\r\n                  <label htmlFor=\"inputPassword4\">Prefix</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    id=\"inputPassword4\"\r\n                    placeholder=\"\"\r\n                    value={!editing ? user.prefix : currentUser.prefix}\r\n                    name=\"prefix\"\r\n                    onChange={\r\n                      editing ? currentUserInputChange : handleInputChange\r\n                    }\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"form-group col-md-3 mt-4\">\r\n                  {!editing || !currentUser ? (\r\n                    <button className=\"btn btn-primary \" type=\"submit\">\r\n                      Add\r\n                    </button>\r\n                  ) : (\r\n                    <div>\r\n                      <button\r\n                        className=\"btn btn-success\"\r\n                        type=\"button\"\r\n                        onClick={() =>\r\n                          props.onUpdatePrefixData(\r\n                            data,\r\n                            currentUser.id,\r\n                            editing,\r\n                            setEditing,\r\n                            currentUser,\r\n                            setCurrentUser\r\n                          )\r\n                        }\r\n                      >\r\n                        Update\r\n                      </button>\r\n                      <button\r\n                        className=\"btn btn-primary ml-3\"\r\n                        type=\"button\"\r\n                        onClick={() => setEditing(false)}\r\n                      >\r\n                        Cancel\r\n                      </button>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </form>\r\n          </div>\r\n          <div className=\"flex-large\">\r\n            <table className=\"table\" style={{ fontSize: \"12px\" }}>\r\n              <thead>\r\n                <tr>\r\n                  {/* <th>ID</th> */}\r\n                  <th scope=\"col\">Form Name</th>\r\n                  <th scope=\"col\">Department Name</th>\r\n                  <th scope=\"col\">Prefix</th>\r\n                  <th scope=\"col\">Actions</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {props.prefix.length > 0 ? (\r\n                  props.prefix.map((user) => (\r\n                    <tr key={user.id}>\r\n                      {/* <td>{user.id}</td> */}\r\n                      <td>{user.form ? user.form.name : null}</td>\r\n                      <td>{user.department ? user.department.name : null}</td>\r\n                      <td>{user.prefix}</td>\r\n                      <td className=\"d-flex\">\r\n                        <button\r\n                          onClick={() =>\r\n                            props.onEditPrefixRow(\r\n                              data,\r\n                              user.id,\r\n                              editing,\r\n                              setEditing,\r\n                              currentUser,\r\n                              setCurrentUser\r\n                            )\r\n                          }\r\n                        >\r\n                          <i className=\"fa fa-edit\" aria-hidden=\"true\"></i>\r\n                        </button>\r\n\r\n                        <button\r\n                          className=\"ml-4 \"\r\n                          onClick={() => {\r\n                            if (\r\n                              window.confirm(\r\n                                \"Are you sure you wish to delete this Prefix?\"\r\n                              )\r\n                            )\r\n                              props.onDeletePrefix(user.id, data);\r\n                          }}\r\n                        >\r\n                          <i\r\n                            className=\"fa fa-trash-alt \"\r\n                            value={user.id}\r\n                            aria-hidden=\"true\"\r\n                          ></i>\r\n                        </button>\r\n                      </td>\r\n                    </tr>\r\n                  ))\r\n                ) : (\r\n                  <tr>\r\n                    <td colSpan={3}>No users</td>\r\n                  </tr>\r\n                )}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    department: state.department.department,\r\n    form: state.form.form,\r\n    prefix: state.prefix.prefix,\r\n    login: state.login,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onDepartmentGetData: (data) => dispatch(actions.departmentGetData(data)),\r\n    onFormGetData: (data) => dispatch(actions.formGetData(data)),\r\n    onPrefixGetData: (data) => dispatch(actions.prefixGetData(data)),\r\n    onDeletePrefix: (id, data) => dispatch(actions.deletePrefix(id, data)),\r\n    onPostPrefixData: (data, user) =>\r\n      dispatch(actions.postPrefixData(data, user)),\r\n    onUpdatePrefixData: (\r\n      data,\r\n      id,\r\n      editing,\r\n      setEditing,\r\n      currentUser,\r\n      setCurrentUser\r\n    ) =>\r\n      dispatch(\r\n        actions.updatePrefixData(\r\n          data,\r\n          id,\r\n          editing,\r\n          setEditing,\r\n          currentUser,\r\n          setCurrentUser\r\n        )\r\n      ),\r\n    onEditPrefixRow: (\r\n      data,\r\n      id,\r\n      editing,\r\n      setEditing,\r\n      currentUser,\r\n      setCurrentUser\r\n    ) =>\r\n      dispatch(\r\n        actions.editPrefixRow(\r\n          data,\r\n          id,\r\n          editing,\r\n          setEditing,\r\n          currentUser,\r\n          setCurrentUser\r\n        )\r\n      ),\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Prefix);\r\n",["537","538"],"E:\\git vinraj\\NewVinraj\\src\\reduxStore\\actions\\actionType.js",[],"E:\\git vinraj\\NewVinraj\\src\\Components\\Home\\Sidebar.js",[],"E:\\git vinraj\\NewVinraj\\src\\Components\\User&Pass\\AddUserMaster.js",[],"E:\\git vinraj\\NewVinraj\\src\\Components\\User&Pass\\RightsUserMaster.js",["539"],"/* eslint-disable array-callback-return */\r\n/* eslint-disable eqeqeq */\r\n/* eslint-disable react-hooks/exhaustive-deps */\r\n\r\nimport React, { Fragment, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { departmentGetData, formGetData } from \"../../reduxStore/actions\";\r\nimport * as actions from \"../../reduxStore/actions\";\r\nimport {\r\n  Button,\r\n  Col,\r\n  FormGroup,\r\n  InputGroup,\r\n  Row,\r\n  Table,\r\n} from \"react-bootstrap\";\r\n\r\nimport { Formik, Form, Field, ErrorMessage, FieldArray } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { InputGroupAddon, Label } from \"reactstrap\";\r\nimport CustomInput from \"../../views/Custom/CustomInput\";\r\n\r\nfunction RightsUserMaster(props) {\r\n  let data = {\r\n    token: props.login?.login?.token,\r\n  };\r\n\r\n  useEffect(() => {\r\n    props.onDepartmentGetData(data);\r\n    props.onFormGetData(data);\r\n    props.onRightGetData(data);\r\n    props.onPageGetData(data);\r\n  }, []);\r\n\r\n  const handleSubmit = (values, { setSubmitting }) => {\r\n    console.log(\"values in Bio Data:\", values);\r\n\r\n    let user = {\r\n      id: values.user_id,\r\n      rights: values.right,\r\n    };\r\n    console.log(\"Data of User of rights:\", user);\r\n    props.updateRightData(data, user, setSubmitting);\r\n    setSubmitting(true);\r\n    values.user_id = \"\";\r\n    values.right = [];\r\n    return;\r\n  };\r\n\r\n  console.log(\"users\", props.users);\r\n\r\n  return (\r\n    <Fragment>\r\n      <Formik\r\n        initialValues={{\r\n          user_id: \"\",\r\n          right: [],\r\n        }}\r\n        onSubmit={handleSubmit}\r\n        validationSchema={Yup.object().shape({\r\n          user_id: Yup.string().required(\"User is required\"),\r\n        })}\r\n      >\r\n        {(formProps) => (\r\n          <Form>\r\n            <Row className=\"form-group\">\r\n              <Col md={6}>\r\n                <Label for=\"user_id\">Select User</Label>\r\n                <InputGroup>\r\n                  <Field\r\n                    component={CustomInput}\r\n                    type=\"text\"\r\n                    list=\"userdatalist\"\r\n                    name=\"user_id\"\r\n                    id=\"user_id\"\r\n                    placeholder=\"Enter User Name\"\r\n                    className={\r\n                      \"form-control\" +\r\n                      (formProps.errors.user_id && formProps.touched.user_id\r\n                        ? \" is-invalid\"\r\n                        : \"\")\r\n                    }\r\n                  />\r\n                  <datalist id=\"userdatalist\" style={{ width: \"100%\" }}>\r\n                    {props.users?.map((user, index) => {\r\n                      if (user.role == \"user\")\r\n                        return (\r\n                          <option key={index} value={user.id}>\r\n                            User id : {user.id} Name :{user.name}\r\n                          </option>\r\n                        );\r\n                    })}\r\n                  </datalist>\r\n                  <ErrorMessage\r\n                    name=\"user_id\"\r\n                    component=\"div\"\r\n                    className=\"invalid-feedback\"\r\n                  />\r\n                </InputGroup>\r\n              </Col>\r\n\r\n              <Col md={6}>\r\n                <Label for=\"discount\">User Name</Label>\r\n                <InputGroup>\r\n                  <select\r\n                    component={CustomInput}\r\n                    type=\"text\"\r\n                    list=\"userdatalist\"\r\n                    name=\"user_name\"\r\n                    id=\"user_name\"\r\n                    placeholder=\"Enter Student Name\"\r\n                    className={\"form-control\"}\r\n                    disabled\r\n                  >\r\n                    {props.users?.map((user, index) => {\r\n                      if (user.id == formProps.values.user_id)\r\n                        return (\r\n                          <option key={index} value={user.name}>\r\n                            {user.name}\r\n                          </option>\r\n                        );\r\n                    })}\r\n                  </select>\r\n                </InputGroup>\r\n              </Col>\r\n            </Row>\r\n\r\n            <Row>\r\n              <Col md={12}>\r\n                <FieldArray\r\n                  name=\"right\"\r\n                  render={(arrayHelpers) => (\r\n                    <div>\r\n                      <Row>\r\n                        <Col md={10}>\r\n                          <FormGroup>\r\n                            <InputGroup>\r\n                              <InputGroupAddon addonType=\"append\">\r\n                                <Button\r\n                                  block\r\n                                  className=\"btn-success\"\r\n                                  disabled={\r\n                                    formProps.values.user_id == \"\" ||\r\n                                    formProps.values.right.length > 0\r\n                                  }\r\n                                  onClick={() => {\r\n                                    let obj = props.right.find((right, i) => {\r\n                                      if (\r\n                                        right.user_id ==\r\n                                        formProps.values.user_id\r\n                                      ) {\r\n                                        arrayHelpers.push(right);\r\n                                      }\r\n                                    });\r\n                                  }}\r\n                                >\r\n                                  Add Rights\r\n                                </Button>\r\n                              </InputGroupAddon>\r\n                            </InputGroup>\r\n                          </FormGroup>\r\n                        </Col>\r\n                      </Row>\r\n                      <Table size=\"sm\" className=\"text-center\">\r\n                        <thead>\r\n                          <tr>\r\n                            <th>Sr No</th>\r\n                            <th>Forms</th>\r\n                            <th>Department</th>\r\n                            <th>View</th>\r\n                            <th>Create</th>\r\n                            <th>Edit</th>\r\n                            <th>Delete</th>\r\n                            <th>Print</th>\r\n                          </tr>\r\n                        </thead>\r\n                        <tbody className=\"text-center\">\r\n                          {console.log(\"values\", formProps?.values?.right)}\r\n                          {formProps?.values?.right?.map((right, index) => {\r\n                            return (\r\n                              <tr key={index} className=\"text-center\">\r\n                                <td>\r\n                                  <th scope=\"row\">{index + 1}</th>\r\n                                </td>\r\n                                <td>\r\n                                  <th scope=\"row\">{right.form?.name}</th>\r\n                                </td>\r\n                                <td>\r\n                                  <th scope=\"row\">\r\n                                    {right.form?.department?.name}\r\n                                  </th>\r\n                                </td>\r\n                                <td>\r\n                                  <Field\r\n                                    component={CustomInput}\r\n                                    type=\"checkbox\"\r\n                                    name={`rights.${index}.view_status`}\r\n                                    id=\"view_status\"\r\n                                    placeholder=\"Enter Marks\"\r\n                                    checked={\r\n                                      right?.view_status == 1 ? true : false\r\n                                    }\r\n                                    onChange={(event) => {\r\n                                      formProps.setFieldValue(\r\n                                        `right.${index}.view_status`,\r\n                                        event.target.value\r\n                                      );\r\n                                    }}\r\n                                    value={right?.view_status == 1 ? \"0\" : \"1\"}\r\n                                  />\r\n                                </td>\r\n                                <td>\r\n                                  <Field\r\n                                    component={CustomInput}\r\n                                    type=\"checkbox\"\r\n                                    name={`right.${index}.create_status`}\r\n                                    id={`right.${index}.create_status`}\r\n                                    checked={\r\n                                      right?.create_status == 1 ? true : false\r\n                                    }\r\n                                    onChange={(event) => {\r\n                                      formProps.setFieldValue(\r\n                                        `right.${index}.create_status`,\r\n                                        event.target.value\r\n                                      );\r\n                                    }}\r\n                                    value={\r\n                                      right?.create_status == 1 ? \"0\" : \"1\"\r\n                                    }\r\n                                  />\r\n                                </td>\r\n\r\n                                <td>\r\n                                  <Field\r\n                                    component={CustomInput}\r\n                                    type=\"checkbox\"\r\n                                    name={`rights.${index}.update_status`}\r\n                                    // id=\"index_update_status\"\r\n                                    checked={\r\n                                      right?.update_status == 1 ? true : false\r\n                                    }\r\n                                    onChange={(event) => {\r\n                                      formProps.setFieldValue(\r\n                                        `right.${index}.update_status`,\r\n                                        event.target.value\r\n                                      );\r\n                                    }}\r\n                                    value={\r\n                                      right?.update_status == 1 ? \"0\" : \"1\"\r\n                                    }\r\n                                  />\r\n                                </td>\r\n\r\n                                <td>\r\n                                  <Field\r\n                                    component={CustomInput}\r\n                                    type=\"checkbox\"\r\n                                    name={`rights.${index}.delete_status`}\r\n                                    id=\"index_delete_status\"\r\n                                    checked={\r\n                                      right?.delete_status == 1 ? true : false\r\n                                    }\r\n                                    onChange={(event) => {\r\n                                      formProps.setFieldValue(\r\n                                        `right.${index}.delete_status`,\r\n                                        event.target.value\r\n                                      );\r\n                                    }}\r\n                                    value={\r\n                                      right?.delete_status == 1 ? \"0\" : \"1\"\r\n                                    }\r\n                                  />\r\n                                </td>\r\n                                <td>\r\n                                  <Field\r\n                                    component={CustomInput}\r\n                                    type=\"checkbox\"\r\n                                    name={`rights.${index}.print_status`}\r\n                                    id=\"index_print_status\"\r\n                                    checked={\r\n                                      right?.print_status == 1 ? true : false\r\n                                    }\r\n                                    onChange={(event) => {\r\n                                      formProps.setFieldValue(\r\n                                        `right.${index}.print_status`,\r\n                                        event.target.value\r\n                                      );\r\n                                    }}\r\n                                    value={right?.print_status == 1 ? \"0\" : \"1\"}\r\n                                  />\r\n                                </td>\r\n                              </tr>\r\n                            );\r\n                          })}\r\n                        </tbody>\r\n                      </Table>\r\n                    </div>\r\n                  )}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <br />\r\n            <Row style={{ justifyContent: \"center\" }}>\r\n              <Col md={4}>\r\n                <Button type=\"reset\" className=\"btn-danger\" block>\r\n                  <b>Reset</b>\r\n                </Button>\r\n              </Col>\r\n              <Col md={4}>\r\n                <Button\r\n                  type=\"submit\"\r\n                  disabled={formProps.isSubmitting}\r\n                  color=\"primary\"\r\n                  block\r\n                >\r\n                  Submit\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    department: state.department.department,\r\n    form: state.form.form,\r\n    prefix: state.prefix.prefix,\r\n    login: state.login,\r\n    page: state.page,\r\n    right: state.right.right,\r\n    users: state.userMaster.userMaster,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onDepartmentGetData: (data) => dispatch(departmentGetData(data)),\r\n    onFormGetData: (data) => dispatch(formGetData(data)),\r\n    onRightGetData: (data) => dispatch(actions.rightGetData(data)),\r\n    onPageGetData: (data) => dispatch(actions.pageGetData(data)),\r\n    updateRightData: (data, user, setSubmitting) =>\r\n      dispatch(actions.updateRightData(data, user, setSubmitting)),\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RightsUserMaster);\r\n","E:\\git vinraj\\NewVinraj\\src\\reduxStore\\actions\\index.js",[],"E:\\git vinraj\\NewVinraj\\src\\reduxStore\\actions\\itemGroupCreator.js",[],"E:\\git vinraj\\NewVinraj\\src\\axios.js",[],"E:\\git vinraj\\NewVinraj\\src\\reduxStore\\actions\\itemUnitsCreator.js",[],"E:\\git vinraj\\NewVinraj\\src\\reduxStore\\actions\\itemNameCreator.js",[],"E:\\git vinraj\\NewVinraj\\src\\reduxStore\\actions\\addUserMasterCreator.js",[],"E:\\git vinraj\\NewVinraj\\src\\reduxStore\\actions\\formCreator.js",[],"E:\\git vinraj\\NewVinraj\\src\\reduxStore\\actions\\departmentCreator.js",[],"E:\\git vinraj\\NewVinraj\\src\\reduxStore\\actions\\accountGroupCreator.js",[],"E:\\git vinraj\\NewVinraj\\src\\reduxStore\\actions\\accountNameCreator.js",[],"E:\\git vinraj\\NewVinraj\\src\\reduxStore\\actions\\prefixCreator.js",[],"E:\\git vinraj\\NewVinraj\\src\\reduxStore\\ConfigureStore.js",[],"E:\\git vinraj\\NewVinraj\\src\\reduxStore\\reducers\\login.js",[],"E:\\git vinraj\\NewVinraj\\src\\reduxStore\\actions\\LoginCreators.js",[],"E:\\git vinraj\\NewVinraj\\src\\shared\\baseUrl.js",[],"E:\\git vinraj\\NewVinraj\\src\\Auth\\Login2.js",[],"E:\\git vinraj\\NewVinraj\\src\\views\\Custom\\CustomInput.js",[],"E:\\git vinraj\\NewVinraj\\src\\Auth\\Signup.js",["540","541"],"import React, { Fragment } from \"react\";\r\nimport {\r\n  Card,\r\n  Button,\r\n  FormGroup,\r\n  InputGroup,\r\n  InputGroupAddon,\r\n  InputGroupText,\r\n  CardBody,\r\n  Row,\r\n  Col,\r\n} from \"reactstrap\";\r\n\r\nimport { Formik, Form, Field, yupToFormErrors } from \"formik\";\r\n\r\nimport CustomInput from \"../views/Custom/CustomInput\";\r\nimport FA from \"react-fontawesome\";\r\nimport { Redirect } from \"react-router\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { postSignup } from \"../reduxStore/actions\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    login: state.login,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  postSignup: (data) => {\r\n    dispatch(postSignup(data));\r\n  },\r\n});\r\n\r\nfunction Signup(props) {\r\n  const handleSubmit = (values, setSubmitting) => {\r\n    let data = {\r\n      name: values.name,\r\n      email: values.email,\r\n      phone: values.phone,\r\n      address: values.address,\r\n      city: values.city,\r\n      state: values.state,\r\n      pincode: values.pincode,\r\n\r\n      password: values.password,\r\n      password_confirmation: values.password_confirmation,\r\n    };\r\n    console.log(data);\r\n    props.postSignup(data);\r\n    setSubmitting(false);\r\n    return;\r\n  };\r\n\r\n  console.log(\"signup data\", props.login?.login);\r\n  console.log(\"error message\", props.login?.errMess);\r\n\r\n  if (props.login?.login.length !== 0) {\r\n    return <Redirect to={\"/\"} />;\r\n  } else if (props.login?.isLoading) {\r\n    //Spinner when service data sending under processing\r\n    return (\r\n      <div\r\n        className=\"col-xs-12 col-sm-12 col-md-5 col-lg-4\"\r\n        style={{\r\n          position: \"absolute\",\r\n          left: \"50%\",\r\n          top: \"50%\",\r\n          transform: \"translate(-50%, -50%)\",\r\n        }}\r\n      >\r\n        <Card className=\"p-5\">\r\n          <CardBody>\r\n            <div\r\n              className=\"spinner-grow text-success col-xs-12 col-sm-12 col-md-5 col-lg-4\"\r\n              style={{\r\n                width: \"3rem\",\r\n                height: \"3rem\",\r\n                position: \"absolute\",\r\n                left: \"50%\",\r\n                top: \"50%\",\r\n                transform: \"translate(-50%, -50%)\",\r\n              }}\r\n              role=\"status\"\r\n            >\r\n              <span className=\"sr-only\">Loading...</span>\r\n            </div>\r\n          </CardBody>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <div\r\n        className=\"col-xs-12 col-sm-12 col-md-8 col-lg-8\"\r\n        style={{\r\n          position: \"absolute\",\r\n          left: \"50%\",\r\n          top: \"50%\",\r\n          transform: \"translate(-50%, -50%)\",\r\n        }}\r\n      >\r\n        <Card>\r\n          <h3 style={{ fontSize: \"4em\", textAlign: \"center\" }} className=\"p-2\">\r\n            Register\r\n          </h3>\r\n\r\n          <Formik\r\n            initialValues={{\r\n              name: \"\",\r\n              email: \"\",\r\n              phone: \"\",\r\n              address: \"\",\r\n              city: \"\",\r\n              state: \"\",\r\n              pincode: \"\",\r\n\r\n              password: \"\",\r\n              password_confirmation: \"\",\r\n            }}\r\n            onSubmit={handleSubmit}\r\n          >\r\n            {(formProps) => (\r\n              <Form>\r\n                <div className=\"p-4  d-flex flex-column \">\r\n                  <Col\r\n                    style={{ display: \"flex\", justifyContent: \"space-evenly\" }}\r\n                  >\r\n                    <FormGroup>\r\n                      <InputGroup size=\"lg\">\r\n                        <InputGroupAddon addonType=\"prepend\">\r\n                          <InputGroupText>\r\n                            <FA name={\"user\"} />\r\n                          </InputGroupText>\r\n                        </InputGroupAddon>\r\n                        <Field\r\n                          component={CustomInput}\r\n                          type=\"name\"\r\n                          name=\"name\"\r\n                          id=\"name\"\r\n                          placeholder=\"Enter Name\"\r\n                        />\r\n                      </InputGroup>\r\n                      <span className=\"text-danger pt-3 text-center\">\r\n                        {props.signup?.errMess\r\n                          ? props.signup?.errMess?.name\r\n                          : null}\r\n                      </span>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                      <InputGroup size=\"lg\">\r\n                        <InputGroupAddon addonType=\"prepend\">\r\n                          <InputGroupText>\r\n                            <FA name={\"envelope-square\"} />\r\n                          </InputGroupText>\r\n                        </InputGroupAddon>\r\n                        <Field\r\n                          component={CustomInput}\r\n                          type=\"email\"\r\n                          name=\"email\"\r\n                          id=\"email\"\r\n                          placeholder=\"Enter Email\"\r\n                        />\r\n                      </InputGroup>\r\n                      <span className=\"text-danger pt-3 text-center\">\r\n                        {props.signup?.errMess\r\n                          ? props.signup?.errMess?.email\r\n                          : null}\r\n                      </span>\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col\r\n                    style={{\r\n                      display: \"flex\",\r\n                      justifyContent: \"space-evenly\",\r\n                    }}\r\n                  >\r\n                    <FormGroup className=\"col-md-10 col-lg-10 col-sm-12\">\r\n                      <InputGroup size=\"lg\">\r\n                        <InputGroupAddon addonType=\"prepend\">\r\n                          <InputGroupText>\r\n                            <FA name={\"address-card\"} />\r\n                          </InputGroupText>\r\n                        </InputGroupAddon>\r\n                        <Field\r\n                          component={CustomInput}\r\n                          type=\"text\"\r\n                          name=\"address\"\r\n                          id=\"address\"\r\n                          placeholder=\"Enter Address\"\r\n                        />\r\n                      </InputGroup>\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col\r\n                    style={{ display: \"flex\", justifyContent: \"space-evenly\" }}\r\n                  >\r\n                    <FormGroup>\r\n                      <InputGroup size=\"lg\">\r\n                        <InputGroupAddon addonType=\"prepend\">\r\n                          <InputGroupText>\r\n                            <FA name={\"building\"} />\r\n                          </InputGroupText>\r\n                        </InputGroupAddon>\r\n                        <Field\r\n                          component={CustomInput}\r\n                          type=\"text\"\r\n                          name=\"city\"\r\n                          id=\"city\"\r\n                          placeholder=\"Enter City Name\"\r\n                        />\r\n                      </InputGroup>\r\n                    </FormGroup>\r\n\r\n                    <FormGroup>\r\n                      <InputGroup size=\"lg\">\r\n                        <InputGroupAddon addonType=\"prepend\">\r\n                          <InputGroupText>\r\n                            <FA name={\"usps\"} />\r\n                          </InputGroupText>\r\n                        </InputGroupAddon>\r\n                        <Field\r\n                          component={CustomInput}\r\n                          type=\"text\"\r\n                          name=\"state\"\r\n                          id=\"state\"\r\n                          placeholder=\"Enter State Name\"\r\n                        />\r\n                      </InputGroup>\r\n                    </FormGroup>\r\n                    {}\r\n                  </Col>\r\n                  <Col\r\n                    style={{ display: \"flex\", justifyContent: \"space-evenly\" }}\r\n                  >\r\n                    <FormGroup>\r\n                      <InputGroup size=\"lg\">\r\n                        <InputGroupAddon addonType=\"prepend\">\r\n                          <InputGroupText>\r\n                            <FA name={\"map-pin\"} />\r\n                          </InputGroupText>\r\n                        </InputGroupAddon>\r\n                        <Field\r\n                          component={CustomInput}\r\n                          type=\"text\"\r\n                          name=\"pincode\"\r\n                          id=\"pincode\"\r\n                          placeholder=\"Enter pincode\"\r\n                        />\r\n                      </InputGroup>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                      <InputGroup size=\"lg\">\r\n                        <InputGroupAddon addonType=\"prepend\">\r\n                          <InputGroupText>\r\n                            <FA name={\"phone-volume\"} />\r\n                          </InputGroupText>\r\n                        </InputGroupAddon>\r\n                        <Field\r\n                          component={CustomInput}\r\n                          type=\"number\"\r\n                          name=\"phone\"\r\n                          id=\"phone\"\r\n                          placeholder=\"Enter phone Number\"\r\n                        />\r\n                      </InputGroup>\r\n                      <span className=\"text-danger pt-3 text-center\">\r\n                        {props.signup?.errMess\r\n                          ? props.signup?.errMess?.phone\r\n                            ? \"The phone must be 10 digits.\"\r\n                            : null\r\n                          : null}\r\n                      </span>\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col\r\n                    style={{ display: \"flex\", justifyContent: \"space-evenly\" }}\r\n                  >\r\n                    <FormGroup>\r\n                      <InputGroup size=\"lg\">\r\n                        <InputGroupAddon addonType=\"prepend\">\r\n                          <InputGroupText>\r\n                            <FA name={\"unlock-alt\"} />\r\n                          </InputGroupText>\r\n                        </InputGroupAddon>\r\n                        <Field\r\n                          component={CustomInput}\r\n                          type=\"password\"\r\n                          name=\"password\"\r\n                          id=\"password\"\r\n                          placeholder=\"Enter Password\"\r\n                        />\r\n                      </InputGroup>\r\n                    </FormGroup>\r\n\r\n                    <FormGroup>\r\n                      <InputGroup size=\"lg\">\r\n                        <InputGroupAddon addonType=\"prepend\">\r\n                          <InputGroupText>\r\n                            <FA name={\"unlock-alt\"} />\r\n                          </InputGroupText>\r\n                        </InputGroupAddon>\r\n                        <Field\r\n                          component={CustomInput}\r\n                          type=\"password\"\r\n                          name=\"password_confirmation\"\r\n                          id=\"password_confirmation\"\r\n                          placeholder=\"Confirm Password\"\r\n                        />\r\n                      </InputGroup>\r\n                    </FormGroup>\r\n                  </Col>\r\n                </div>\r\n                <Col\r\n                  style={{\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                    justifyContent: \"center\",\r\n                    paddingLeft: \"100px\",\r\n                    paddingRight: \"100px\",\r\n                  }}\r\n                >\r\n                  <FormGroup>\r\n                    <span className=\"text-danger pt-3 text-center\">\r\n                      {props.signup?.errMess\r\n                        ? props.signup?.errMess?.message === \"401\"\r\n                          ? \"Wrong Signup credentials\"\r\n                          : props.signup?.errMess?.message\r\n                        : null}\r\n                    </span>\r\n                    <Button\r\n                      color=\"primary\"\r\n                      className=\"\"\r\n                      type=\"submit\"\r\n                      size=\"lg\"\r\n                      block\r\n                      disabled={formProps.isSubmitting}\r\n                    >\r\n                      Register Now\r\n                    </Button>\r\n                  </FormGroup>\r\n                  <FormGroup>\r\n                    <Link to=\"/login\">\r\n                      <Button\r\n                        className=\"btn-warning \"\r\n                        type=\"button\"\r\n                        size=\"lg\"\r\n                        block\r\n                        // disabled={formProps.isSubmitting}\r\n                      >\r\n                        Already User? Login Here\r\n                      </Button>\r\n                    </Link>\r\n                  </FormGroup>\r\n                </Col>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </Card>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Signup);\r\n\r\n// export default Signup2;\r\n","E:\\git vinraj\\NewVinraj\\src\\reduxStore\\actions\\SignupCreators.js",[],"E:\\git vinraj\\NewVinraj\\src\\Components\\Purchase\\Purchase.js",["542","543","544","545"],"/* eslint-disable react-hooks/exhaustive-deps */\r\n/* eslint-disable eqeqeq */\r\n/* eslint-disable array-callback-return */\r\nimport React, { useEffect, useState, Fragment } from \"react\";\r\n\r\nimport Req2 from \"./Req2\";\r\nimport { Card, CardHeader, CardBody } from \"reactstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../reduxStore/actions\";\r\nimport PurchaseRequition from \"./PurchaseRequition\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport Loader2 from \"../loader/Loader2\";\r\nimport ViewPurchaseRequisition from \"./ViewPurchaseRequisiton\";\r\nconst Purchase = (props) => {\r\n  let data = {\r\n    token: props.login?.login?.token,\r\n  };\r\n\r\n  const [deleteStatus, setDeleteStatus] = useState(false);\r\n  const [updateStatus, setUpdateStatus] = useState(false);\r\n  const [createStatus, setCreateStatus] = useState(false);\r\n  const [printStatus, setPrintStatus] = useState(false);\r\n\r\n  useEffect(() => {\r\n    status();\r\n    props.onDepartmentGetData(data);\r\n    props.onFormGetData(data);\r\n  }, []);\r\n\r\n  function status() {\r\n    props.login?.login?.user?.rights?.map((right) => {\r\n      if (right.form_id == 27) {\r\n        if (right.create_status == 1) {\r\n          setCreateStatus(true);\r\n        }\r\n        if (right.update_status == 1) {\r\n          setUpdateStatus(true);\r\n        }\r\n        if (right.delete_status == 1) {\r\n          setDeleteStatus(true);\r\n        }\r\n        if (right.print_status == 1) {\r\n          setPrintStatus(true);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  // console.log(`createStatus`, createStatus);\r\n  // console.log(`updateStatus`, updateStatus);\r\n  // console.log(`deleteStatus`, deleteStatus);\r\n  return (\r\n    <Fragment>\r\n      <Card>\r\n        <CardHeader className=\"bg-warning text-white card-header-sticky d-flex \">\r\n          <strong>Purchase Requisition</strong>\r\n          {createStatus || props.login?.login?.user?.role == \"admin\" ? (\r\n            <>\r\n              {/* <Req2 /> */}\r\n              <PurchaseRequition printStatus={printStatus} />\r\n            </>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </CardHeader>\r\n\r\n        <CardBody>\r\n          <table\r\n            className=\"table table-sm text-center\"\r\n            style={{ fontSize: \"12px\" }}\r\n          >\r\n            <thead className=\"table-sticky\">\r\n              <tr>\r\n                {/* <th>ID</th> */}\r\n\r\n                <th scope=\"col\">Title</th>\r\n                <th scope=\"col\">Rev no</th>\r\n                <th scope=\"col\">Rev Date</th>\r\n                <th scope=\"col\">Date</th>\r\n                <th scope=\"col\">Ref no</th>\r\n                <th scope=\"col\">View</th>\r\n\r\n                {/* <th scope=\"col\">Actions</th> */}\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {props.form?.isLoading ? (\r\n                <tr>\r\n                  <td colSpan={18}>\r\n                    <Loader2 color={\"primary\"} />\r\n                  </td>\r\n                </tr>\r\n              ) : props.form?.form?.length > 0 ? (\r\n                props.form?.form\r\n                  .filter((user) => user.id == 27)\r\n                  .map((user, index) => {\r\n                    return user.form_headers.map((form) => {\r\n                      return (\r\n                        <tr key={index}>\r\n                          <td>{form.title}</td>\r\n                          <td>{form.rev_no}</td>\r\n                          <td>{form.rev_date}</td>\r\n                          <td>{form.date}</td>\r\n                          <td>{form.ref_no}</td>\r\n                          <td>\r\n                            <ViewPurchaseRequisition\r\n                              data={form}\r\n                              formdata={user}\r\n                              printStatus={printStatus}\r\n                            />{\" \"}\r\n                          </td>\r\n                          {/* <td className=\"d-flex justify-content-center\">\r\n                            {updateStatus ||\r\n                              (props.login?.login?.user?.role == \"admin\" && (\r\n                                <EditPurchaseRequisition\r\n                                  data={form}\r\n                                  formdata={user}\r\n                                />\r\n                              ))}\r\n                            {(deleteStatus ||\r\n                              props.login?.login?.user?.role == \"admin\") && (\r\n                              <Button\r\n                                className=\"btn-danger ml-3 p-1\"\r\n                                onClick={() => {\r\n                                  if (\r\n                                    window.confirm(\r\n                                      \"Are you sure you wish to delete this Purchase Requisition?\"\r\n                                    )\r\n                                  )\r\n                                    props.deleteDetails(data);\r\n                                }}\r\n                              >\r\n                                <i\r\n                                  className=\"fa fa-trash-alt \"\r\n                                  value={user.id}\r\n                                  aria-hidden=\"true\"\r\n                                ></i>\r\n                              </Button>\r\n                            )}\r\n                          </td>\r\n                         */}\r\n                        </tr>\r\n                      );\r\n                    });\r\n                  })\r\n              ) : (\r\n                <tr>\r\n                  <td colSpan={3}>No Prefixs</td>\r\n                </tr>\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </CardBody>\r\n      </Card>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    login: state.login,\r\n    form: state.form,\r\n    department: state.department.department,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onDepartmentGetData: (data) => dispatch(actions.departmentGetData(data)),\r\n    onFormGetData: (data) => dispatch(actions.formGetData(data)),\r\n    detailsGetData: (data) => dispatch(actions.detailsGetData(data)),\r\n    deleteDetails: (data) => dispatch(actions.deleteDetails(data)),\r\n    postDetailsData: (data, user, toggle, setSubmitting, setShowTable) =>\r\n      dispatch(\r\n        actions.postDetailsData(data, user, toggle, setSubmitting, setShowTable)\r\n      ),\r\n    updateDetailsData: (data, user, toggle, setSubmitting) =>\r\n      dispatch(actions.updateDetailsData(data, user, toggle, setSubmitting)),\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Purchase);\r\n","E:\\git vinraj\\NewVinraj\\src\\Components\\Purchase\\Req.js",["546","547","548"],"E:\\git vinraj\\NewVinraj\\src\\Components\\Purchase\\Req2.js",["549","550","551","552"],"import React, { useState, Fragment, useEffect } from \"react\";\r\nimport { jsPDF } from \"jspdf\";\r\nimport html2canvas from \"html2canvas\";\r\nimport { Row, Col, Button, Modal, ModalBody, ModalHeader } from \"reactstrap\";\r\nimport printJS from \"print-js\";\r\nconst Req2 = (props) => {\r\n  const [users, setUsers] = useState({\r\n    dept: \"\",\r\n    dino: \"\",\r\n    title: \"\",\r\n    revno: \"\",\r\n    revdate: \"\",\r\n    date: \"\",\r\n    refno: \"\",\r\n    item1: \"\",\r\n\r\n    qty1: \"\",\r\n    remarks1: \"\",\r\n    price1: \"\",\r\n    item2: \"\",\r\n\r\n    qty2: \"\",\r\n    remarks2: \"\",\r\n    price2: \"\",\r\n    item3: \"\",\r\n\r\n    qty3: \"\",\r\n    remarks3: \"\",\r\n    price3: \"\",\r\n    item4: \"\",\r\n\r\n    qty4: \"\",\r\n    remarks4: \"\",\r\n    price4: \"\",\r\n    item5: \"\",\r\n\r\n    qty5: \"\",\r\n    remarks5: \"\",\r\n    price5: \"\",\r\n    item6: \"\",\r\n\r\n    qty6: \"\",\r\n    remarks6: \"\",\r\n    price6: \"\",\r\n    item7: \"\",\r\n\r\n    qty7: \"\",\r\n    remarks7: \"\",\r\n    price7: \"\",\r\n    item8: \"\",\r\n\r\n    qty8: \"\",\r\n    remarks8: \"\",\r\n    price8: \"\",\r\n  });\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setUsers({ ...users, [name]: value });\r\n  };\r\n\r\n  const [modal, setModal] = useState(false);\r\n  const [showtable, setShowTable] = useState(false);\r\n\r\n  const toggle = () => {\r\n    setModal(!modal);\r\n    setShowTable(false);\r\n  };\r\n\r\n  const showtableHandle = () => {\r\n    setShowTable(true);\r\n  };\r\n\r\n  const onClick = () => {\r\n    const divToDisplay = document.getElementById(\"htmlToPdf2\");\r\n    html2canvas(divToDisplay).then(function (canvas) {\r\n      console.log(canvas);\r\n      const imgData = canvas.toDataURL(\"image/png\");\r\n      const pdf = new jsPDF({\r\n        orientation: \"Potrait\",\r\n      });\r\n      const imgProps = pdf.getImageProperties(imgData);\r\n      const pdfWidth = pdf.internal.pageSize.getWidth();\r\n      const pdfHeight = (imgProps.height * pdfWidth) / imgProps.width;\r\n      console.log(pdfHeight, pdfWidth);\r\n      pdf.addImage(imgData, \"PNG\", 1, 1, pdfWidth, pdfHeight);\r\n      pdf.save(\"download.pdf\");\r\n    });\r\n  };\r\n\r\n  const printMutliple = () => {\r\n    console.log(\"print\");\r\n    printJS({\r\n      printable: \"htmlToPdf2\",\r\n      CSS: \"\",\r\n      scanStyles: \"true\",\r\n      type: \"html\",\r\n      targetStyles: \"[*]\",\r\n\r\n      // style: \"@page { size: Letter landscape; }\",\r\n    });\r\n  };\r\n\r\n  console.log(\"users\", users);\r\n\r\n  return (\r\n    <Fragment>\r\n      <div id=\"xyz\">\r\n        <Button\r\n          className=\"btn-success\"\r\n          style={{ position: \"absolute\", top: \"6px\", right: \"15px\" }}\r\n          data-toggle=\"modal\"\r\n          data-target=\"#extraLargeModal\"\r\n          onClick={toggle}\r\n        >\r\n          Add Requistion\r\n        </Button>\r\n        {/* Modal */}\r\n        <Modal className=\"modal-info modal-lg\" isOpen={modal} toggle={toggle}>\r\n          <ModalHeader toggle={toggle}></ModalHeader>\r\n          <ModalBody>\r\n            <form\r\n              onSubmit={(event) => {\r\n                event.preventDefault();\r\n              }}\r\n            >\r\n              {!showtable ? (\r\n                <div className=\"\">\r\n                  <div className=\"\">\r\n                    <div id=\"htmlToPdf\" style={{ marginLeft: \"20px\" }}>\r\n                      <div className=\"\">\r\n                        <div className=\"row\">\r\n                          <div className=\"col-md-4\">\r\n                            <img\r\n                              src=\"https://uditsolutions.in/vinraj.png\"\r\n                              alt=\"\"\r\n                            />\r\n                          </div>\r\n                          <div\r\n                            className=\"col-md-4 ml\"\r\n                            style={{ marginLeft: \"180px\" }}\r\n                          >\r\n                            <th>Dept</th>\r\n                            <td>\r\n                              <input\r\n                                className=\"ml-2\"\r\n                                type=\"text\"\r\n                                size=\"7\"\r\n                                name=\"dept\"\r\n                                onChange={handleInputChange}\r\n                              />\r\n                            </td>\r\n                            <br />\r\n                            <th>Di.No</th>\r\n                            <th>\r\n                              <input\r\n                                className=\"ml-2\"\r\n                                type=\"text\"\r\n                                size=\"7\"\r\n                                name=\"dino\"\r\n                                onChange={handleInputChange}\r\n                              />\r\n                            </th>\r\n                          </div>\r\n                          <hr />\r\n                        </div>\r\n                        <hr />\r\n                        <div className=\"d-flex justify-content-around mb-4\">\r\n                          <div className=\"d-flex\">\r\n                            <th>Tittle</th>\r\n                            <th>\r\n                              <input\r\n                                type=\"text\"\r\n                                className=\"ml-2\"\r\n                                name=\"title\"\r\n                                onChange={handleInputChange}\r\n                              />\r\n                            </th>\r\n                          </div>\r\n                          <div className=\"d-flex\">\r\n                            <th>Rev.no</th>\r\n                            <th>\r\n                              <input\r\n                                type=\"text\"\r\n                                size=\"5\"\r\n                                className=\"ml-2\"\r\n                                name=\"revno\"\r\n                                onChange={handleInputChange}\r\n                              />\r\n                            </th>\r\n                          </div>\r\n                          <div className=\"d-flex\">\r\n                            <th>Rev.Date</th>\r\n                            <th>\r\n                              <input\r\n                                type=\"date\"\r\n                                className=\"ml-2\"\r\n                                name=\"revdate\"\r\n                                onChange={handleInputChange}\r\n                              />\r\n                            </th>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div>\r\n                        <div className=\"d-flex justify-content-around mb-4\">\r\n                          <div className=\"d-flex\">\r\n                            <label>Date</label>{\" \"}\r\n                            <input\r\n                              type=\"date\"\r\n                              className=\"ml-2\"\r\n                              name=\"date\"\r\n                              onChange={handleInputChange}\r\n                            />{\" \"}\r\n                          </div>\r\n                          <div className=\"d-flex\">\r\n                            <label style={{ marginLeft: \"110px\" }}>\r\n                              Ref No\r\n                            </label>{\" \"}\r\n                            <input\r\n                              type=\"text\"\r\n                              className=\"ml-2\"\r\n                              name=\"refno\"\r\n                              onChange={handleInputChange}\r\n                            />\r\n                          </div>\r\n                          {/* <div>\r\n                        <label style={{ marginLeft: \"110px\" }}></label>{\" \"}\r\n                        <input type=\"text\" className=\"ml-2\" />\r\n                      </div> */}\r\n                        </div>\r\n                        <hr />\r\n                        <table className=\"table\">\r\n                          <thead>\r\n                            <tr>\r\n                              <th>Item name</th>\r\n                              <th>Required Qty</th>\r\n                              <th>Remarks</th>\r\n                              <th>Approx price</th>\r\n                            </tr>\r\n                          </thead>\r\n                          <tbody>\r\n                            <tr>\r\n                              <td>\r\n                                <input\r\n                                  type=\"text\"\r\n                                  name=\"item1\"\r\n                                  onChange={handleInputChange}\r\n                                />\r\n                              </td>\r\n                              <td style={{ marginLeft: \"10px\" }}>\r\n                                <input\r\n                                  type=\"text\"\r\n                                  size=\"4\"\r\n                                  name=\"qty1\"\r\n                                  onChange={handleInputChange}\r\n                                />\r\n                              </td>\r\n                              <td>\r\n                                <input\r\n                                  type=\"text\"\r\n                                  size=\"\"\r\n                                  name=\"remarks1\"\r\n                                  onChange={handleInputChange}\r\n                                />\r\n                              </td>\r\n                              <td>\r\n                                <input\r\n                                  type=\"text\"\r\n                                  size=\"4\"\r\n                                  name=\"price1\"\r\n                                  onChange={handleInputChange}\r\n                                />\r\n                              </td>\r\n                            </tr>\r\n                            {/*  */}\r\n                            <tr>\r\n                              <td>\r\n                                <input\r\n                                  type=\"text\"\r\n                                  name=\"item2\"\r\n                                  onChange={handleInputChange}\r\n                                />\r\n                              </td>\r\n                              <td style={{ marginLeft: \"10px\" }}>\r\n                                <input\r\n                                  type=\"text\"\r\n                                  size=\"4\"\r\n                                  name=\"qty2\"\r\n                                  onChange={handleInputChange}\r\n                                />\r\n                              </td>\r\n                              <td>\r\n                                <input\r\n                                  type=\"text\"\r\n                                  size=\"\"\r\n                                  name=\"remarks2\"\r\n                                  onChange={handleInputChange}\r\n                                />\r\n                              </td>\r\n                              <td>\r\n                                <input\r\n                                  type=\"text\"\r\n                                  size=\"4\"\r\n                                  name=\"price2\"\r\n                                  onChange={handleInputChange}\r\n                                />\r\n                              </td>\r\n                            </tr>\r\n                            <tr>\r\n                              <td>\r\n                                <input\r\n                                  type=\"text\"\r\n                                  name=\"item3\"\r\n                                  onChange={handleInputChange}\r\n                                />\r\n                              </td>\r\n                              <td style={{ marginLeft: \"10px\" }}>\r\n                                <input\r\n                                  type=\"text\"\r\n                                  size=\"4\"\r\n                                  name=\"qty3\"\r\n                                  onChange={handleInputChange}\r\n                                />\r\n                              </td>\r\n                              <td>\r\n                                <input\r\n                                  type=\"text\"\r\n                                  size=\"\"\r\n                                  name=\"remarks3\"\r\n                                  onChange={handleInputChange}\r\n                                />\r\n                              </td>\r\n                              <td>\r\n                                <input\r\n                                  type=\"text\"\r\n                                  size=\"4\"\r\n                                  name=\"price3\"\r\n                                  onChange={handleInputChange}\r\n                                />\r\n                              </td>\r\n                            </tr>\r\n                            <tr>\r\n                              <td>\r\n                                <input\r\n                                  type=\"text\"\r\n                                  name=\"item4\"\r\n                                  onChange={handleInputChange}\r\n                                />\r\n                              </td>\r\n                              <td style={{ marginLeft: \"10px\" }}>\r\n                                <input\r\n                                  type=\"text\"\r\n                                  size=\"4\"\r\n                                  name=\"qty4\"\r\n                                  onChange={handleInputChange}\r\n                                />\r\n                              </td>\r\n                              <td>\r\n                                <input\r\n                                  type=\"text\"\r\n                                  size=\"\"\r\n                                  name=\"remarks4\"\r\n                                  onChange={handleInputChange}\r\n                                />\r\n                              </td>\r\n                              <td>\r\n                                <input\r\n                                  type=\"text\"\r\n                                  size=\"4\"\r\n                                  name=\"price4\"\r\n                                  onChange={handleInputChange}\r\n                                />\r\n                              </td>\r\n                            </tr>\r\n                            <tr>\r\n                              <td>\r\n                                <input\r\n                                  type=\"text\"\r\n                                  name=\"item5\"\r\n                                  onChange={handleInputChange}\r\n                                />\r\n                              </td>\r\n                              <td style={{ marginLeft: \"10px\" }}>\r\n                                <input\r\n                                  type=\"text\"\r\n                                  size=\"4\"\r\n                                  name=\"qty5\"\r\n                                  onChange={handleInputChange}\r\n                                />\r\n                              </td>\r\n                              <td>\r\n                                <input\r\n                                  type=\"text\"\r\n                                  size=\"\"\r\n                                  name=\"remarks5\"\r\n                                  onChange={handleInputChange}\r\n                                />\r\n                              </td>\r\n                              <td>\r\n                                <input\r\n                                  type=\"text\"\r\n                                  size=\"4\"\r\n                                  name=\"price5\"\r\n                                  onChange={handleInputChange}\r\n                                />\r\n                              </td>\r\n                            </tr>\r\n                            <tr>\r\n                              <td>\r\n                                <input\r\n                                  type=\"text\"\r\n                                  name=\"item6\"\r\n                                  onChange={handleInputChange}\r\n                                />\r\n                              </td>\r\n                              <td style={{ marginLeft: \"10px\" }}>\r\n                                <input\r\n                                  type=\"text\"\r\n                                  size=\"4\"\r\n                                  name=\"qty6\"\r\n                                  onChange={handleInputChange}\r\n                                />\r\n                              </td>\r\n                              <td>\r\n                                <input\r\n                                  type=\"text\"\r\n                                  size=\"\"\r\n                                  name=\"remarks6\"\r\n                                  onChange={handleInputChange}\r\n                                />\r\n                              </td>\r\n                              <td>\r\n                                <input\r\n                                  type=\"text\"\r\n                                  size=\"4\"\r\n                                  name=\"price6\"\r\n                                  onChange={handleInputChange}\r\n                                />\r\n                              </td>\r\n                            </tr>\r\n                            <tr>\r\n                              <td>\r\n                                <input\r\n                                  type=\"text\"\r\n                                  name=\"item7\"\r\n                                  onChange={handleInputChange}\r\n                                />\r\n                              </td>\r\n                              <td style={{ marginLeft: \"10px\" }}>\r\n                                <input\r\n                                  type=\"text\"\r\n                                  size=\"4\"\r\n                                  name=\"qty7\"\r\n                                  onChange={handleInputChange}\r\n                                />\r\n                              </td>\r\n                              <td>\r\n                                <input\r\n                                  type=\"text\"\r\n                                  size=\"\"\r\n                                  name=\"remarks7\"\r\n                                  onChange={handleInputChange}\r\n                                />\r\n                              </td>\r\n                              <td>\r\n                                <input\r\n                                  type=\"text\"\r\n                                  size=\"4\"\r\n                                  name=\"price7\"\r\n                                  onChange={handleInputChange}\r\n                                />\r\n                              </td>\r\n                            </tr>\r\n                            <tr>\r\n                              <td>\r\n                                <input\r\n                                  type=\"text\"\r\n                                  name=\"item8\"\r\n                                  onChange={handleInputChange}\r\n                                />\r\n                              </td>\r\n                              <td style={{ marginLeft: \"10px\" }}>\r\n                                <input\r\n                                  type=\"text\"\r\n                                  size=\"4\"\r\n                                  name=\"qty8\"\r\n                                  onChange={handleInputChange}\r\n                                />\r\n                              </td>\r\n                              <td>\r\n                                <input\r\n                                  type=\"text\"\r\n                                  size=\"\"\r\n                                  name=\"remarks8\"\r\n                                  onChange={handleInputChange}\r\n                                />\r\n                              </td>\r\n                              <td>\r\n                                <input\r\n                                  type=\"text\"\r\n                                  size=\"4\"\r\n                                  name=\"price8\"\r\n                                  onChange={handleInputChange}\r\n                                />\r\n                              </td>\r\n                            </tr>\r\n                          </tbody>\r\n                        </table>\r\n                      </div>\r\n\r\n                      {/*  */}\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"modal-footer\">\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn btn-secondary\"\r\n                      data-dismiss=\"modal\"\r\n                      onClick={toggle}\r\n                    >\r\n                      Cancel\r\n                    </button>\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn btn-primary\"\r\n                      onClick={showtableHandle}\r\n                    >\r\n                      OK\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                <div className=\"\">\r\n                  <div className=\"\">\r\n                    <div id=\"htmlToPdf2\" style={{ marginLeft: \"20px\" }}>\r\n                      <div className=\"\">\r\n                        <div className=\"row\">\r\n                          <div className=\"col-md-4\">\r\n                            <img\r\n                              src=\"https://uditsolutions.in/vinraj.png\"\r\n                              alt=\"\"\r\n                            />\r\n                          </div>\r\n                          <div\r\n                            className=\"col-md-4 ml\"\r\n                            style={{ marginLeft: \"180px\" }}\r\n                          >\r\n                            {users.dept && (\r\n                              <div className=\"d-flex\">\r\n                                <th>Dept</th>\r\n                                <td className=\"ml-2\">{users.dept}</td>\r\n                              </div>\r\n                            )}\r\n\r\n                            <br />\r\n\r\n                            {users.dino && (\r\n                              <div className=\"d-flex\">\r\n                                <th>Di.No</th>\r\n\r\n                                <td className=\"ml-2\">{users.dino}</td>\r\n                              </div>\r\n                            )}\r\n                          </div>\r\n                          <hr />\r\n                        </div>\r\n                        <hr />\r\n                        <div className=\"d-flex justify-content-around mb-4\">\r\n                          {users.title && (\r\n                            <div className=\"d-flex\">\r\n                              <th>Tittle</th>\r\n\r\n                              <td className=\"ml-2\">{users.title}</td>\r\n                            </div>\r\n                          )}\r\n\r\n                          {users.revno && (\r\n                            <div className=\"d-flex\">\r\n                              <th>Rev.no</th>\r\n\r\n                              <td className=\"ml-2\">{users.revno}</td>\r\n                            </div>\r\n                          )}\r\n\r\n                          {users.revdate && (\r\n                            <div className=\"d-flex\">\r\n                              <th>Rev.Date</th>\r\n\r\n                              <td className=\"ml-2\">{users.revdate}</td>\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                      <div>\r\n                        <div className=\"d-flex justify-content-around mb-4\">\r\n                          {users.date && (\r\n                            <div className=\"d-flex\">\r\n                              <label>Date</label>{\" \"}\r\n                              <td className=\"ml-2\">{users.date}</td>\r\n                            </div>\r\n                          )}\r\n\r\n                          {users.refno && (\r\n                            <div className=\"d-flex\">\r\n                              <label style={{ marginLeft: \"110px\" }}>\r\n                                Ref No\r\n                              </label>{\" \"}\r\n                              <td className=\"ml-2\">{users.refno}</td>\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                        <hr />\r\n                        <table className=\"table\">\r\n                          <thead>\r\n                            <tr>\r\n                              <th>Item name</th>\r\n                              <th>Required Qty</th>\r\n                              <th>Remarks</th>\r\n                              <th>Approx price</th>\r\n                            </tr>\r\n                          </thead>\r\n                          <tbody>\r\n                            <tr>\r\n                              {users.item1 && <td>{users.item1}</td>}\r\n                              {users.qty1 && (\r\n                                <td style={{ marginLeft: \"10px\" }}>\r\n                                  {users.qty1}\r\n                                </td>\r\n                              )}\r\n                              {users.remarks1 && <td>{users.remarks1}</td>}\r\n                              {users.price1 && <td>{users.price1}</td>}\r\n                            </tr>\r\n                            {/*  */}\r\n                            <tr>\r\n                              {users.item2 && <td>{users.item2}</td>}\r\n                              {users.qty2 && (\r\n                                <td style={{ marginLeft: \"10px\" }}>\r\n                                  {users.qty2}\r\n                                </td>\r\n                              )}\r\n                              {users.remarks2 && <td>{users.remarks2}</td>}\r\n                              {users.price2 && <td>{users.price2}</td>}\r\n                            </tr>\r\n                            <tr>\r\n                              {users.item3 && <td>{users.item3}</td>}\r\n                              {users.qty3 && (\r\n                                <td style={{ marginLeft: \"10px\" }}>\r\n                                  {users.qty3}\r\n                                </td>\r\n                              )}\r\n                              {users.remarks3 && <td>{users.remarks3}</td>}\r\n                              {users.price3 && <td>{users.price3}</td>}\r\n                            </tr>\r\n                            <tr>\r\n                              {users.item4 && <td>{users.item4}</td>}\r\n                              {users.qty4 && (\r\n                                <td style={{ marginLeft: \"9px\" }}>\r\n                                  {users.qty4}\r\n                                </td>\r\n                              )}\r\n                              {users.remarks4 && <td>{users.remarks4}</td>}\r\n                              {users.price4 && <td>{users.price4}</td>}\r\n                            </tr>\r\n                            <tr>\r\n                              {users.item5 && <td>{users.item5}</td>}\r\n                              {users.qty5 && (\r\n                                <td style={{ marginLeft: \"9px\" }}>\r\n                                  {users.qty5}\r\n                                </td>\r\n                              )}\r\n                              {users.remarks5 && <td>{users.remarks5}</td>}\r\n                              {users.price5 && <td>{users.price5}</td>}\r\n                            </tr>\r\n                            <tr>\r\n                              {users.item6 && <td>{users.item6}</td>}\r\n                              {users.qty6 && (\r\n                                <td style={{ marginLeft: \"9px\" }}>\r\n                                  {users.qty6}\r\n                                </td>\r\n                              )}\r\n                              {users.remarks6 && <td>{users.remarks6}</td>}\r\n                              {users.price6 && <td>{users.price6}</td>}\r\n                            </tr>\r\n                            <tr>\r\n                              {users.item7 && <td>{users.item7}</td>}\r\n                              {users.qty7 && (\r\n                                <td style={{ marginLeft: \"9px\" }}>\r\n                                  {users.qty7}\r\n                                </td>\r\n                              )}\r\n                              {users.remarks7 && <td>{users.remarks7}</td>}\r\n                              {users.price7 && <td>{users.price7}</td>}\r\n                            </tr>\r\n                            <tr>\r\n                              {users.item8 && <td>{users.item8}</td>}\r\n                              {users.qty8 && (\r\n                                <td style={{ marginLeft: \"9px\" }}>\r\n                                  {users.qty8}\r\n                                </td>\r\n                              )}\r\n                              {users.remarks8 && <td>{users.remarks8}</td>}\r\n                              {users.price8 && <td>{users.price8}</td>}\r\n                            </tr>\r\n                          </tbody>\r\n                        </table>\r\n                      </div>\r\n\r\n                      {/*  */}\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"modal-footer\">\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn btn-secondary\"\r\n                      data-dismiss=\"modal\"\r\n                      onClick={() => setModal(false)}\r\n                    >\r\n                      Cancel\r\n                    </button>\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn btn-primary\"\r\n                      onClick={printMutliple}\r\n                    >\r\n                      save as pdf\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </form>\r\n          </ModalBody>\r\n        </Modal>\r\n      </div>\r\n      {/* <button onClick={onClick}>save as pdf</button> */}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Req2;\r\n","E:\\git vinraj\\NewVinraj\\src\\Components\\htmltopdf\\htmltopdf.js",[],["553","554"],"E:\\git vinraj\\NewVinraj\\src\\Components\\Purchase\\PurchaseOrder.js",["555","556","557","558","559","560","561"],"E:\\git vinraj\\NewVinraj\\src\\Components\\ExcelFile\\ExportCSV.js",[],"E:\\git vinraj\\NewVinraj\\src\\layout\\Layout.js",[],"E:\\git vinraj\\NewVinraj\\src\\routes\\routes.js",[],"E:\\git vinraj\\NewVinraj\\src\\layout\\header\\Header.js",["562"],"import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button } from \"reactstrap\";\r\nimport { removeLogin } from \"../../reduxStore/actions\";\r\n\r\nexport default function Header() {\r\n  const dispatch = useDispatch();\r\n\r\n  async function handleLogout() {\r\n    dispatch(removeLogin());\r\n  }\r\n\r\n  return (\r\n    <nav\r\n      className=\"main-header navbar navbar-expand navbar-white navbar-light\"\r\n      style={{ position: \"sticky\", top: \"0\" }}\r\n    >\r\n      {/* Left navbar links */}\r\n      <ul className=\"navbar-nav d-flex justify-content-between\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link\" data-widget=\"pushmenu\" href=\"/\" role=\"button\">\r\n            <i className=\"fas fa-bars\" />\r\n          </a>\r\n        </li>\r\n        {/* <li className=\"nav-item d-none d-sm-inline-block\">\r\n          <Link to=\"/\" className=\"nav-link\">\r\n            Home\r\n          </Link>\r\n        </li> */}\r\n        <li\r\n          className=\"nav-item d-none d-sm-inline-block float-right\"\r\n          onClick={() => handleLogout()}\r\n          style={{ position: \"absolute\", top: \"10px\", right: \"20px\" }}\r\n        >\r\n          <Button className=\"btn-danger\">Logout</Button>\r\n        </li>\r\n      </ul>\r\n      {/* SEARCH FORM */}\r\n    </nav>\r\n  );\r\n}\r\n","E:\\git vinraj\\NewVinraj\\src\\Components\\Loader.js",[],"E:\\git vinraj\\NewVinraj\\src\\Components\\Dashboard\\DashboardLayout.js",["563","564"],"import React, { Fragment, useState } from \"react\";\r\nimport { Row, Col } from \"reactstrap\";\r\nimport Top from \"./starter/Top\";\r\n\r\nfunction DashboardLayout(props) {\r\n  return (\r\n    <Fragment>\r\n      <Row>\r\n        <Col className=\"mt-4\">{/* <Top {...props} /> */}</Col>\r\n      </Row>\r\n      <Row>\r\n        {/* <Col sm={6} lg={8}>\r\n                    <BookingSummary />\r\n                  </Col> */}\r\n      </Row>\r\n      <Row>\r\n        <Col sm={12}></Col>\r\n      </Row>\r\n      <Row>\r\n        <Col sm={12}></Col>\r\n      </Row>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default DashboardLayout;\r\n","E:\\git vinraj\\NewVinraj\\src\\Components\\Dashboard\\starter\\Top.js",[],"E:\\git vinraj\\NewVinraj\\src\\reduxStore\\actions\\PageCreators.js",[],"E:\\git vinraj\\NewVinraj\\src\\reduxStore\\actions\\RightsCreators.js",[],"E:\\git vinraj\\NewVinraj\\src\\reduxStore\\reducers\\RRights.js",[],"E:\\git vinraj\\NewVinraj\\src\\reduxStore\\reducers\\RPage.js",[],"E:\\git vinraj\\NewVinraj\\src\\Components\\User&Pass\\rights2.js",["565","566"],"/* eslint-disable react-hooks/exhaustive-deps */\r\n\r\nimport React, { Fragment, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { departmentGetData, formGetData } from \"../../reduxStore/actions\";\r\nimport * as actions from \"../../reduxStore/actions\";\r\n\r\nfunction RightsUserMaster(props) {\r\n  let data = {\r\n    token: props.login?.login?.token,\r\n  };\r\n\r\n  useEffect(() => {\r\n    props.onDepartmentGetData(data);\r\n    props.onFormGetData(data);\r\n    props.onRightGetData(data);\r\n    props.onPageGetData(data);\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n  //   axios\r\n  //     .get(\"https://uditsolutions.in/vinrajbackend/public/api/forms\")\r\n  //     .then((res) => {\r\n  //       console.log(res.data, \"department res\");\r\n  //       setForm(res.data);\r\n  //     })\r\n\r\n  //     .catch((error) => console.log(error));\r\n  // }, []);\r\n\r\n  return (\r\n    <Fragment>\r\n      <div>\r\n        <label className=\"form-control\">\r\n          Search the user by name or phone number\r\n        </label>\r\n        <input type=\"search\" className=\"form-control\" />{\" \"}\r\n        <button className=\"btn btn-primary mt-3 mb-3\">Search</button>\r\n        <table className=\"table\" style={{ fontSize: \"12px\" }}>\r\n          <thead className=\"thead-dark\">\r\n            <tr>\r\n              <th scope=\"col\">Roles</th>\r\n              <th scope=\"col\">create</th>\r\n              <th scope=\"col\">edit</th>\r\n              <th scope=\"col\">view</th>\r\n              <th scope=\"col\">details</th>\r\n            </tr>\r\n          </thead>\r\n          {props.department.map((dep) => (\r\n            <tbody>\r\n              <h6 className=\"mt-3\">{dep.name}</h6>\r\n              {props.form.map((form) => {\r\n                if (dep.id == form.department_id) {\r\n                  return (\r\n                    <tr>\r\n                      <th scope=\"row\">{form.name}</th>\r\n                      <td>\r\n                        <input type=\"checkbox\" />\r\n                      </td>\r\n                      <td>\r\n                        <input type=\"checkbox\" />\r\n                      </td>\r\n                      <td>\r\n                        <input type=\"checkbox\" />\r\n                      </td>\r\n                      <td>\r\n                        <input type=\"checkbox\" />\r\n                      </td>\r\n                      {/* <td> <button className=\"btn btn-primary\">save</button></td> */}\r\n                    </tr>\r\n                  );\r\n                }\r\n              })}\r\n            </tbody>\r\n          ))}\r\n        </table>\r\n        <th scope=\"col\">\r\n          <button className=\"btn btn-primary\"> save</button>{\" \"}\r\n        </th>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    department: state.department.department,\r\n    form: state.form.form,\r\n    prefix: state.prefix.prefix,\r\n    login: state.login,\r\n    page: state.page,\r\n    right: state.right,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onDepartmentGetData: (data) => dispatch(departmentGetData(data)),\r\n    onFormGetData: (data) => dispatch(formGetData(data)),\r\n    onRightGetData: (data) => dispatch(actions.rightGetData(data)),\r\n    onPageGetData: (data) => dispatch(actions.pageGetData(data)),\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RightsUserMaster);\r\n","E:\\git vinraj\\NewVinraj\\src\\views\\Custom\\MyCheckbox.js",[],"E:\\git vinraj\\NewVinraj\\src\\views\\Custom\\CustomSelect.js",[],"E:\\git vinraj\\NewVinraj\\src\\routes\\userRoutes.js",["567"],"import React from \"react\";\r\nimport rights2 from \"../Components/User&Pass/rights2\";\r\nimport Layout from \"../layout/Layout\";\r\n\r\nconst Dashboard = React.lazy(() =>\r\n  import(\"../Components/Dashboard/DashboardLayout\")\r\n);\r\nconst UserMaster = React.lazy(() =>\r\n  import(\"../Components/User&Pass/UserMaster\")\r\n);\r\n\r\nconst Department = React.lazy(() =>\r\n  import(\"../Components/Master/PrefixMaster/Department/Department\")\r\n);\r\nconst PrefixForm = React.lazy(() =>\r\n  import(\"../Components/Master/PrefixMaster/Form/PrefixForm\")\r\n);\r\nconst Prefix = React.lazy(() =>\r\n  import(\"../Components/Master/PrefixMaster/Prefix/NewPrefix\")\r\n);\r\nconst AccountName = React.lazy(() =>\r\n  import(\"../Components/Master/AccountMaster/AccountName/AccountName\")\r\n);\r\nconst AccountGroup = React.lazy(() =>\r\n  import(\"../Components/Master/AccountMaster/AccountGroup/AccountGroup\")\r\n);\r\nconst ItemName = React.lazy(() =>\r\n  import(\"../Components/Master/ItemMaster/ItemName/ItemName\")\r\n);\r\nconst ItemGroup = React.lazy(() =>\r\n  import(\"../Components/Master/ItemMaster/ItemGroup/ItemGroup\")\r\n);\r\nconst ItemUnits = React.lazy(() =>\r\n  import(\"../Components/Master/ItemMaster/ItemUnits/ItemUnits\")\r\n);\r\nconst Purchase = React.lazy(() => import(\"../Components/Purchase/Purchase\"));\r\n\r\nconst EquipmentValidationReport = React.lazy(() =>\r\n  import(\"../Components/Maintaince/EquipmentValidationReport\")\r\n);\r\n\r\nconst PreventiveMaintenancePlan = React.lazy(() =>\r\n  import(\"../Components/Maintaince/PreventiveMaintenancePlan\")\r\n);\r\n\r\nconst MachineryAndEquipmentMmanualList = React.lazy(() =>\r\n  import(\"../Components/Maintaince/MachineryAndEquipmentMmanualList\")\r\n);\r\n\r\nconst BreakdownMaintenance = React.lazy(() =>\r\n  import(\"../Components/Maintaince/BreakdownMaintenance\")\r\n);\r\n\r\nconst ListOfSuppliersForMaintenanceActivities = React.lazy(() =>\r\n  import(\"../Components/Maintaince/ListOfSuppliersForMaintenanceActivities\")\r\n);\r\n\r\nconst MaintenanceCleanlinessChecklist = React.lazy(() =>\r\n  import(\"../Components/Maintaince/MaintenanceCleanlinessChecklist\")\r\n);\r\n\r\nconst PreventiveMaintenanceSchedule = React.lazy(() =>\r\n  import(\"../Components/Maintaince/PreventiveMaintenanceSchedule\")\r\n);\r\n\r\nconst PreventiveMaintenanceRecord = React.lazy(() =>\r\n  import(\"../Components/Maintaince/PreventiveMaintenanceRecord\")\r\n);\r\n\r\nconst PreventiveMaintenanceAnalysisReport = React.lazy(() =>\r\n  import(\"../Components/Maintaince/PreventiveMaintenanceAnalysisReport\")\r\n);\r\n\r\nconst BreakdownMaintenanceRecord = React.lazy(() =>\r\n  import(\"../Components/Maintaince/BreakdownMaintenanceRecord\")\r\n);\r\n\r\nconst BreakdownMaintenanceAnalysisRecord = React.lazy(() =>\r\n  import(\"../Components/Maintaince/BreakdownMaintenanceAnalysisRecord\")\r\n);\r\n\r\nconst ProductionPlanningCf = React.lazy(() =>\r\n  import(\"../Components/Production/ProductionPlanningCf\")\r\n);\r\n\r\nconst ProductionReportCf = React.lazy(() =>\r\n  import(\"../Components/Production/ProductionReportCf\")\r\n);\r\n\r\nconst StockReportCf = React.lazy(() =>\r\n  import(\"../Components/Production/StockReportCf\")\r\n);\r\n\r\nconst ProcessParametersCf = React.lazy(() =>\r\n  import(\"../Components/Production/ProcessParametersCf\")\r\n);\r\n\r\nconst ProductionPlanningVf = React.lazy(() =>\r\n  import(\"../Components/Production/ProductionPlanningVf\")\r\n);\r\n\r\nconst ProductionReportVf = React.lazy(() =>\r\n  import(\"../Components/Production/ProductionReportVf\")\r\n);\r\n\r\nconst StockReportVf = React.lazy(() =>\r\n  import(\"../Components/Production/StockReportVf\")\r\n);\r\n\r\nconst SuppilierPerformanceMonitiringRecord = React.lazy(() =>\r\n  import(\"../Components/Purchase/SuppilierPerformanceMonitiringRecord\")\r\n);\r\n\r\nconst AuthorizedSupplierList = React.lazy(() =>\r\n  import(\"../Components/Purchase/AuthorizedSupplierList\")\r\n);\r\n\r\nconst IncomingMaterialTestingRecord = React.lazy(() =>\r\n  import(\"../Components/QMS/IncomingMaterialTestingRecord\")\r\n);\r\n\r\nconst CustomerComplaintRecord = React.lazy(() =>\r\n  import(\"../Components/QMS/CustomerComplaintRecord\")\r\n);\r\n\r\nconst CustomerComplaintReport = React.lazy(() =>\r\n  import(\"../Components/QMS/CustomerComplaintReport\")\r\n);\r\n\r\nconst Capa = React.lazy(() => import(\"../Components/QMS/Capa\"));\r\n\r\nconst ProductionMa = React.lazy(() => import(\"../Components/QMS/ProductionMa\"));\r\n\r\nconst EnquiryForm = React.lazy(() => import(\"../Components/Sales/EnquiryForm\"));\r\n\r\nconst CustomerRegistrationForm = React.lazy(() =>\r\n  import(\"../Components/Sales/CustomerRegistrationForm\")\r\n);\r\n\r\nconst Quotation = React.lazy(() => import(\"../Components/Sales/Quotation\"));\r\n\r\nconst SalesTargetPlanVsActual = React.lazy(() =>\r\n  import(\"../Components/Sales/SalesTargetPlanVsActual\")\r\n);\r\n\r\nconst CustomerFeedback = React.lazy(() =>\r\n  import(\"../Components/Sales/CustomerFeedback\")\r\n);\r\n\r\nconst FeasibilityReport = React.lazy(() =>\r\n  import(\"../Components/Sales/FeasibilityReport\")\r\n);\r\n\r\nconst PurchaseRequisition = React.lazy(() =>\r\n  import(\"../Components/Stores/PurchaseRequisition\")\r\n);\r\n\r\nconst IncomingMaterialInspectionChecklist = React.lazy(() =>\r\n  import(\"../Components/Stores/IncomingMaterialInspectionChecklist\")\r\n);\r\n\r\nconst StockRegister = React.lazy(() =>\r\n  import(\"../Components/Stores/StockRegister\")\r\n);\r\n\r\nconst ListOfShelfLifeOfItems = React.lazy(() =>\r\n  import(\"../Components/Stores/PurchaseRequisition\")\r\n);\r\n\r\nconst RecordOfDisposalOfShelfOfItems = React.lazy(() =>\r\n  import(\"../Components/Stores/RecordOfDisposalOfShelfOfItems\")\r\n);\r\n\r\nconst userRoutes = [\r\n  { path: \"/\", exact: true, name: \"Home\", component: Layout },\r\n  { path: \"/dashboard\", exact: true, name: \"Dashboard\", component: Dashboard },\r\n  //   {\r\n  //     path: \"/user-master\",\r\n  //     exact: true,\r\n  //     name: \"UserMasters\",\r\n  //     component: UserMaster,\r\n  //   },\r\n  { path: \"/department\", exact: true, name: \"Options\", component: Department },\r\n  { path: \"/form\", exact: true, name: \"Marking\", component: PrefixForm },\r\n  { path: \"/prefix\", exact: true, name: \"Run\", component: Prefix },\r\n  { path: \"/right\", exact: true, name: \"Run\", component: rights2 },\r\n  { path: \"/account-name\", exact: true, name: \"Users\", component: AccountName },\r\n  {\r\n    path: \"/account-group\",\r\n    exact: true,\r\n    name: \"Faculty\",\r\n    component: AccountGroup,\r\n  },\r\n  { path: \"/item-name\", exact: true, name: \"Results\", component: ItemName },\r\n  { path: \"/item-group\", exact: true, name: \"Category\", component: ItemGroup },\r\n  {\r\n    path: \"/item-units\",\r\n    exact: true,\r\n    name: \"SubCategory\",\r\n    component: ItemUnits,\r\n  },\r\n\r\n  //  maintentaince start\r\n  {\r\n    path: \"/preventive-maintenance-plan\",\r\n    exact: true,\r\n    name: \"PreventiveMaintenancePlan\",\r\n    component: PreventiveMaintenancePlan,\r\n  },\r\n  {\r\n    path: \"/equipment-validation-report\",\r\n    exact: true,\r\n    name: \"EquipmentValidationReport\",\r\n    component: EquipmentValidationReport,\r\n  },\r\n\r\n  {\r\n    path: \"/machinery-and-equipment-manual-list\",\r\n    exact: true,\r\n    name: \"MachineryAndEquipmentMmanualList\",\r\n    component: MachineryAndEquipmentMmanualList,\r\n  },\r\n\r\n  {\r\n    path: \"/breakdown-maintenance\",\r\n    exact: true,\r\n    name: \"BreakdownMaintenance\",\r\n    component: BreakdownMaintenance,\r\n  },\r\n  {\r\n    path: \"/list-of-suppliers-for-maintenance-activities\",\r\n    exact: true,\r\n    name: \"ListOfSuppliersForMaintenanceActivities\",\r\n    component: ListOfSuppliersForMaintenanceActivities,\r\n  },\r\n  {\r\n    path: \"/maintenance-cleanliness-checklist\",\r\n    exact: true,\r\n    name: \"MaintenanceCleanlinessChecklist\",\r\n    component: MaintenanceCleanlinessChecklist,\r\n  },\r\n\r\n  {\r\n    path: \"/preventive-maintenance-schedule\",\r\n    exact: true,\r\n    name: \"PreventiveMaintenanceSchedule\",\r\n    component: PreventiveMaintenanceSchedule,\r\n  },\r\n\r\n  {\r\n    path: \"/preventive-maintenance-record\",\r\n    exact: true,\r\n    name: \"PreventiveMaintenanceRecord\",\r\n    component: PreventiveMaintenanceRecord,\r\n  },\r\n\r\n  {\r\n    path: \"/preventive-maintenance-analysis-report\",\r\n    exact: true,\r\n    name: \"PreventiveMaintenanceAnalysisReport\",\r\n    component: PreventiveMaintenanceAnalysisReport,\r\n  },\r\n\r\n  {\r\n    path: \"/breakdown-maintenance-record\",\r\n    exact: true,\r\n    name: \"BreakdownMaintenanceRecord\",\r\n    component: BreakdownMaintenanceRecord,\r\n  },\r\n\r\n  {\r\n    path: \"/breakdown-maintenance-analysis-record\",\r\n    exact: true,\r\n    name: \"BreakdownMaintenanceAnalysisRecord\",\r\n    component: BreakdownMaintenanceAnalysisRecord,\r\n  },\r\n\r\n  {\r\n    path: \"/breakdown-maintenance-record\",\r\n    exact: true,\r\n    name: \"BreakdownMaintenanceRecord\",\r\n    component: BreakdownMaintenanceRecord,\r\n  },\r\n  //  maintentaince  end\r\n\r\n  //  Production Start\r\n  {\r\n    path: \"/production-planning-cf\",\r\n    exact: true,\r\n    name: \"ProductionPlanningCf\",\r\n    component: ProductionPlanningCf,\r\n  },\r\n\r\n  {\r\n    path: \"/production-report-cf\",\r\n    exact: true,\r\n    name: \"ProductionReportCf\",\r\n    component: ProductionReportCf,\r\n  },\r\n\r\n  {\r\n    path: \"/stock-report-cf\",\r\n    exact: true,\r\n    name: \"StockReportCf\",\r\n    component: StockReportCf,\r\n  },\r\n  {\r\n    path: \"/stock-record-vf\",\r\n    exact: true,\r\n    name: \"StockReportVf\",\r\n    component: StockReportVf,\r\n  },\r\n\r\n  {\r\n    path: \"/process-parameters-cf\",\r\n    exact: true,\r\n    name: \"ProcessParametersCf\",\r\n    component: ProcessParametersCf,\r\n  },\r\n\r\n  {\r\n    path: \"/production-planning-vf\",\r\n    exact: true,\r\n    name: \"ProductionPlanningVf\",\r\n    component: ProductionPlanningVf,\r\n  },\r\n\r\n  {\r\n    path: \"/production-report-vf\",\r\n    exact: true,\r\n    name: \"ProductionReportVf\",\r\n    component: ProductionReportVf,\r\n  },\r\n\r\n  // Production end\r\n\r\n  // purchase start\r\n\r\n  {\r\n    path: \"/authorized-supplier-list\",\r\n    exact: true,\r\n    name: \"AuthorizedSupplierList\",\r\n    component: AuthorizedSupplierList,\r\n  },\r\n  {\r\n    path: \"/purchase-requition\",\r\n    exact: true,\r\n    name: \"Purchase\",\r\n    component: Purchase,\r\n  },\r\n  {\r\n    path: \"/suppilier-performance-monitiring-record\",\r\n    exact: true,\r\n    name: \"SuppilierPerformanceMonitiringRecord\",\r\n    component: SuppilierPerformanceMonitiringRecord,\r\n  },\r\n\r\n  // purchase end\r\n\r\n  // QMS start\r\n\r\n  {\r\n    path: \"/incoming-material-testing-record\",\r\n    exact: true,\r\n    name: \"IncomingMaterialTestingRecord\",\r\n    component: IncomingMaterialTestingRecord,\r\n  },\r\n\r\n  {\r\n    path: \"/customer-complaint-record\",\r\n    exact: true,\r\n    name: \"CustomerComplaintRecord\",\r\n    component: CustomerComplaintRecord,\r\n  },\r\n\r\n  {\r\n    path: \"/customer-complaint-report\",\r\n    exact: true,\r\n    name: \"CustomerComplaintReport\",\r\n    component: CustomerComplaintReport,\r\n  },\r\n\r\n  {\r\n    path: \"/capa\",\r\n    exact: true,\r\n    name: \"Capa\",\r\n    component: Capa,\r\n  },\r\n\r\n  {\r\n    path: \"/production-ma\",\r\n    exact: true,\r\n    name: \"ProductionMa\",\r\n    component: ProductionMa,\r\n  },\r\n\r\n  // Qms End\r\n\r\n  // sale start\r\n  {\r\n    path: \"/enquiry-form\",\r\n    exact: true,\r\n    name: \"EnquiryForm\",\r\n    component: EnquiryForm,\r\n  },\r\n  {\r\n    path: \"/customer-registration-form\",\r\n    exact: true,\r\n    name: \"CustomerRegistrationForm\",\r\n    component: CustomerRegistrationForm,\r\n  },\r\n\r\n  {\r\n    path: \"/quotation\",\r\n    exact: true,\r\n    name: \"Quotation\",\r\n    component: Quotation,\r\n  },\r\n\r\n  {\r\n    path: \"/sales-target-plan-vs-actual\",\r\n    exact: true,\r\n    name: \"SalesTargetPlanVsActual\",\r\n    component: SalesTargetPlanVsActual,\r\n  },\r\n\r\n  {\r\n    path: \"/customer-feedback\",\r\n    exact: true,\r\n    name: \"CustomerFeedback\",\r\n    component: CustomerFeedback,\r\n  },\r\n\r\n  {\r\n    path: \"/feasibility-report\",\r\n    exact: true,\r\n    name: \"FeasibilityReport\",\r\n    component: FeasibilityReport,\r\n  },\r\n  // sale end\r\n\r\n  // Store start\r\n\r\n  {\r\n    path: \"/purchase-requisition\",\r\n    exact: true,\r\n    name: \"PurchaseRequisition\",\r\n    component: PurchaseRequisition,\r\n  },\r\n\r\n  {\r\n    path: \"/incoming-material-inspection-checklist\",\r\n    exact: true,\r\n    name: \"IncomingMaterialInspectionChecklist\",\r\n    component: IncomingMaterialInspectionChecklist,\r\n  },\r\n\r\n  {\r\n    path: \"/stock-register\",\r\n    exact: true,\r\n    name: \"StockRegister\",\r\n    component: StockRegister,\r\n  },\r\n\r\n  {\r\n    path: \"/list-of-shelf-life-of-items\",\r\n    exact: true,\r\n    name: \"ListOfShelfLifeOfItems\",\r\n    component: ListOfShelfLifeOfItems,\r\n  },\r\n\r\n  {\r\n    path: \"/record-of-disposal-of-shelf-of-items\",\r\n    exact: true,\r\n    name: \"RecordOfDisposalOfShelfOfItems\",\r\n    component: RecordOfDisposalOfShelfOfItems,\r\n  },\r\n  // store end\r\n];\r\n\r\nexport default userRoutes;\r\n","E:\\git vinraj\\NewVinraj\\src\\Components\\Master\\PrefixMaster\\Prefix\\EditPrefix.js",["568"],"import { ErrorMessage, Field, Formik, Form } from \"formik\";\r\nimport React, { useState } from \"react\";\r\nimport * as Yup from \"yup\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../../../reduxStore/actions\";\r\n\r\nimport {\r\n  Button,\r\n  Col,\r\n  InputGroup,\r\n  Label,\r\n  Modal,\r\n  ModalBody,\r\n  ModalHeader,\r\n  Row,\r\n} from \"reactstrap\";\r\nimport CustomInput from \"../../../../views/Custom/CustomInput\";\r\nimport CustomSelect from \"../../../../views/Custom/CustomSelect\";\r\nimport Loader2 from \"../../../loader/Loader2\";\r\n\r\nfunction EditPrefix(props) {\r\n  const accessToken = `${props.login?.login?.token}`;\r\n\r\n  let data = {\r\n    token: accessToken,\r\n    id: props.data?.id,\r\n  };\r\n\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggle = () => {\r\n    setModal(!modal);\r\n  };\r\n  const handleSubmit = (values, { setSubmitting }) => {\r\n    let user = {\r\n      department_id: values.department_id,\r\n      form_id: values.form_id,\r\n      prefix: values.prefix,\r\n      title: values.title,\r\n      rev_no: values.rev_no,\r\n    };\r\n    console.log(\"Data of Vendor:\", user);\r\n    props.updatePrefixDataToggle(data, user, toggle);\r\n    setSubmitting(true);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        className=\"btn-warning p-1\"\r\n        onClick={() => {\r\n          toggle();\r\n        }}\r\n      >\r\n        <i className=\"fa fa-edit\" aria-hidden=\"true\"></i>\r\n      </Button>\r\n      <Modal className=\"modal-info modal-lg\" isOpen={modal} toggle={toggle}>\r\n        <ModalHeader toggle={toggle}>Edit Prefix</ModalHeader>\r\n        {props.prefix?.isUpdateLoading && <Loader2 />}\r\n        <ModalBody>\r\n          <Formik\r\n            initialValues={{\r\n              form_id: props.data?.form_id,\r\n              department_id: props.data?.department_id,\r\n              prefix: props.data?.prefix,\r\n              title: props.data?.title,\r\n              rev_no: props.data?.rev_no,\r\n            }}\r\n            onSubmit={handleSubmit}\r\n          >\r\n            {(formProps) => (\r\n              <Form>\r\n                <Row className=\"form-group\">\r\n                  <Col md={6}>\r\n                    <Label for=\"department_id\">Select Department</Label>\r\n                    <InputGroup>\r\n                      <Field\r\n                        component={CustomSelect}\r\n                        type=\"select\"\r\n                        name=\"department_id\"\r\n                        id=\"department_id\"\r\n                        className={\r\n                          \"form-control\" +\r\n                          (formProps.errors.department_id &&\r\n                          formProps.touched.department_id\r\n                            ? \" is-invalid\"\r\n                            : \"\")\r\n                        }\r\n                      >\r\n                        <option>select</option>\r\n                        {props.department?.map((dep) => (\r\n                          <option key={dep.id} value={dep.id}>\r\n                            {dep.name}\r\n                          </option>\r\n                        ))}\r\n                      </Field>\r\n                      <ErrorMessage\r\n                        name=\"department_id\"\r\n                        component=\"div\"\r\n                        className=\"invalid-feedback\"\r\n                      />\r\n                    </InputGroup>\r\n                  </Col>\r\n\r\n                  <Col md={6}>\r\n                    <Label for=\"discount\">Select Form</Label>\r\n                    <InputGroup>\r\n                      <Field\r\n                        component={CustomSelect}\r\n                        type=\"select\"\r\n                        name=\"form_id\"\r\n                        id=\"form_id\"\r\n                        className={\r\n                          \"form-control\" +\r\n                          (formProps.errors.form_id && formProps.touched.form_id\r\n                            ? \" is-invalid\"\r\n                            : \"\")\r\n                        }\r\n                      >\r\n                        <option>select Form</option>\r\n                        {props.form?.map((form) => {\r\n                          if (\r\n                            formProps.values.department_id ===\r\n                            form.department_id\r\n                          ) {\r\n                            //  console.log(\"Dep2\", dep2);\r\n                            //  console.log(\"department value\", form.department_id);\r\n\r\n                            return (\r\n                              <option key={form.id} value={form.id}>\r\n                                {form.name}\r\n                              </option>\r\n                            );\r\n                          }\r\n                          return <div></div>;\r\n                        })}\r\n                      </Field>\r\n\r\n                      <ErrorMessage\r\n                        name=\"form_id\"\r\n                        component=\"div\"\r\n                        className=\"invalid-feedback\"\r\n                      />\r\n                    </InputGroup>\r\n                  </Col>\r\n                </Row>\r\n                <Row className=\"form-group\">\r\n                  <Col md={6}>\r\n                    <Label for=\"title\">Enter Title</Label>\r\n                    <InputGroup>\r\n                      <Field\r\n                        component={CustomInput}\r\n                        type=\"text\"\r\n                        name=\"title\"\r\n                        id=\"title\"\r\n                        placeholder=\"Enter Title\"\r\n                        className={\r\n                          \"form-control\" +\r\n                          (formProps.errors.title && formProps.touched.title\r\n                            ? \" is-invalid\"\r\n                            : \"\")\r\n                        }\r\n                      />\r\n\r\n                      <ErrorMessage\r\n                        name=\"title\"\r\n                        component=\"div\"\r\n                        className=\"invalid-feedback\"\r\n                      />\r\n                    </InputGroup>\r\n                  </Col>\r\n                  <Col md={6}>\r\n                    <Label for=\"rev_no\">Enter Rev no</Label>\r\n                    <InputGroup>\r\n                      <Field\r\n                        component={CustomInput}\r\n                        type=\"text\"\r\n                        name=\"rev_no\"\r\n                        id=\"rev_no\"\r\n                        placeholder=\"Enter Rev no\"\r\n                        className={\r\n                          \"form-control\" +\r\n                          (formProps.errors.rev_no && formProps.touched.rev_no\r\n                            ? \" is-invalid\"\r\n                            : \"\")\r\n                        }\r\n                      />\r\n\r\n                      <ErrorMessage\r\n                        name=\"rev_no\"\r\n                        component=\"div\"\r\n                        className=\"invalid-feedback\"\r\n                      />\r\n                    </InputGroup>\r\n                  </Col>\r\n                </Row>\r\n                <Row className=\"form-group\">\r\n                  <Col md={6}>\r\n                    <Label for=\"prefix\">Enter Prefix/Di No</Label>\r\n                    <InputGroup>\r\n                      <Field\r\n                        component={CustomInput}\r\n                        type=\"text\"\r\n                        name=\"prefix\"\r\n                        id=\"prefix\"\r\n                        placeholder=\"Enter Prefix/Di No\"\r\n                        className={\r\n                          \"form-control\" +\r\n                          (formProps.errors.prefix && formProps.touched.prefix\r\n                            ? \" is-invalid\"\r\n                            : \"\")\r\n                        }\r\n                      />\r\n\r\n                      <ErrorMessage\r\n                        name=\"prefix\"\r\n                        component=\"div\"\r\n                        className=\"invalid-feedback\"\r\n                      />\r\n                    </InputGroup>\r\n                  </Col>\r\n                </Row>\r\n\r\n                <Row style={{ justifyContent: \"center\" }}>\r\n                  <Col md={4}>\r\n                    <Button type=\"reset\" color=\"danger\" block>\r\n                      <b>Reset</b>\r\n                    </Button>\r\n                  </Col>\r\n                  <Col md={4}>\r\n                    <Button\r\n                      type=\"submit\"\r\n                      disabled={formProps.isSubmitting}\r\n                      color=\"primary\"\r\n                      block\r\n                    >\r\n                      Submit\r\n                    </Button>\r\n                  </Col>\r\n                </Row>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </ModalBody>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    login: state.login,\r\n    prefix: state.prefix,\r\n    department: state.department.department,\r\n    form: state.form.form,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onDepartmentGetData: (data) => dispatch(actions.departmentGetData(data)),\r\n    onFormGetData: (data) => dispatch(actions.formGetData(data)),\r\n    onPrefixGetData: (data) => dispatch(actions.prefixGetData(data)),\r\n    onDeletePrefix: (data, id) => dispatch(actions.deletePrefix(data, id)),\r\n    onPostPrefixData: (data, user, toggle) =>\r\n      dispatch(actions.postPrefixData(data, user, toggle)),\r\n    updatePrefixDataToggle: (data, user, toggle) =>\r\n      dispatch(actions.updatePrefixDataToggle(data, user, toggle)),\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EditPrefix);\r\n","E:\\git vinraj\\NewVinraj\\src\\Components\\loader\\Loader2.js",[],"E:\\git vinraj\\NewVinraj\\src\\reduxStore\\actions\\detailsCreators.js",[],"E:\\git vinraj\\NewVinraj\\src\\reduxStore\\reducers\\RDetails.js",[],"E:\\git vinraj\\NewVinraj\\src\\Components\\Purchase\\EditPurchaseRequisition.js",[],["569","570"],"E:\\git vinraj\\NewVinraj\\src\\Components\\Purchase\\ViewPurchaseRequisiton.js",[],"E:\\git vinraj\\NewVinraj\\src\\Components\\Sales\\View\\ViewSales.js",[],"E:\\git vinraj\\NewVinraj\\src\\Components\\Master\\PrefixMaster\\Prefix\\NewPrefix.js",[],"E:\\git vinraj\\NewVinraj\\src\\reduxStore\\actions\\processCreators.js",[],"E:\\git vinraj\\NewVinraj\\src\\reduxStore\\reducers\\RProcess.js",[],"E:\\git vinraj\\NewVinraj\\src\\reduxStore\\reducers\\RBreakMainRecord.js",[],"E:\\git vinraj\\NewVinraj\\src\\reduxStore\\actions\\breakMainRecordCreator.js",[],"E:\\git vinraj\\NewVinraj\\src\\Components\\Maintaince\\Edit\\EditBreakdownMaintenanceRecord.js",[],"E:\\git vinraj\\NewVinraj\\src\\reduxStore\\actions\\enquiriesFormCreator.js",[],"E:\\git vinraj\\NewVinraj\\src\\reduxStore\\reducers\\REquiriesForm.js",[],"E:\\git vinraj\\NewVinraj\\src\\reduxStore\\actions\\prodPlanCfCreator.js",[],{"ruleId":"571","replacedBy":"572"},{"ruleId":"573","replacedBy":"574"},{"ruleId":"575","severity":1,"message":"576","line":3,"column":8,"nodeType":"577","messageId":"578","endLine":3,"endColumn":15},{"ruleId":"575","severity":1,"message":"579","line":38,"column":10,"nodeType":"577","messageId":"578","endLine":38,"endColumn":21},{"ruleId":"575","severity":1,"message":"580","line":47,"column":10,"nodeType":"577","messageId":"578","endLine":47,"endColumn":22},{"ruleId":"575","severity":1,"message":"581","line":48,"column":10,"nodeType":"577","messageId":"578","endLine":48,"endColumn":22},{"ruleId":"575","severity":1,"message":"580","line":47,"column":10,"nodeType":"577","messageId":"578","endLine":47,"endColumn":22},{"ruleId":"575","severity":1,"message":"581","line":48,"column":10,"nodeType":"577","messageId":"578","endLine":48,"endColumn":22},{"ruleId":"575","severity":1,"message":"580","line":44,"column":10,"nodeType":"577","messageId":"578","endLine":44,"endColumn":22},{"ruleId":"575","severity":1,"message":"581","line":45,"column":10,"nodeType":"577","messageId":"578","endLine":45,"endColumn":22},{"ruleId":"582","severity":1,"message":"583","line":13,"column":25,"nodeType":"584","endLine":13,"endColumn":95},{"ruleId":"575","severity":1,"message":"576","line":3,"column":8,"nodeType":"577","messageId":"578","endLine":3,"endColumn":15},{"ruleId":"575","severity":1,"message":"585","line":13,"column":8,"nodeType":"577","messageId":"578","endLine":13,"endColumn":19},{"ruleId":"575","severity":1,"message":"586","line":15,"column":8,"nodeType":"577","messageId":"578","endLine":15,"endColumn":24},{"ruleId":"575","severity":1,"message":"587","line":16,"column":8,"nodeType":"577","messageId":"578","endLine":16,"endColumn":12},{"ruleId":"575","severity":1,"message":"576","line":3,"column":8,"nodeType":"577","messageId":"578","endLine":3,"endColumn":15},{"ruleId":"575","severity":1,"message":"585","line":13,"column":8,"nodeType":"577","messageId":"578","endLine":13,"endColumn":19},{"ruleId":"575","severity":1,"message":"586","line":15,"column":8,"nodeType":"577","messageId":"578","endLine":15,"endColumn":24},{"ruleId":"575","severity":1,"message":"587","line":16,"column":8,"nodeType":"577","messageId":"578","endLine":16,"endColumn":12},{"ruleId":"575","severity":1,"message":"576","line":3,"column":8,"nodeType":"577","messageId":"578","endLine":3,"endColumn":15},{"ruleId":"575","severity":1,"message":"585","line":13,"column":8,"nodeType":"577","messageId":"578","endLine":13,"endColumn":19},{"ruleId":"575","severity":1,"message":"586","line":15,"column":8,"nodeType":"577","messageId":"578","endLine":15,"endColumn":24},{"ruleId":"575","severity":1,"message":"587","line":16,"column":8,"nodeType":"577","messageId":"578","endLine":16,"endColumn":12},{"ruleId":"575","severity":1,"message":"576","line":3,"column":8,"nodeType":"577","messageId":"578","endLine":3,"endColumn":15},{"ruleId":"575","severity":1,"message":"585","line":13,"column":8,"nodeType":"577","messageId":"578","endLine":13,"endColumn":19},{"ruleId":"575","severity":1,"message":"586","line":15,"column":8,"nodeType":"577","messageId":"578","endLine":15,"endColumn":24},{"ruleId":"575","severity":1,"message":"587","line":16,"column":8,"nodeType":"577","messageId":"578","endLine":16,"endColumn":12},{"ruleId":"575","severity":1,"message":"576","line":4,"column":8,"nodeType":"577","messageId":"578","endLine":4,"endColumn":15},{"ruleId":"575","severity":1,"message":"585","line":14,"column":8,"nodeType":"577","messageId":"578","endLine":14,"endColumn":19},{"ruleId":"575","severity":1,"message":"586","line":16,"column":8,"nodeType":"577","messageId":"578","endLine":16,"endColumn":24},{"ruleId":"575","severity":1,"message":"587","line":17,"column":8,"nodeType":"577","messageId":"578","endLine":17,"endColumn":12},{"ruleId":"575","severity":1,"message":"576","line":6,"column":8,"nodeType":"577","messageId":"578","endLine":6,"endColumn":15},{"ruleId":"575","severity":1,"message":"585","line":9,"column":8,"nodeType":"577","messageId":"578","endLine":9,"endColumn":19},{"ruleId":"575","severity":1,"message":"588","line":10,"column":8,"nodeType":"577","messageId":"578","endLine":10,"endColumn":18},{"ruleId":"575","severity":1,"message":"587","line":11,"column":8,"nodeType":"577","messageId":"578","endLine":11,"endColumn":12},{"ruleId":"575","severity":1,"message":"586","line":12,"column":8,"nodeType":"577","messageId":"578","endLine":12,"endColumn":24},{"ruleId":"575","severity":1,"message":"576","line":5,"column":8,"nodeType":"577","messageId":"578","endLine":5,"endColumn":15},{"ruleId":"575","severity":1,"message":"585","line":7,"column":8,"nodeType":"577","messageId":"578","endLine":7,"endColumn":19},{"ruleId":"575","severity":1,"message":"588","line":8,"column":8,"nodeType":"577","messageId":"578","endLine":8,"endColumn":18},{"ruleId":"575","severity":1,"message":"586","line":9,"column":8,"nodeType":"577","messageId":"578","endLine":9,"endColumn":24},{"ruleId":"575","severity":1,"message":"587","line":10,"column":8,"nodeType":"577","messageId":"578","endLine":10,"endColumn":12},{"ruleId":"575","severity":1,"message":"589","line":11,"column":8,"nodeType":"577","messageId":"578","endLine":11,"endColumn":17},{"ruleId":"575","severity":1,"message":"590","line":63,"column":15,"nodeType":"577","messageId":"578","endLine":63,"endColumn":21},{"ruleId":"591","severity":1,"message":"592","line":66,"column":32,"nodeType":"593","messageId":"594","endLine":66,"endColumn":34},{"ruleId":"571","replacedBy":"595"},{"ruleId":"573","replacedBy":"596"},{"ruleId":"575","severity":1,"message":"597","line":147,"column":41,"nodeType":"577","messageId":"578","endLine":147,"endColumn":44},{"ruleId":"575","severity":1,"message":"598","line":10,"column":3,"nodeType":"577","messageId":"578","endLine":10,"endColumn":6},{"ruleId":"575","severity":1,"message":"599","line":14,"column":31,"nodeType":"577","messageId":"578","endLine":14,"endColumn":46},{"ruleId":"575","severity":1,"message":"600","line":6,"column":8,"nodeType":"577","messageId":"578","endLine":6,"endColumn":12},{"ruleId":"575","severity":1,"message":"601","line":11,"column":10,"nodeType":"577","messageId":"578","endLine":11,"endColumn":16},{"ruleId":"575","severity":1,"message":"580","line":19,"column":10,"nodeType":"577","messageId":"578","endLine":19,"endColumn":22},{"ruleId":"575","severity":1,"message":"581","line":20,"column":10,"nodeType":"577","messageId":"578","endLine":20,"endColumn":22},{"ruleId":"575","severity":1,"message":"602","line":1,"column":37,"nodeType":"577","messageId":"578","endLine":1,"endColumn":46},{"ruleId":"575","severity":1,"message":"603","line":10,"column":10,"nodeType":"577","messageId":"578","endLine":10,"endColumn":15},{"ruleId":"575","severity":1,"message":"604","line":10,"column":17,"nodeType":"577","messageId":"578","endLine":10,"endColumn":25},{"ruleId":"575","severity":1,"message":"602","line":1,"column":37,"nodeType":"577","messageId":"578","endLine":1,"endColumn":46},{"ruleId":"575","severity":1,"message":"598","line":4,"column":10,"nodeType":"577","messageId":"578","endLine":4,"endColumn":13},{"ruleId":"575","severity":1,"message":"605","line":4,"column":15,"nodeType":"577","messageId":"578","endLine":4,"endColumn":18},{"ruleId":"575","severity":1,"message":"606","line":74,"column":9,"nodeType":"577","messageId":"578","endLine":74,"endColumn":16},{"ruleId":"571","replacedBy":"607"},{"ruleId":"573","replacedBy":"608"},{"ruleId":"575","severity":1,"message":"602","line":1,"column":37,"nodeType":"577","messageId":"578","endLine":1,"endColumn":46},{"ruleId":"575","severity":1,"message":"598","line":4,"column":10,"nodeType":"577","messageId":"578","endLine":4,"endColumn":13},{"ruleId":"575","severity":1,"message":"605","line":4,"column":15,"nodeType":"577","messageId":"578","endLine":4,"endColumn":18},{"ruleId":"575","severity":1,"message":"601","line":4,"column":20,"nodeType":"577","messageId":"578","endLine":4,"endColumn":26},{"ruleId":"575","severity":1,"message":"609","line":58,"column":9,"nodeType":"577","messageId":"578","endLine":58,"endColumn":26},{"ruleId":"575","severity":1,"message":"610","line":64,"column":10,"nodeType":"577","messageId":"578","endLine":64,"endColumn":19},{"ruleId":"575","severity":1,"message":"611","line":71,"column":9,"nodeType":"577","messageId":"578","endLine":71,"endColumn":24},{"ruleId":"575","severity":1,"message":"587","line":3,"column":10,"nodeType":"577","messageId":"578","endLine":3,"endColumn":14},{"ruleId":"575","severity":1,"message":"612","line":1,"column":27,"nodeType":"577","messageId":"578","endLine":1,"endColumn":35},{"ruleId":"575","severity":1,"message":"613","line":3,"column":8,"nodeType":"577","messageId":"578","endLine":3,"endColumn":11},{"ruleId":"591","severity":1,"message":"614","line":52,"column":38,"nodeType":"593","messageId":"615","endLine":52,"endColumn":40},{"ruleId":"616","severity":1,"message":"617","line":53,"column":28,"nodeType":"618","messageId":"619","endLine":53,"endColumn":30},{"ruleId":"575","severity":1,"message":"620","line":8,"column":7,"nodeType":"577","messageId":"578","endLine":8,"endColumn":17},{"ruleId":"575","severity":1,"message":"621","line":3,"column":13,"nodeType":"577","messageId":"578","endLine":3,"endColumn":16},{"ruleId":"571","replacedBy":"622"},{"ruleId":"573","replacedBy":"623"},"no-native-reassign",["624"],"no-negated-in-lhs",["625"],"no-unused-vars","'Sidebar' is defined but never used.","Identifier","unusedVar","'printStatus' is assigned a value but never used.","'deleteStatus' is assigned a value but never used.","'updateStatus' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Breadcrumbs' is defined but never used.","'NavigateNextIcon' is defined but never used.","'Link' is defined but never used.","'Typography' is defined but never used.","'ExportCSV' is defined but never used.","'setCsv' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["624"],["625"],"'obj' is assigned a value but never used.","'Row' is defined but never used.","'yupToFormErrors' is defined but never used.","'Req2' is defined but never used.","'Button' is defined but never used.","'useEffect' is defined but never used.","'users' is assigned a value but never used.","'setUsers' is assigned a value but never used.","'Col' is defined but never used.","'onClick' is assigned a value but never used.",["624"],["625"],"'handleInputChange' is assigned a value but never used.","'showtable' is assigned a value but never used.","'showtableHandle' is assigned a value but never used.","'useState' is defined but never used.","'Top' is defined but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'UserMaster' is assigned a value but never used.","'Yup' is defined but never used.",["624"],["625"],"no-global-assign","no-unsafe-negation"]